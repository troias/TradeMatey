

--- ./src/types/index.ts ---

export interface User {
  id: string;
  email: string;
  role: "client" | "tradie";
}

export type UserRole =
  | "admin"
  | "marketing"
  | "finance"
  | "support"
  | "employee";
export type ProfileRole = "client" | "tradie";

export interface Database {
  public: {
    Tables: {
      users: {
        Row: {
          id: string;
          email: string | null;
          roles: UserRole[];
          completed_jobs: number;
          average_rating: number;
          top_tradie: boolean;
          referral_credits: number;
          region: string | null;
          first_job_free: boolean;
          has_completed_onboarding: boolean;
          stripe_customer_id: string | null;
          payment_method_id: string | null;
          stripe_account_id: string | null;
          license_path: string | null;
          trade: string | null;
          location: string | null;
          bio: string | null;
        };
        Insert: {
          id: string;
          email?: string | null;
          roles?: UserRole[];
          completed_jobs?: number;
          average_rating?: number;
          top_tradie?: boolean;
          referral_credits?: number;
          region?: string | null;
          first_job_free?: boolean;
          has_completed_onboarding?: boolean;
          stripe_customer_id?: string | null;
          payment_method_id?: string | null;
          stripe_account_id?: string | null;
          license_path?: string | null;
          trade?: string | null;
          location?: string | null;
          bio?: string | null;
        };
        Update: {
          id?: string;
          email?: string | null;
          roles?: UserRole[];
          completed_jobs?: number;
          average_rating?: number;
          top_tradie?: boolean;
          referral_credits?: number;
          region?: string | null;
          first_job_free?: boolean;
          has_completed_onboarding?: boolean;
          stripe_customer_id?: string | null;
          payment_method_id?: string | null;
          stripe_account_id?: string | null;
          license_path?: string | null;
          trade?: string | null;
          location?: string | null;
          bio?: string | null;
        };
      };
      profiles: {
        Row: {
          id: string;
          role: ProfileRole;
          created_at: string;
        };
        Insert: {
          id: string;
          role?: ProfileRole;
          created_at?: string;
        };
        Update: {
          id?: string;
          role?: ProfileRole;
          created_at?: string;
        };
      };
    };
    Functions: {
      assign_user_role: {
        Args: {
          user_id: string;
          new_roles: string[];
        };
        Returns: void;
      };
    };
  };
}


--- ./src/service-worker.ts ---

self.addEventListener("fetch", (event) => {
  event.respondWith(
    caches.match(event.request).then((response) => {
      return response || fetch(event.request);
    })
  );
});


--- ./src/lib/supabase/server.ts ---

import { createServerClient } from "@supabase/ssr";
import { cookies } from "next/headers";

export const createClient = () => {
  const cookieStore = cookies();
  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll();
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            );
          } catch {
            // Ignore errors in Server Components
          }
        },
      },
    }
  );
};


--- ./src/lib/supabase/client.ts ---

import { createBrowserClient } from "@supabase/ssr";

export const createClient = () =>
  createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  );


--- ./src/lib/supabase/functions/stripe-payment.ts ---

import Stripe from "stripe";
import { createClient } from "@/lib/supabase/server";

const stripe = new Stripe(Deno.env.get("STRIPE_SECRET_KEY")!);
const supabase = createClient();

export async function handler(req: Request) {
  const { amount, client_id, milestone_id } = await req.json();
  const { data: milestone } = await supabase
    .from("milestones")
    .select("*, jobs!inner(region)")
    .eq("id", milestone_id)
    .single();

  const commission =
    milestone.jobs.region === "Regional"
      ? Math.min(amount * 0.0333, 25)
      : amount * 0.0333;

  const paymentIntent = await stripe.paymentIntents.create({
    amount: Math.round((amount + commission) * 100),
    currency: "aud",
    metadata: { client_id, milestone_id },
  });

  await supabase.from("payments").insert({
    milestone_id,
    client_id,
    amount,
    status: "pending",
    payment_intent_id: paymentIntent.id,
  });

  return new Response(
    JSON.stringify({ clientSecret: paymentIntent.client_secret })
  );
}


--- ./src/lib/supabase/functions/escrow-payment.ts ---

// src/lib/supabase/functions/escrow-payment.ts
import Stripe from "stripe";
import { createClient } from "@/lib/supabase/server";
const stripe = new Stripe(Deno.env.get("STRIPE_SECRET_KEY"));
const supabase = createClient();
export async function handler(req) {
  const { booking_id, client_id, amount, is_regional } = await req.json();
  const commissionRate = 0.0333;
  let commission = amount * commissionRate;
  if (is_regional) commission = Math.min(commission, 25);
  const paymentIntent = await stripe.paymentIntents.create({
    amount: Math.round((amount + commission) * 100),
    currency: "aud",
    metadata: { booking_id, client_id, commission: commission.toString() },
  });
  const { error } = await supabase.from("payments").insert({
    booking_id,
    client_id,
    amount,
    status: "held",
    payment_intent_id: paymentIntent.id,
  });
  if (error) throw new Error(error.message);
  return new Response(
    JSON.stringify({ clientSecret: paymentIntent.client_secret })
  );
}


--- ./src/lib/supabase/functions/sync-quickbook.ts ---

import { supabase } from "./ lib/ supabase ";
import { QuickBooks } from "quickbooks ";
export default async (req: Request) => {
  const { data: payments } = await supabase
    .from("payments ")
    .select("amount , status ");
  const qb = new QuickBooks({ consumerKey: "", consumerSecret: "" });
  payments.forEach((p) =>
    qb.createInvoice({ amount: p.amount, status: p.status })
  );
  return new Response(JSON.stringify({ success: true }));
};


--- ./src/lib/supabase/functions/match-tradies.ts ---

import { supabase } from './lib/supabase';

export async function handler(req: Request) {
  const { job_id } = await req.json();

  const { data: job } = await supabase
    .from('jobs')
    .select('description, location')
    .eq('id', job_id)
    .single();

  if (!job) {
    return new Response(JSON.stringify({ success: false, error: 'Job not found' }), { status: 404 });
  }

  const { data: tradies } = await supabase
    .from('tradies')
    .select('id, skills, location, ratings, availability(available_dates)')
    .ilike('skills', `%${job.description}%`)
    .eq('location', job.location);

  if (!tradies) {
    return new Response(JSON.stringify({ success: false, error: 'No tradies found' }), { status: 404 });
  }

  const matchedTradies = tradies.filter((tradie) => {
    const skillMatch = tradie.skills?.some((skill: string) =>
      job.description.toLowerCase().includes(skill.toLowerCase())
    );
    const locationMatch = calculateDistance(tradie.location, job.location) < 50;
    return skillMatch && locationMatch && tradie.ratings >= 4;
  });

  await supabase
    .from('jobs')
    .update({ matched_tradies: matchedTradies })
    .eq('id', job_id);

  return new Response(JSON.stringify({ success: true, matchedCount: matchedTradies.length }));
}

// Dummy function: replace with your actual distance calc
function calculateDistance(l


--- ./src/lib/supabase/functions/sync-hubspot.ts ---

import { supabase } from "./ lib/ supabase ";
import { HubSpot } from "hubspot -api ";
export default async (req: Request) => {
  const { data: users } = await supabase.from("users ").select("email , role ");
  const hubspot = new HubSpot({ apiKey: "" });
  users.forEach((u) =>
    hubspot.contacts.create({ email: u.email, properties: { role: u.role } })
  );
  return new Response(JSON.stringify({ success: true }));
};


--- ./src/lib/supabase/functions/milestone-payment.ts ---

import Stripe from "stripe";
import { createClient } from "@/lib/supabase/server";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: "2024-04-10",
});
const supabase = createClient();

export async function processMilestonePayment(milestoneId: string) {
  try {
    // Fetch milestone and related job
    const { data: milestone, error: milestoneError } = await supabase
      .from("milestones")
      .select("*, job:jobs(client_id, region)")
      .eq("id", milestoneId)
      .single();
    if (milestoneError || !milestone) {
      throw new Error("Milestone not found");
    }

    // Fetch client payment details
    const { data: client, error: clientError } = await supabase
      .from("users")
      .select("stripe_customer_id, payment_method_id")
      .eq("id", milestone.job.client_id)
      .single();
    if (clientError || !client) {
      throw new Error("Client not found");
    }

    // Calculate commission (3.33%, capped at A$25 in regional Queensland)
    const commissionRate = 0.0333;
    let commission = milestone.amount * commissionRate;
    if (milestone.job.region === "Regional") {
      commission = Math.min(commission, 25); // A$25 cap
    }

    // Create payment intent
    const paymentIntent = await stripe.paymentIntents.create({
      amount: Math.round((milestone.amount + commission) * 100), // Convert to cents
      currency: "aud", // Use AUD for Queensland
      customer: client.stripe_customer_id,
      payment_method: client.payment_method_id,
      off_session: true,
      confirm: true,
      description: `Milestone: ${milestone.title} (Job: ${milestone.job_id})`,
      metadata: {
        milestone_id: milestoneId,
        commission: commission.toFixed(2),
        region: milestone.job.region,
      },
    });

    // Update milestone status
    const { error: updateError } = await supabase
      .from("milestones")
      .update({
        status: "paid",
        commission,
        payment_intent_id: paymentIntent.id,
        updated_at: new Date().toISOString(),
      })
      .eq("id", milestoneId);
    if (updateError) {
      throw new Error("Failed to update milestone");
    }

    // Notify client and tradie
    const { data: users } = await supabase
      .from("jobs")
      .select("client_id, tradie_id")
      .eq("id", milestone.job_id)
      .single();
    await supabase.from("notifications").insert([
      {
        user_id: users.client_id,
        message: `Milestone "${milestone.title}" paid (A$${
          milestone.amount
        }, commission A$${commission.toFixed(2)})`,
        job_id: milestone.job_id,
      },
      {
        user_id: users.tradie_id,
        message: `Milestone "${milestone.title}" paid (A$${milestone.amount})`,
        job_id: milestone.job_id,
      },
    ]);

    return { success: true, paymentIntent };
  } catch (error) {
    console.error("Payment error:", error);
    await supabase.from("notifications").insert({
      user_id: (await supabase.auth.getUser()).data.user!.id,
      message: `Payment failed for milestone ${milestoneId}: ${error.message}`,
      job_id: milestone?.job_id,
    });
    return { success: false, error: error.message };
  }
}


--- ./src/lib/auth.tsx ---

import { NextAuthOptions } from "next-auth";
import Credentials from "next-auth/providers/credentials";
import GoogleProvider from "next-auth/providers/google";
import { SupabaseAdapter } from "@auth/supabase-adapter";
import { createClient } from "@/lib/supabase/server";

export const authOptions: NextAuthOptions = {
  adapter: SupabaseAdapter({
    url: process.env.NEXT_PUBLIC_SUPABASE_URL!,
    secret: process.env.SUPABASE_SERVICE_ROLE_KEY!,
  }),
  providers: [
    CredentialsProvider({
      async authorize(credentials) {
        const supabase = createClient();
        const { data, error } = await supabase.auth.signInWithPassword({
          email: credentials?.email || "",
          password: credentials?.password || "",
        });
        if (error || !data.user) return null;
        const { data: userData } = await supabase
          .from("users")
          .select("id, email, roles, has_completed_onboarding, profiles(role)")
          .eq("id", data.user.id)
          .single();
        return {
          id: userData.id,
          email: userData.email,
          roles: userData.roles,
          profile_role: userData.profiles.role,
          has_completed_onboarding: userData.has_completed_onboarding ?? false,
        };
      },
    }),
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
  ],
  callbacks: {
    async session({ session, user }) {
      const supabase = createClient();
      const { data: factors } = await supabase.auth.mfa.listFactors({
        userId: user.id,
      });
      session.user.mfa_enabled = factors?.totp.length > 0;
      session.user.roles = user.roles;
      session.user.profile_role = user.profile_role;
      return session;
    },
    async redirect({ baseUrl, user }) {
      if (!user.has_completed_onboarding) {
        return user.profile_role === "tradie"
          ? `${baseUrl}/tradie/onboarding`
          : `${baseUrl}/client/onboarding`;
      }
      return user.roles.includes("admin")
        ? `${baseUrl}/admin/dashboard`
        : user.roles.includes("marketing")
        ? `${baseUrl}/marketing/dashboard`
        : user.roles.includes("finance")
        ? `${baseUrl}/finance/dashboard`
        : user.roles.includes("support")
        ? `${baseUrl}/support-group/dashboard`
        : user.profile_role === "tradie"
        ? `${baseUrl}/tradie/dashboard`
        : `${baseUrl}/client/dashboard`;
    },
  },
};


--- ./src/lib/supabase.ts ---

import { createClient } from "@supabase/supabase-js";
import { Database } from "./types";

export const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);


--- ./src/lib/types.ts ---

export interface Tradie {
  id: string;
  name: string;
  trade: string;
  location: string;
  bio: string;
  user_id?: string; // Optional, added for auth
}

export interface User {
  id: string;
  email: string;
  role: "client" | "tradie";
}

export type UserRole =
  | "admin"
  | "marketing"
  | "finance"
  | "support"
  | "employee";
export type ProfileRole = "client" | "tradie";

export interface Database {
  public: {
    Tables: {
      users: {
        Row: {
          id: string;
          email: string | null;
          roles: UserRole[];
          completed_jobs: number;
          average_rating: number;
          top_tradie: boolean;
          referral_credits: number;
          region: string | null;
          first_job_free: boolean;
          has_completed_onboarding: boolean;
          stripe_customer_id: string | null;
          payment_method_id: string | null;
          stripe_account_id: string | null;
          license_path: string | null;
          trade: string | null;
          location: string | null;
          bio: string | null;
        };
        Insert: {
          id: string;
          email?: string | null;
          roles?: UserRole[];
          completed_jobs?: number;
          average_rating?: number;
          top_tradie?: boolean;
          referral_credits?: number;
          region?: string | null;
          first_job_free?: boolean;
          has_completed_onboarding?: boolean;
          stripe_customer_id?: string | null;
          payment_method_id?: string | null;
          stripe_account_id?: string | null;
          license_path?: string | null;
          trade?: string | null;
          location?: string | null;
          bio?: string | null;
        };
        Update: {
          id?: string;
          email?: string | null;
          roles?: UserRole[];
          completed_jobs?: number;
          average_rating?: number;
          top_tradie?: boolean;
          referral_credits?: number;
          region?: string | null;
          first_job_free?: boolean;
          has_completed_onboarding?: boolean;
          stripe_customer_id?: string | null;
          payment_method_id?: string | null;
          stripe_account_id?: string | null;
          license_path?: string | null;
          trade?: string | null;
          location?: string | null;
          bio?: string | null;
        };
      };
      profiles: {
        Row: {
          id: string;
          role: ProfileRole;
          created_at: string;
        };
        Insert: {
          id: string;
          role?: ProfileRole;
          created_at?: string;
        };
        Update: {
          id?: string;
          role?: ProfileRole;
          created_at?: string;
        };
      };
    };
    Functions: {
      assign_user_role: {
        Args: {
          user_id: string;
          new_roles: string[];
        };
        Returns: void;
      };
    };
  };
}

export interface Post {
  id: string;
  title: string;
  content: string;
  created_at: string;
  user_id: string;
  users: { name: string };
}

export interface Analytics {
  totalJobs: number;
  completionRate: number;
  newUsers: number;
}

export interface Dispute {
  id: string;
  title: string;
  jobs: { title: string };
  qbcc_dispute: boolean;
}

export interface Job {
  id: string;
  title: string;
  status: string;
  milestones: Milestone[];
  region: string;
}

export interface Milestone {
  id: string;
  title: string;
  status: string;
  amount: number;
  commission?: number;
}


--- ./src/lib/utils.ts ---

// ./src/lib/utils.ts
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

console.log("utils.ts loaded"); // Debug log
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}


--- ./src/app/community/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";
import { useAuth } from "@/context/AuthContext";
import { Post } from "@/types";

export default function Community() {
  const { user } = useAuth();
  const [posts, setPosts] = useState<Post[]>([]);
  const [newPost, setNewPost] = useState({ title: "", content: "" });

  const { data, error, isLoading } = useQuery({
    queryKey: ["community"],
    queryFn: async () => {
      const res = await fetch("/api/ForumPost");
      if (!res.ok) throw new Error("Failed to fetch posts");
      return res.json();
    },
  });

  useEffect(() => {
    if (data) setPosts(data);
    if (error) toast.error(error.message);
  }, [data, error]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const res = await fetch("/api/ForumPost", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ user_id: user?.id, ...newPost }),
    });
    if (res.ok) {
      toast.success("Post created!");
      const post = await res.json();
      setPosts([post, ...posts]);
      setNewPost({ title: "", content: "" });
    } else {
      toast.error("Failed to create post");
    }
  };

  if (isLoading) return <div className="text-center py-10">Loading...</div>;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Community Forum
      </h1>
      <form
        onSubmit={handleSubmit}
        className="space-y-4 p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg"
      >
        <input
          type="text"
          placeholder="Post Title"
          value={newPost.title}
          onChange={(e) => setNewPost({ ...newPost, title: e.target.value })}
          className="w-full rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
        />
        <textarea
          placeholder="Post Content"
          value={newPost.content}
          onChange={(e) => setNewPost({ ...newPost, content: e.target.value })}
          className="w-full rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
        />
        <button
          type="submit"
          className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700"
        >
          Create Post
        </button>
      </form>
      <div className="space-y-4">
        {posts.map((post) => (
          <div
            key={post.id}
            className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg"
          >
            <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">
              {post.title}
            </h2>
            <p className="text-gray-600 dark:text-gray-400 mt-2">
              {post.content}
            </p>
            <p className="text-sm text-gray-500 dark:text-gray-500 mt-1">
              Posted by {post.users.name} on{" "}
              {new Date(post.created_at).toLocaleString()}
            </p>
          </div>
        ))}
      </div>
    </div>
  );
}


--- ./src/app/admin/(admin)/assign-roles/route.ts ---

import { NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/server";
import { cookies } from "next/headers";

export async function POST(request: Request) {
  try {
    const { user_id, new_roles } = await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { error } = await supabase.rpc("assign_user_role", {
      user_id: user_id,
      new_roles: new_roles,
    });

    if (error) throw new Error(error.message);

    return NextResponse.json({ message: "Roles assigned successfully" });
  } catch (error: any) {
    console.error("Role assignment error:", error);
    return NextResponse.json(
      { error: error.message || "Internal server error" },
      { status: 500 }
    );
  }
}


--- ./src/app/admin/(admin)/assign-roles/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui";
import { toast } from "react-hot-toast";
import { useRouter } from "next/navigation";
import { supabase } from "@/lib/supabase/client";
import { loadStripe } from "@stripe/stripe-js";
import {
  Elements,
  CardElement,
  useStripe,
  useElements,
} from "@stripe/stripe-js";
import Link from "next/link";

const stripePromise = loadStripe(
  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!
);

function PaymentForm({ onSuccess }: { onSuccess: () => void }) {
  const stripe = useStripe();
  const elements = useElements();
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    const {
      data: { user },
    } = await supabase.auth.getUser();
    const res = await fetch("/api/payments/setup", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ user_id: user!.id }),
    });
    const { clientSecret } = await res.json();
    const { error, setupIntent } = await stripe!.confirmCardSetup(
      clientSecret,
      {
        payment_method: { card: elements!.getElement(CardElement)! },
      }
    );
    if (error) {
      toast.error(error.message!);
    } else {
      await supabase
        .from("users")
        .update({ payment_method_id: setupIntent!.payment_method })
        .eq("id", user!.id);
      toast.success("Payment method added!");
      onSuccess();
    }
    setLoading(false);
  };

  return (
    <form onSubmit={handleSubmit}>
      <CardElement />
      <Button type="submit" disabled={loading} className="mt-2 w-full">
        {loading ? "Processing..." : "Add Payment Method"}
      </Button>
    </form>
  );
}

export default function Onboarding() {
  const [step, setStep] = useState(1);
  const [form, setForm] = useState({
    name: "",
    email: "",
    region: "",
    trade: "",
    bio: "",
    paymentMethod: "",
  });
  const router = useRouter();

  useEffect(() => {
    const fetchUser = async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      const { data } = await supabase
        .from("users")
        .select("email, region, trade, bio")
        .eq("id", user!.id)
        .single();
      setForm((prev) => ({
        ...prev,
        email: data?.email || user?.email || "",
        region: data?.region || "",
        trade: data?.trade || "",
        bio: data?.bio || "",
      }));
    };
    fetchUser();
  }, []);

  const handleNext = async () => {
    if (step < 4) setStep(step + 1);
    else {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      const { error: profileError } = await supabase
        .from("profiles")
        .update({ role: 'tradie' })
        .eq("id", user!.id);
      const { error: userError } = await supabase
        .from("users")
        .update({
          name: form.name,
          region: form.region,
          trade: form.trade,
          bio: form.bio,
          has_completed_onboarding: true,
          roles: ['employee'],
        })
        .eq("id", user!.id);
      if (profileError || userError) {
        toast.error("Failed to save profile");
      } else {
        await supabase.from("badges").insert([
          {
            user_id: user!.id,
            badge: "Welcome Aboard",
            earned_at: new Date().toISOString(),
          },
        ]);
        await supabase.from("notifications").insert({
          user_id: user!.id,
          message: "You earned the 'Welcome Aboard' badge!",
        });
        toast.success("Onboarding completed!");
        router.push("/tradie/dashboard");
      }
    }
  };

  return (
    <div className="max-w-md mx-auto p-6 space-y-6">
      <h1 className="text-3xl font-bold">Welcome to TradeMatey</h1>
      {step === 1 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 1: Watch Intro</h2>
          <video src="/intro.mp4" controls className="w-full rounded" />
          <p>
            Secure milestone payments with 3.33% commission and QBCC-compliant
            14+14 day timelines.
          </p>
        </div>
      )}
      {step === 2 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 2: Personal Info</h2>
          <input
            type="text"
            placeholder="Name"
            value={form.name}
            onChange={(e) => setForm({ ...form, name: e.target.value })}
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
            required
          />
          <input
            type="email"
            placeholder="Email"
            value={form.email}
            disabled
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
          />
          <select
            value={form.region}
            onChange={(e) => setForm({ ...form, region: e.target.value })}
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
            required
          >
            <option value="">Select Region</option>
            <option value="Regional">Regional Queensland</option>
            <option value="Metro">Metro Queensland</option>
          </select>
          <input
            type="text"
            placeholder="Trade (e.g., Plumber)"
            value={form.trade}
            onChange={(e) => setForm({ ...form, trade: e.target.value })}
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
            required
          />
          <textarea
            placeholder="Bio"
            value={form.bio}
            onChange={(e) => setForm({ ...form, bio: e.target.value })}
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
          />
        </div>
      )}
      {step === 3 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 3: Payment Method</h2>
          <Elements stripe={stripePromise}>
            <PaymentForm
              onSuccess={() =>
                setForm({ ...form, interim payment_method: 'Card Added' })
              } />
          </Elements>
          <p className="text-sm text-gray-600">
            3.33% commission per milestone (
            {form.region === "Regional" ? "capped at A$25" : "no cap"}).
          </p>
        </div>
      )}
      {step === 4 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 4: Confirmation</h2>
          <p>Name: {form.name}</p>
          <p>Email: {form.email}</p>
          <p>Region: {form.region}</p>
          <p>Trade: {form.trade}</p>
          <p>Bio: {form.bio}</p>
          <p>Payment Method: {form.paymentMethod}</p>
          <div className="mt-4 p-4 bg-blue-100 rounded">
            <p className="font-bold">Go Premium for A$99/year!</p>
            <p>Enjoy 1.67% commission and priority job matching.</p>
            <Link href="/premium">
              <Button>Learn More</Button>
            </Link>
          </div>
        </div>
      )}
      <Button onClick={handleNext} className="w-full">
        {step === 4 ? "Finish" : "Next"}
      </Button>
    </div>
  );
}

--- ./src/app/admin/(admin)/dashboard/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";
import { Analytics } from "@/types";

export default function AdminDashboard() {
  const [analytics, setAnalytics] = useState<Analytics | null>(null);

  const { data, error, isLoading } = useQuery<Analytics | null>({
    queryKey: ["analytics"],
    queryFn: async () => {
      const res = await fetch("/api/analytics");
      if (!res.ok) throw new Error("Failed to fetch analytics");
      return res.json();
    },
  });

  useEffect(() => {
    if (data) setAnalytics(data);
    if (error) toast.error(error.message);
  }, [data, error]);

  if (isLoading) return <div className="text-center py-10">Loading...</div>;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Admin Dashboard
      </h1>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
          <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">
            Total Jobs
          </h2>
          <p className="text-3xl font-bold text-gray-900 dark:text-gray-100 mt-2">
            {analytics.totalJobs}
          </p>
        </div>
        <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
          <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">
            Completion Rate
          </h2>
          <p className="text-3xl font-bold text-gray-900 dark:text-gray-100 mt-2">
            {analytics.completionRate}%
          </p>
        </div>
        <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
          <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">
            New Users (30d)
          </h2>
          <p className="text-3xl font-bold text-gray-900 dark:text-gray-100 mt-2">
            {analytics.newUsers}
          </p>
        </div>
      </div>
    </div>
  );
}


--- ./src/app/admin/(admin)/page.tsx ---

"use client";

import Link from "next/link";

export default function AdminHome() {
  return (
    <div className="text-center space-y-6 py-12">
      <h1 className="text-5xl font-bold text-gray-900 dark:text-gray-100">
        Welcome to TradeMatey - Admin Portal
      </h1>
      <p className="text-lg text-gray-600 dark:text-gray-400">
        Manage users, disputes, and platform settings.
      </p>
      <div className="space-x-4">
        <Link href="/admin/dashboard">
          <button className="px-6 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
            Go to Dashboard
          </button>
        </Link>
      </div>
    </div>
  );
}


--- ./src/app/support/route.ts ---

import { NextResponse } from "next/server";

export async function POST(request: Request) {
  try {
    const { message } = await request.json();
    // Placeholder response
    const reply = `You asked: "${message}". How can I assist you further?`;
    // Optional: Integrate with xAI Grok API
    /*
    const grokResponse = await fetch("https://api.x.ai/v1/grok", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${process.env.GROK_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ prompt: message }),
    });
    const { reply } = await grokResponse.json();
    */
    return NextResponse.json({ reply });
  } catch (error: any) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}


--- ./src/app/support/page.tsx ---

"use client";

import { useState } from "react";
import { toast } from "react-hot-toast";

export default function Support() {
  const [form, setForm] = useState({ name: "", email: "", message: "" });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    // Placeholder for support ticket submission
    toast.success("Support request sent!");
    setForm({ name: "", email: "", message: "" });
  };

  return (
    <div className="max-w-md mx-auto p-6 space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Support
      </h1>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Name
          </label>
          <input
            type="text"
            value={form.name}
            onChange={(e) => setForm({ ...form, name: e.target.value })}
            className="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
            required
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Email
          </label>
          <input
            type="email"
            value={form.email}
            onChange={(e) => setForm({ ...form, email: e.target.value })}
            className="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
            required
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Message
          </label>
          <textarea
            value={form.message}
            onChange={(e) => setForm({ ...form, message: e.target.value })}
            className="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
            required
          />
        </div>
        <button
          type="submit"
          className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 w-full"
        >
          Submit
        </button>
      </form>
    </div>
  );
}


--- ./src/app/support-group/(support)/dashboard/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";
import { Dispute } from "@/types";

export default function SupportDashboard() {
  const [disputes, setDisputes] = useState<Dispute[]>([]);

  const { data, error, isLoading } = useQuery<Dispute[]>({
    queryKey: ["disputes"],
    queryFn: async () => {
      const res = await fetch("/api/disputes");
      if (!res.ok) throw new Error("Failed to fetch disputes");
      return res.json();
    },
  });

  useEffect(() => {
    if (data) setDisputes(data);
    if (error) toast.error(error.message);
  }, [data, error]);

  const escalateToQBCC = async (disputeId) => {
    const res = await fetch("/api/disputes/escalate", {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ dispute_id: disputeId }),
    });
    if (res.ok) toast.success("Escalated to QBCC!");
    else toast.error("Failed to escalate");
  };

  if (isLoading) return <div className="text-center py-10">Loading...</div>;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Support Dashboard
      </h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {disputes.map((dispute) => (
          <div
            key={dispute.id}
            className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg"
          >
            <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">
              {dispute.title}
            </h2>
            <p className="text-gray-600 dark:text-gray-400 mt-2">
              Job: {dispute.jobs.title}
            </p>
            <p className="text-gray-600 dark:text-gray-400">
              Status:{" "}
              {dispute.qbcc_dispute ? "Escalated to QBCC" : "In Dispute"}
            </p>
          </div>
        ))}
      </div>
    </div>
  );
}


--- ./src/app/support-group/(support)/page.tsx ---

"use client";

import Link from "next/link";

export default function SupportHome() {
  return (
    <div className="text-center space-y-6 py-12">
      <h1 className="text-5xl font-bold text-gray-900 dark:text-gray-100">
        Welcome to TradeMatey - Support Portal
      </h1>
      <p className="text-lg text-gray-600 dark:text-gray-400">
        Assist users, manage tickets, and resolve issues.
      </p>
      <div className="space-x-4">
        <Link href="/support/dashboard">
          <button className="px-6 py-3 bg-teal-600 text-white rounded-md hover:bg-teal-700 transition-colors">
            Go to Dashboard
          </button>
        </Link>
      </div>
    </div>
  );
}


--- ./src/app/client/(client)/onboarding/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui";
import { toast } from "react-hot-toast";
import { useRouter } from "next/navigation";
import { supabase } from "@/lib/supabase/client";
import { loadStripe } from "@stripe/stripe-js";
import {
  Elements,
  CardElement,
  useStripe,
  useElements,
} from "@stripe/stripe-js";
import Link from "next/link";

const stripePromise = loadStripe(
  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!
);

function PaymentForm({ onSuccess }: { onSuccess: () => void }) {
  const stripe = useStripe();
  const elements = useElements();
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    const {
      data: { user },
    } = await supabase.auth.getUser();
    const res = await fetch("/api/payments/setup", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ user_id: user!.id }),
    });
    const { clientSecret } = await res.json();
    const { error, setupIntent } = await stripe!.confirmCardSetup(
      clientSecret,
      {
        payment_method: { card: elements!.getElement(CardElement)! },
      }
    );
    if (error) {
      toast.error(error.message!);
    } else {
      await supabase
        .from("users")
        .update({ payment_method_id: setupIntent!.payment_method })
        .eq("id", user!.id);
      toast.success("Payment method added!");
      onSuccess();
    }
    setLoading(false);
  };

  return (
    <form onSubmit={handleSubmit}>
      <CardElement />
      <Button type="submit" disabled={loading} className="mt-2 w-full">
        {loading ? "Processing..." : "Add Payment Method"}
      </Button>
    </form>
  );
}

export default function Onboarding() {
  const [step, setStep] = useState(1);
  const [form, setForm] = useState({
    name: "",
    email: "",
    region: "",
    paymentMethod: "",
  });
  const router = useRouter();

  useEffect(() => {
    const fetchUser = async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      const { data } = await supabase
        .from("users")
        .select("email, region")
        .eq("id", user!.id)
        .single();
      setForm((prev) => ({
        ...prev,
        email: data?.email || user?.email || "",
        region: data?.region || "",
      }));
    };
    fetchUser();
  }, []);

  const handleNext = async () => {
    if (step < 4) setStep(step + 1);
    else {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      const { error: profileError } = await supabase
        .from("profiles")
        .update({ role: "client" })
        .eq("id", user!.id);
      const { error: userError } = await supabase
        .from("users")
        .update({
          name: form.name,
          region: form.region,
          has_completed_onboarding: true,
          roles: ["employee"],
        })
        .eq("id", user!.id);
      if (profileError || userError) {
        toast.error("Failed to save profile");
      } else {
        await supabase.from("badges").insert([
          {
            user_id: user!.id,
            badge: "Welcome Aboard",
            earned_at: new Date().toISOString(),
          },
        ]);
        await supabase.from("notifications").insert({
          user_id: user!.id,
          message: "You earned the 'Welcome Aboard' badge!",
        });
        toast.success("Onboarding completed!");
        router.push("/client/dashboard");
      }
    }
  };

  return (
    <div className="max-w-md mx-auto p-6 space-y-6">
      <h1 className="text-3xl font-bold">Welcome to TradeMatey</h1>
      {step === 1 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 1: Watch Intro</h2>
          <video src="/intro.mp4" controls className="w-full rounded" />
          <p>
            Secure milestone payments with 3.33% commission and QBCC-compliant
            14+14 day timelines.
          </p>
        </div>
      )}
      {step === 2 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 2: Personal Info</h2>
          <input
            type="text"
            placeholder="Name"
            value={form.name}
            onChange={(e) => setForm({ ...form, name: e.target.value })}
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
            required
          />
          <input
            type="email"
            placeholder="Email"
            value={form.email}
            disabled
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
          />
          <select
            value={form.region}
            onChange={(e) => setForm({ ...form, region: e.target.value })}
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
            required
          >
            <option value="">Select Region</option>
            <option value="Regional">Regional Queensland</option>
            <option value="Metro">Metro Queensland</option>
          </select>
        </div>
      )}
      {step === 3 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 3: Payment Method</h2>
          <Elements stripe={stripePromise}>
            <PaymentForm
              onSuccess={() =>
                setForm({ ...form, paymentMethod: "Card Added" })
              }
            />
          </Elements>
          <p className="text-sm text-gray-600">
            3.33% commission per milestone (
            {form.region === "Regional" ? "capped at A$25" : "no cap"}).
          </p>
        </div>
      )}
      {step === 4 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 4: Confirmation</h2>
          <p>Name: {form.name}</p>
          <p>Email: {form.email}</p>
          <p>Region: {form.region}</p>
          <p>Payment Method: {form.paymentMethod}</p>
          <div className="mt-4 p-4 bg-blue-100 rounded">
            <p className="font-bold">Go Premium for A$99/year!</p>
            <p>Enjoy 1.67% commission and priority job matching.</p>
            <Link href="/premium">
              <Button>Learn More</Button>
            </Link>
          </div>
        </div>
      )}
      <Button onClick={handleNext} className="w-full">
        {step === 4 ? "Finish" : "Next"}
      </Button>
    </div>
  );
}


--- ./src/app/client/(client)/auth/callback/route.ts ---

import { NextResponse } from "next/server";
import { supabase } from "@/lib/supabase/server";

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url);
  const code = searchParams.get("code");
  if (code) {
    await supabase.auth.exchangeCodeForSession(code);
  }
  return NextResponse.redirect(new URL("/client/dashboard", request.url));
}


--- ./src/app/client/(client)/login/page.tsx ---

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { motion } from "framer-motion";
import { FaEye, FaEyeSlash, FaGoogle, FaEnvelope } from "react-icons/fa";
import { supabase } from "@/lib/supabase/client";
import { toast } from "react-hot-toast";
import { Button } from "@/components/ui/button";

export default function ClientLoginPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [magicLinkSent, setMagicLinkSent] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [mfaRequired, setMfaRequired] = useState(false);
  const [mfaCode, setMfaCode] = useState("");
  const [factorId, setFactorId] = useState("");
  const router = useRouter();

  const handleEmailLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setLoading(true);
    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
      if (error) throw error;

      const { data: factors } = await supabase.auth.mfa.listFactors();
      if (factors?.totp?.length) {
        const id = factors.totp[0].id;
        setFactorId(id);
        setMfaRequired(true);

        const { error: mfaError } = await supabase.auth.mfa.challenge({
          factorId: id,
        });
        if (mfaError) throw mfaError;
      } else {
        toast.success("Login successful!");
      }
    } catch (err: any) {
      setError(err.message);
      toast.error(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleMfaVerify = async () => {
    try {
      const { error } = await supabase.auth.mfa.verify({
        factorId,
        code: mfaCode,
      });
      if (error) throw error;
      toast.success("MFA verified!");
      setMfaRequired(false);
    } catch (err: any) {
      setError(err.message);
      toast.error(err.message);
    }
  };

  const handleOAuthLogin = async () => {
    setLoading(true);
    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: "google",
        options: {
          redirectTo: `${window.location.origin}/auth/callback`,
        },
      });
      if (error) throw error;
    } catch (err: any) {
      setError(err.message);
      toast.error(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleMagicLink = async () => {
    setLoading(true);
    try {
      const { error } = await supabase.auth.signInWithOtp({
        email,
        options: {
          emailRedirectTo: `${window.location.origin}/auth/callback`,
        },
      });
      if (error) throw error;
      setMagicLinkSent(true);
      toast.success("Magic link sent! Check your email.");
    } catch (err: any) {
      setError(err.message);
      toast.error(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-100 to-blue-300 dark:from-gray-800 dark:to-blue-900 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="absolute inset-0 opacity-10">
        <svg className="w-full h-full" viewBox="0 0 1000 1000">
          <path
            d="M0 0H1000V1000H0V0ZM500 500C600 500 700 400 700 300C700 200 600 100 500 100C400 100 300 200 300 300C300 400 400 500 500 500Z"
            fill="url(#gradient)"
          />
          <defs>
            <linearGradient id="gradient" x1="0" y1="0" x2="1000" y2="1000">
              <stop offset="0%" stopColor="#2196F3" />
              <stop offset="100%" stopColor="#FF9800" />
            </linearGradient>
          </defs>
        </svg>
      </div>

      <motion.div
        className="relative bg-white dark:bg-gray-800 p-8 rounded-lg shadow-lg w-full max-w-md"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
      >
        <h2 className="text-3xl font-bold text-center">Client Login</h2>
        <p className="text-sm text-gray-600 dark:text-gray-400 mt-4 text-center">
          Sign in to post jobs with secure milestone payments (3.33% commission,
          A$25 cap in regional Queensland).
        </p>

        {magicLinkSent ? (
          <div className="text-center space-y-4 mt-6">
            <FaEnvelope className="text-blue-600 mx-auto" size={40} />
            <p>
              Check <span className="font-bold">{email}</span> for your magic
              link.
            </p>
            <button
              onClick={() => setMagicLinkSent(false)}
              className="text-blue-600 hover:underline"
            >
              Try Another Method
            </button>
          </div>
        ) : (
          <>
            {error && <p className="text-red-500 text-center">{error}</p>}

            <form onSubmit={handleEmailLogin} className="space-y-4 mt-6">
              <div>
                <label className="block text-sm font-medium">Email</label>
                <input
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="w-full p-2 border rounded"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium">Password</label>
                <div className="relative">
                  <input
                    type={showPassword ? "text" : "password"}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="w-full p-2 border rounded"
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-2 top-2"
                  >
                    {showPassword ? <FaEyeSlash /> : <FaEye />}
                  </button>
                </div>
              </div>

              {mfaRequired && (
                <div>
                  <input
                    type="text"
                    value={mfaCode}
                    onChange={(e) => setMfaCode(e.target.value)}
                    placeholder="Enter 6-digit MFA code"
                    className="w-full p-2 border rounded"
                  />
                  <Button onClick={handleMfaVerify} className="w-full mt-2">
                    Verify MFA
                  </Button>
                </div>
              )}

              <Button type="submit" disabled={loading} className="w-full">
                {loading ? "Signing In..." : "Sign In with Email"}
              </Button>
            </form>

            <div className="my-4 text-center">Or</div>

            <div className="space-y-2">
              <Button
                onClick={handleOAuthLogin}
                disabled={loading}
                variant="outline"
                className="w-full flex items-center justify-center"
              >
                <FaGoogle className="mr-2" /> Google
              </Button>
              <Button
                onClick={handleMagicLink}
                disabled={loading || !email}
                variant="outline"
                className="w-full flex items-center justify-center"
              >
                <FaEnvelope className="mr-2" /> Magic Link
              </Button>
            </div>

            <div className="mt-4 text-center space-y-2">
              <p>
                No account?{" "}
                <Link href="/client/register" className="text-blue-600">
                  Register
                </Link>
              </p>
              <p>
                Forgot password?
                <Link href="/client/reset-password" className="text-blue-600">
                  Reset
                </Link>
              </p>
            </div>
          </>
        )}
      </motion.div>
    </div>
  );
}


--- ./src/app/client/(client)/dashboard/page.tsx ---

"use client";

import { useState, useEffect, useRef } from "react"; // Add useRef
import { Card, Button } from "@/components/ui";
import { supabase } from "@/lib/supabase/client";
import { toast } from "react-hot-toast";
import Chart from "chart.js/auto";

export default function Dashboard() {
  const [jobs, setJobs] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const chartRef = useRef<HTMLCanvasElement>(null);
  const chartInstanceRef = useRef<Chart | null>(null);
  const [commissions, setCommissions] = useState([]);
  useEffect(() => {
    const fetchCommissions = async () => {
      const res = await fetch("/api/commissions");
      if (res.ok) setCommissions(await res.json());
      else toast.error("Failed to fetch commissions");
    };
    fetchCommissions();
  }, []);

  const fetchJobs = async () => {
    const {
      data: { user },
    } = await supabase.auth.getUser();
    const { data, error } = await supabase
      .from("jobs")
      .select("*, milestones(*), region")
      .eq("client_id", user!.id);
    if (error) throw error;
    setJobs(data || []);
  };

  useEffect(() => {
    const channel = supabase
      .channel("bookings")
      .on(
        "postgres_changes",
        { event: "*", schema: "public", table: "bookings" },
        () => fetchJobs()
      )
      .subscribe();
    return () => supabase.removeChannel(channel);
  }, []);

  useEffect(() => {
    const channel = supabase
      .channel("milestones")
      .on(
        "postgres_changes",
        { event: "UPDATE", schema: "public", table: "milestones" },
        () => fetchJobs()
      )
      .subscribe();
    return () => supabase.removeChannel(channel);
  }, []);

  useEffect(() => {
    fetchJobs()
      .catch((e) => toast.error(e.message))
      .finally(() => setLoading(false));
  }, []);

  useEffect(() => {
    if (chartRef.current && jobs.length) {
      const completed = jobs.filter((job) => job.status === "completed").length;
      const inProgress = jobs.filter(
        (job) => job.status === "in_progress"
      ).length;
      const pending = jobs.filter((job) => job.status === "pending").length;

      if (chartInstanceRef.current) {
        chartInstanceRef.current.destroy();
      }

      chartInstanceRef.current = new Chart(chartRef.current, {
        type: "bar",
        data: {
          labels: ["Completed", "In Progress", "Pending"],
          datasets: [
            {
              label: "Job Status",
              data: [completed, inProgress, pending],
              backgroundColor: ["#2563EB", "#FBBF24", "#EF4444"],
              borderColor: ["#1E40AF", "#D97706", "#B91C1C"],
              borderWidth: 1,
            },
          ],
        },
        options: {
          scales: {
            y: {
              beginAtZero: true,
              title: { display: true, text: "Number of Jobs" },
            },
            x: { title: { display: true, text: "Status" } },
          },
          plugins: {
            legend: { display: true, position: "top" },
            title: { display: true, text: "Job Completion Rate" },
          },
        },
      });
    }
    return () => {
      if (chartInstanceRef.current) {
        chartInstanceRef.current.destroy();
      }
    };
  }, [jobs]);

  const verifyMilestone = async (milestoneId: string) => {
    const res = await fetch("/api/payments", {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ milestone_id: milestoneId, action: "verify" }),
    });
    if (res.ok) {
      toast.success("Milestone verified!");
      fetchJobs();
    } else {
      toast.error("Failed to verify milestone");
    }
  };

  const disputeMilestone = async (milestoneId: string) => {
    const res = await fetch("/api/disputes", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ milestone_id: milestoneId }),
    });
    if (res.ok) {
      toast.success("Dispute initiated!");
      fetchJobs();
    } else {
      toast.error("Failed to initiate dispute");
    }
  };

  const payMilestone = async (milestoneId: string) => {
    const { data: milestone } = await supabase
      .from("milestones")
      .select("amount")
      .eq("id", milestoneId)
      .single();
    const res = await fetch("/api/payments", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        milestone_id: milestoneId,
        amount: milestone!.amount,
      }),
    });
    if (res.ok) {
      toast.success("Payment processed!");
      fetchJobs();
    } else {
      toast.error("Payment failed");
    }
  };

  return (
    <div className="container mx-auto p-4">
      {loading ? (
        <p>Loading...</p>
      ) : (
        <>
          <h1 className="text-2xl font-bold">Client Dashboard</h1>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
            {jobs.map((job) => (
              <Card key={job.id} className="p-4">
                <h2 className="text-xl">{job.title}</h2>
                <p>Status: {job.status}</p>
                <h3 className="text-lg mt-2">Milestones:</h3>
                <ul>
                  {job.milestones.map((milestone: any) => (
                    <li key={milestone.id} className="mt-1">
                      {milestone.title}: {milestone.status} (Amount: A$
                      {milestone.amount.toFixed(2)}, Commission: A$
                      {(milestone.commission || 0).toFixed(2)})
                      {milestone.status === "completed" && (
                        <>
                          <Button onClick={() => verifyMilestone(milestone.id)}>
                            Verify
                          </Button>
                          <Button
                            variant="outline"
                            onClick={() => disputeMilestone(milestone.id)}
                          >
                            Dispute
                          </Button>
                        </>
                      )}
                      {milestone.status === "verified" && (
                        <Button onClick={() => payMilestone(milestone.id)}>
                          Pay A$
                          {(
                            milestone.amount + (milestone.commission || 0)
                          ).toFixed(2)}
                        </Button>
                      )}
                    </li>
                  ))}
                </ul>
              </Card>
            ))}

            <Card className="p-4 mt-4">
              <h2 className="text-xl font-bold">Commissions</h2>
              <ul>
                {commissions.map((c) => (
                  <li key={c.id}>
                    A${c.amount.toFixed(2)} ({c.source_type} {c.source_id}) -{" "}
                    {new Date(c.created_at).toLocaleDateString()}
                  </li>
                ))}
              </ul>
            </Card>
          </div>
          <Card className="p-4 mt-4">
            <h2 className="text-xl font-bold">Job Completion Rate</h2>
            <canvas ref={chartRef} />
          </Card>
        </>
      )}
    </div>
  );
}


--- ./src/app/client/(client)/post-job/page.tsx ---

"use client";

import { useState, useEffect } from "react"; // Add useEffect
import { Button } from "@/components/ui";
import { useRouter } from "next/navigation";
import { toast } from "react-hot-toast";
import { supabase } from "@/lib/supabase/client";

export default function PostJob() {
  const [job, setJob] = useState({ title: "", description: "", budget: "" });
  const [milestones, setMilestones] = useState([
    { title: "", description: "", percentage: "", due_date: "" },
  ]);
  const [region, setRegion] = useState("");
  const router = useRouter();

  useEffect(() => {
    const fetchUser = async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      const { data } = await supabase
        .from("users")
        .select("region")
        .eq("id", user!.id)
        .single();
      setRegion(data?.region || "");
    };
    fetchUser();
  }, []);

  const calculateCommission = () => {
    const budget = Number(job.budget);
    let commission = budget * 0.0333;
    if (region === "Regional") commission = Math.min(commission, 25);
    return commission.toFixed(2);
  };

  const addMilestone = () => {
    setMilestones([
      ...milestones,
      { title: "", description: "", percentage: "", due_date: "" },
    ]);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const totalPercentage = milestones.reduce(
      (sum, m) => sum + Number(m.percentage),
      0
    );
    if (totalPercentage !== 100) {
      toast.error("Milestone percentages must sum to 100%");
      return;
    }

    const {
      data: { user },
    } = await supabase.auth.getUser();
    const res = await fetch("/api/jobs", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        title: job.title,
        description: job.description,
        budget: Number(job.budget),
        client_id: user!.id,
        payment_type: "milestone",
        milestones,
      }),
    });

    if (res.ok) {
      toast.success("Job posted!");
      router.push("/client/dashboard");
    } else {
      toast.error("Failed to post job");
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold">Post a Job</h1>
      <form onSubmit={handleSubmit} className="space-y-4 mt-4">
        <div>
          <label className="block">Job Title</label>
          <input
            type="text"
            value={job.title}
            onChange={(e) => setJob({ ...job, title: e.target.value })}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <div>
          <label className="block">Description</label>
          <textarea
            value={job.description}
            onChange={(e) => setJob({ ...job, description: e.target.value })}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <div>
          <label className="block">Budget (A$)</label>
          <input
            type="number"
            value={job.budget}
            onChange={(e) => setJob({ ...job, budget: e.target.value })}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <h2 className="text-xl font-semibold">Milestones</h2>
        {milestones.map((milestone, index) => (
          <div key={index} className="space-y-2 border p-4 rounded">
            <div>
              <label className="block">Milestone Title</label>
              <input
                type="text"
                value={milestone.title}
                onChange={(e) => {
                  const newMilestones = [...milestones];
                  newMilestones[index].title = e.target.value;
                  setMilestones(newMilestones);
                }}
                className="w-full p-2 border rounded"
                required
              />
            </div>
            <div>
              <label className="block">Description</label>
              <textarea
                value={milestone.description}
                onChange={(e) => {
                  const newMilestones = [...milestones];
                  newMilestones[index].description = e.target.value;
                  setMilestones(newMilestones);
                }}
                className="w-full p-2 border rounded"
              />
            </div>
            <div>
              <label className="block">Percentage (%)</label>
              <input
                type="number"
                value={milestone.percentage}
                onChange={(e) => {
                  const newMilestones = [...milestones];
                  newMilestones[index].percentage = e.target.value;
                  setMilestones(newMilestones);
                }}
                className="w-full p-2 border rounded"
                required
              />
            </div>
            <div>
              <label className="block">Due Date</label>
              <input
                type="date"
                value={milestone.due_date}
                onChange={(e) => {
                  const newMilestones = [...milestones];
                  newMilestones[index].due_date = e.target.value;
                  setMilestones(newMilestones);
                }}
                className="w-full p-2 border rounded"
                required
              />
            </div>
          </div>
        ))}
        <p className="text-sm">
          Estimated commission: A${calculateCommission()} (
          {region === "Regional" ? "capped at A$25" : "3.33%"})
        </p>
        <Button type="button" onClick={addMilestone} variant="outline">
          Add Milestone
        </Button>
        <Button type="submit">Post Job</Button>
      </form>
    </div>
  );
}


--- ./src/app/client/(client)/referrals/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useAuth } from "@/context/AuthContext";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";

export default function ClientReferrals() {
  const { user } = useAuth();
  const [referralLink, setReferralLink] = useState("");
  const [credits, setCredits] = useState(0);

  const { data, error, isLoading } = useQuery({
    queryKey: ["clientReferrals", user?.id],
    queryFn: async () => {
      const res = await fetch(`/api/referrals?user_id=${user?.id}`);
      if (!res.ok) throw new Error("Failed to fetch referral data");
      return res.json();
    },
  });

  useEffect(() => {
    if (data) {
      setCredits(data.credits || 0);
      setReferralLink(
        `${window.location.origin}/client/signup?ref=${user?.id}`
      );
    }
    if (error) toast.error(error.message);
  }, [data, error, user?.id]);

  const handleInvite = async (referredUserId: string) => {
    const res = await fetch("/api/referrals", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        referrer_id: user?.id,
        referred_user_id,
        role: "client",
      }),
    });
    if (res.ok) {
      toast.success("Referral credit applied! ($10 credit)");
      setCredits(credits + 10);
    } else {
      toast.error("Referral failed");
    }
  };

  if (isLoading) return <div className="text-center py-10">Loading...</div>;

  return (
    <div className="space-y-6 max-w-md mx-auto p-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Client Referrals
      </h1>
      <p className="text-gray-600 dark:text-gray-400">
        Invite friends and earn $10 credit per successful referral!
      </p>
      <p className="text-gray-800 dark:text-gray-200 font-semibold">
        Your Credits: ${credits}
      </p>
      <div className="space-y-4">
        <input
          type="text"
          value={referralLink}
          readOnly
          className="w-full rounded-md border-gray-300 dark:border-gray-600 bg-gray-100 dark:bg-gray-800 p-2"
        />
        <button
          onClick={() => navigator.clipboard.writeText(referralLink)}
          className="w-full px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors"
        >
          Copy Referral Link
        </button>
        <div>
          <input
            type="text"
            placeholder="Enter referred client ID"
            onChange={(e) => handleInvite(e.target.value)}
            className="w-full rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white p-2"
          />
        </div>
      </div>
    </div>
  );
}


--- ./src/app/client/(client)/disputes/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { Card, Button } from "@/components/ui";
import { useAuth } from "@/context/AuthContext";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";

export default function Disputes() {
  const { user } = useAuth();
  const [disputes, setDisputes] = useState<any[]>([]);

  const { data, error, isLoading } = useQuery({
    queryKey: ["disputes", user?.id],
    queryFn: async () => {
      const res = await fetch(`/api/disputes?user_id=${user?.id}`);
      if (!res.ok) throw new Error("Failed to fetch disputes");
      return res.json();
    },
  });

  useEffect(() => {
    if (data) setDisputes(data);
    if (error) toast.error(error.message);
  }, [data, error]);

  if (isLoading) return <div className="text-center py-10">Loading...</div>;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Disputes
      </h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {disputes.map((dispute) => (
          <Card key={dispute.id} className="p-6 shadow-lg">
            <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">
              {dispute.title}
            </h2>
            <p className="text-gray-600 dark:text-gray-400 mt-2">
              Job: {dispute.jobs.title}
            </p>
            <p className="text-gray-600 dark:text-gray-400">
              Tradie: {dispute.users.name}
            </p>
            <p className="text-gray-600 dark:text-gray-400">
              Status:{" "}
              {dispute.qbcc_dispute ? "Escalated to QBCC" : "In Dispute"}
            </p>
            {!dispute.qbcc_dispute &&
              new Date() > new Date(dispute.funds_acquired_date) && (
                <Button
                  onClick={async () => {
                    const res = await fetch("/api/disputes", {
                      method: "POST",
                      headers: { "Content-Type": "application/json" },
                      body: JSON.stringify({
                        milestone_id: dispute.id,
                        action: "escalate",
                      }),
                    });
                    if (res.ok) toast.success("Escalated to QBCC!");
                    else toast.error("Escalation failed");
                  }}
                  variant="destructive"
                  className="mt-4 w-full"
                >
                  Escalate to QBCC
                </Button>
              )}
          </Card>
        ))}
      </div>
    </div>
  );
}


--- ./src/app/client/(client)/browse-tradies/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { TradieCard } from "@/components/TradieCard";
import { toast } from "react-hot-toast";

export default function BrowseTradies() {
  const [tradeFilter, setTradeFilter] = useState("");
  const [tradies, setTradies] = useState<any[]>([]);

  const { data, error, isLoading } = useQuery({
    queryKey: ["tradies", tradeFilter],
    queryFn: async () => {
      const res = await fetch(
        `/api/tradies${tradeFilter ? `?trade=${tradeFilter}` : ""}`
      );
      if (!res.ok) throw new Error("Failed to fetch tradies");
      return res.json();
    },
  });

  useEffect(() => {
    if (data) setTradies(data);
    if (error) toast.error(error.message);
  }, [data, error]);

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Browse Tradies
      </h1>
      <div className="flex space-x-4">
        <select
          value={tradeFilter}
          onChange={(e) => setTradeFilter(e.target.value)}
          className="px-4 py-2 rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
        >
          <option value="">All Trades</option>
          <option value="carpentry">Carpentry</option>
          <option value="plumbing">Plumbing</option>
          <option value="electrical">Electrical</option>
        </select>
      </div>
      {isLoading ? (
        <div className="text-center py-10">Loading...</div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {tradies.map((tradie) => (
            <TradieCard
              key={tradie.id}
              tradie={tradie}
              className="p-6 shadow-lg hover:shadow-xl transition-shadow duration-300"
            />
          ))}
        </div>
      )}
    </div>
  );
}


--- ./src/app/client/(client)/messages/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useAuth } from "@/context/AuthContext";
import { useQuery, useMutation } from "@tanstack/react-query";
import { toast } from "react-hot-toast";

export default function ClientMessages() {
  const { user } = useAuth();
  const [messages, setMessages] = useState<any[]>([]);
  const [newMessage, setNewMessage] = useState("");
  const [selectedJobId, setSelectedJobId] = useState("");

  const { data, error, isLoading } = useQuery({
    queryKey: ["clientMessages", user?.id],
    queryFn: async () => {
      const res = await fetch(`/api/messages?user_id=${user?.id}`);
      if (!res.ok) throw new Error("Failed to fetch messages");
      return res.json();
    },
  });

  const mutation = useMutation({
    mutationFn: async ({
      receiverId,
      jobId,
    }: {
      receiverId: string;
      jobId: string;
    }) => {
      const res = await fetch("/api/messages", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          sender_id: user?.id,
          receiver_id: receiverId,
          content: newMessage,
          job_id: jobId,
        }),
      });
      if (!res.ok) throw new Error("Failed to send message");
      return res.json();
    },
    onSuccess: (newMsg) => {
      setMessages([...messages, newMsg]);
      setNewMessage("");
      toast.success("Message sent!");
    },
    onError: (err: any) => toast.error(err.message),
  });

  useEffect(() => {
    if (data) setMessages(data);
    if (error) toast.error(error.message);
  }, [data, error]);

  if (isLoading) return <div className="text-center py-10">Loading...</div>;

  const lastMsg = messages.length > 0 ? messages[messages.length - 1] : null;
  const receiverId =
    lastMsg?.sender_id !== user?.id ? lastMsg?.sender_id : lastMsg?.receiver_id;

  return (
    <div className="space-y-6 max-w-2xl mx-auto p-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Messages
      </h1>
      <div className="space-y-4 max-h-96 overflow-y-auto">
        {messages.map((msg) => (
          <div
            key={msg.id}
            className={`p-4 rounded-lg max-w-lg ${
              msg.sender_id === user?.id
                ? "bg-indigo-100 dark:bg-indigo-900 ml-auto"
                : "bg-gray-100 dark:bg-gray-800 mr-auto"
            }`}
          >
            <p className="text-sm text-gray-600 dark:text-gray-400">
              {msg.sender_id === user?.id ? "You" : msg.sender.name} to{" "}
              {msg.sender_id === user?.id ? msg.receiver.name : "You"}
            </p>
            <p className="text-gray-900 dark:text-gray-100">{msg.content}</p>
            <p className="text-xs text-gray-500 dark:text-gray-500 mt-1">
              {new Date(msg.created_at).toLocaleString()}
            </p>
          </div>
        ))}
      </div>
      <div className="flex space-x-2">
        <select
          value={selectedJobId}
          onChange={(e) => setSelectedJobId(e.target.value)}
          className="w-1/3 rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white p-2"
        >
          <option value="">Select Job</option>
          {/* Assume jobs are fetched or stored in context */}
          <option value="job1">Job 1</option>
          <option value="job2">Job 2</option>
        </select>
        <input
          type="text"
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          placeholder="Type a message..."
          className="flex-1 rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white p-2"
        />
        <button
          onClick={() =>
            mutation.mutate({
              receiverId: receiverId || "",
              jobId: selectedJobId,
            })
          }
          disabled={
            !newMessage || !receiverId || !selectedJobId || mutation.isLoading
          }
          className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:bg-gray-400 dark:disabled:bg-gray-600 transition-colors"
        >
          {mutation.isLoading ? "Sending..." : "Send"}
        </button>
      </div>
    </div>
  );
}


--- ./src/app/client/(client)/settings/page.tsx ---

"use client";

import { useState } from "react";
import { supabase } from "@/lib/supabase/client";
import { Button } from "@/components/ui/button";
import QRCode from "qrcode.react";
import { toast } from "react-hot-toast";

export default function Settings() {
  const [qrCode, setQrCode] = useState("");
  const [mfaCode, setMfaCode] = useState("");

  const enableMFA = async () => {
    const { data: user } = await supabase.auth.getUser();
    const { data, error } = await supabase.auth.mfa.enroll({
      userId: user.user!.id,
      factorType: "totp",
    });
    if (error) {
      toast.error(error.message);
    } else {
      setQrCode(data.totp.qr_code);
    }
  };

  const verifyMFA = async () => {
    const { data: factors } = await supabase.auth.mfa.listFactors();
    if (!factors?.totp?.length) {
      toast.error("No TOTP factor found");
      return;
    }
    const factorId = factors.totp[0].id;
    const { error } = await supabase.auth.mfa.verify({
      factorId,
      code: mfaCode,
    });
    if (error) {
      toast.error(error.message);
    } else {
      toast.success("MFA enabled!");
      setQrCode("");
      setMfaCode("");
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold">Settings</h1>
      <div className="mt-4">
        <h2 className="text-xl">Multi-Factor Authentication</h2>
        {!qrCode ? (
          <Button onClick={enableMFA}>Enable MFA</Button>
        ) : (
          <div className="space-y-4">
            <p>Scan this QR code with an authenticator app:</p>
            <QRCode value={qrCode} />
            <input
              type="text"
              value={mfaCode}
              onChange={(e) => setMfaCode(e.target.value)}
              placeholder="Enter 6-digit code"
              className="mt-2 p-2 border rounded w-full"
            />
            <Button onClick={verifyMFA} className="mt-2">
              Verify
            </Button>
          </div>
        )}
      </div>
    </div>
  );
}


--- ./src/app/client/(client)/job/[id]/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/router";
import { Card, Button } from "@/components/ui";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";

export default function JobDetails({ params }: { params: { id: string } }) {
  const [job, setJob] = useState<any>(null);
  const { data, error, isLoading } = useQuery({
    queryKey: ["job", params.id],
    queryFn: async () => {
      const res = await fetch(`/api/jobs?job_id=${params.id}`);
      if (!res.ok) throw new Error("Failed to fetch job");
      return res.json();
    },
  });

  useEffect(() => {
    if (data && data.length > 0) setJob(data[0]);
    if (error) toast.error(error.message);
  }, [data, error]);

  if (isLoading) return <div className="text-center py-10">Loading...</div>;
  if (!job) return <div className="text-center py-10">Job not found</div>;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        {job.title}
      </h1>
      <Card className="p-6 shadow-lg">
        <p className="text-gray-600 dark:text-gray-400">
          Description: {job.description}
        </p>
        <p className="text-gray-600 dark:text-gray-400">
          Budget: ${job.budget}
        </p>
        <p className="text-gray-600 dark:text-gray-400">Status: {job.status}</p>
        <p className="text-gray-600 dark:text-gray-400">
          Payment Type: {job.payment_type}
        </p>
        {job.payment_type === "milestone" && (
          <>
            <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200 mt-4">
              Milestones
            </h2>
            <ul className="mt-2 space-y-2">
              {job.milestones.map((milestone: any) => (
                <li
                  key={milestone.id}
                  className="p-3 bg-gray-50 dark:bg-gray-800 rounded-lg"
                >
                  {milestone.title}: {milestone.status} (${milestone.amount})
                </li>
              ))}
            </ul>
          </>
        )}
      </Card>
    </div>
  );
}


--- ./src/app/client/(client)/reset-password/page.tsx ---

"use client";

import { useState } from "react";
import { Button } from "@/components/ui";
import { toast } from "react-hot-toast";
import { useRouter } from "next/navigation";

export default function ResetPassword() {
  const [email, setEmail] = useState("");
  const router = useRouter();

  const handleReset = async (e: React.FormEvent) => {
    e.preventDefault();
    // Placeholder for password reset logic (e.g., using NextAuth or Supabase auth)
    toast.success("Password reset link sent to your email!");
    router.push("/client/login");
  };

  return (
    <div className="max-w-md mx-auto p-6 space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Reset Password
      </h1>
      <form onSubmit={handleReset} className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Email
          </label>
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
            required
          />
        </div>
        <Button type="submit" className="w-full">
          Send Reset Link
        </Button>
      </form>
    </div>
  );
}


--- ./src/app/client/(client)/tradie/[id]/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";

export default function TradieProfile({ params }: { params: { id: string } }) {
  const [tradie, setTradie] = useState<any>(null);

  const { data, error, isLoading } = useQuery({
    queryKey: ["tradie", params.id],
    queryFn: async () => {
      const res = await fetch(`/api/tradies?user_id=${params.id}`);
      if (!res.ok) throw new Error("Failed to fetch tradie");
      return res.json();
    },
  });

  useEffect(() => {
    if (data && data.length > 0) setTradie(data[0]);
    if (error) toast.error(error.message);
  }, [data, error]);

  if (isLoading) return <div className="text-center py-10">Loading...</div>;
  if (!tradie) return <div className="text-center py-10">Tradie not found</div>;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        {tradie.name}
      </h1>
      <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
        <p className="text-gray-600 dark:text-gray-400">
          Trade: {tradie.trade}
        </p>
        <p className="text-gray-600 dark:text-gray-400">
          Rating: {tradie.average_rating || "N/A"}
        </p>
        <p className="text-gray-600 dark:text-gray-400">
          Region: {tradie.region}
        </p>
        {tradie.top_tradie && (
          <p className="text-green-600 dark:text-green-400">Top Tradie ✅</p>
        )}
        <button
          onClick={() => alert("Contact functionality coming soon!")}
          className="mt-4 px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700"
        >
          Contact Tradie
        </button>
      </div>
    </div>
  );
}


--- ./src/app/client/(client)/page.tsx ---

"use client";

import Link from "next/link";

export default function ClientHome() {
  return (
    <div className="text-center space-y-6 py-12">
      <h1 className="text-5xl font-bold text-gray-900 dark:text-gray-100">
        Welcome to TradeMatey - Client Portal
      </h1>
      <p className="text-lg text-gray-600 dark:text-gray-400">
        Manage your projects, hire vetted tradies, and track payments.
      </p>
      <div className="space-x-4">
        <Link href="/client/dashboard">
          <button className="px-6 py-3 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors">
            Go to Dashboard
          </button>
        </Link>
        <Link href="/client/post-job">
          <button className="px-6 py-3 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors">
            Post a Job
          </button>
        </Link>
      </div>
    </div>
  );
}


--- ./src/app/globals.css ---

@tailwind base;
@tailwind components;
@tailwind utilities;

--- ./src/app/robots.ts ---



--- ./src/app/sitemap.ts ---

import { MetadataRoute } from "next";

export default function sitemap(): MetadataRoute.Sitemap {
  return [
    { url: "https://yourwebsite.com", lastModified: new Date() },
    { url: "https://yourwebsite.com/about", lastModified: new Date() },
  ];
}


--- ./src/app/tradie/(tradie)/premium/page.tsx ---

"use client";

import Link from "next/link";

export default function PremiumPage() {
  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto text-center space-y-8">
        <h1 className="text-4xl font-bold text-gray-900 dark:text-gray-100">
          Upgrade to TradeMatey Premium
        </h1>
        <p className="text-lg text-gray-600 dark:text-gray-400">
          Unlock advanced tools and features with our premium subscription,
          backed by a $1M investment for top-tier service.
        </p>
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-xl">
          <h2 className="text-2xl font-semibold text-gray-900 dark:text-gray-100">
            Premium Benefits
          </h2>
          <ul className="mt-4 space-y-2 text-left text-gray-600 dark:text-gray-400">
            <li>✔ Advanced Job Analytics</li>
            <li>✔ Automated Invoicing</li>
            <li>✔ Marketing Tools</li>
            <li>✔ Priority Support</li>
          </ul>
          <p className="mt-4 text-lg font-medium text-gray-900 dark:text-gray-100">
            Starting at $19.99/month
          </p>
          <Link href="/tradie/subscribe">
            <button className="mt-6 px-8 py-3 bg-yellow-400 text-blue-900 rounded-lg shadow-md hover:bg-yellow-500 transition transform hover:scale-105">
              Subscribe Now
            </button>
          </Link>
        </div>
      </div>
    </div>
  );
}


--- ./src/app/tradie/(tradie)/onboarding/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui";
import { toast } from "react-hot-toast";
import { useRouter } from "next/navigation";
import { supabase } from "@/lib/supabase/client";
import { loadStripe } from "@stripe/stripe-js";
import {
  Elements,
  CardElement,
  useStripe,
  useElements,
} from "@stripe/stripe-js";
import Link from "next/link";

const stripePromise = loadStripe(
  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!
);

function PaymentForm({ onSuccess }: { onSuccess: () => void }) {
  const stripe = useStripe();
  const elements = useElements();
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    const {
      data: { user },
    } = await supabase.auth.getUser();
    const res = await fetch("/api/payments/setup", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ user_id: user!.id }),
    });
    const { clientSecret } = await res.json();
    const { error, setupIntent } = await stripe!.confirmCardSetup(
      clientSecret,
      {
        payment_method: { card: elements!.getElement(CardElement)! },
      }
    );
    if (error) {
      toast.error(error.message!);
    } else {
      await supabase
        .from("users")
        .update({ payment_method_id: setupIntent!.payment_method })
        .eq("id", user!.id);
      toast.success("Payment method added!");
      onSuccess();
    }
    setLoading(false);
  };

  return (
    <form onSubmit={handleSubmit}>
      <CardElement />
      <Button type="submit" disabled={loading} className="mt-2 w-full">
        {loading ? "Processing..." : "Add Payment Method"}
      </Button>
    </form>
  );
}

export default function Onboarding() {
  const [step, setStep] = useState(1);
  const [form, setForm] = useState({
    name: "",
    email: "",
    region: "",
    trade: "",
    bio: "",
    paymentMethod: "",
  });
  const router = useRouter();

  useEffect(() => {
    const fetchUser = async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      const { data } = await supabase
        .from("users")
        .select("email, region, trade, bio")
        .eq("id", user!.id)
        .single();
      setForm((prev) => ({
        ...prev,
        email: data?.email || user?.email || "",
        region: data?.region || "",
        trade: data?.trade || "",
        bio: data?.bio || "",
      }));
    };
    fetchUser();
  }, []);

  const handleNext = async () => {
    if (step < 4) setStep(step + 1);
    else {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      const { error: profileError } = await supabase
        .from("profiles")
        .update({ role: 'tradie' })
        .eq("id", user!.id);
      const { error: userError } = await supabase
        .from("users")
        .update({
          name: form.name,
          region: form.region,
          trade: form.trade,
          bio: form.bio,
          has_completed_onboarding: true,
          roles: ['employee'],
        })
        .eq("id", user!.id);
      if (profileError || userError) {
        toast.error("Failed to save profile");
      } else {
        await supabase.from("badges").insert([
          {
            user_id: user!.id,
            badge: "Welcome Aboard",
            earned_at: new Date().toISOString(),
          },
        ]);
        await supabase.from("notifications").insert({
          user_id: user!.id,
          message: "You earned the 'Welcome Aboard' badge!",
        });
        toast.success("Onboarding completed!");
        router.push("/tradie/dashboard");
      }
    }
  };

  return (
    <div className="max-w-md mx-auto p-6 space-y-6">
      <h1 className="text-3xl font-bold">Welcome to TradeMatey</h1>
      {step === 1 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 1: Watch Intro</h2>
          <video src="/intro.mp4" controls className="w-full rounded" />
          <p>
            Secure milestone payments with 3.33% commission and QBCC-compliant
            14+14 day timelines.
          </p>
        </div>
      )}
      {step === 2 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 2: Personal Info</h2>
          <input
            type="text"
            placeholder="Name"
            value={form.name}
            onChange={(e) => setForm({ ...form, name: e.target.value })}
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
            required
          />
          <input
            type="email"
            placeholder="Email"
            value={form.email}
            disabled
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
          />
          <select
            value={form.region}
            onChange={(e) => setForm({ ...form, region: e.target.value })}
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
            required
          >
            <option value="">Select Region</option>
            <option value="Regional">Regional Queensland</option>
            <option value="Metro">Metro Queensland</option>
          </select>
          <input
            type="text"
            placeholder="Trade (e.g., Plumber)"
            value={form.trade}
            onChange={(e) => setForm({ ...form, trade: e.target.value })}
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
            required
          />
          <textarea
            placeholder="Bio"
            value={form.bio}
            onChange={(e) => setForm({ ...form, bio: e.target.value })}
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
          />
        </div>
      )}
      {step === 3 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 3: Payment Method</h2>
          <Elements stripe={stripePromise}>
            <PaymentForm
              onSuccess={() =>
                setForm({ ...form, interim payment_method: 'Card Added' })
              } />
          </Elements>
          <p className="text-sm text-gray-600">
            3.33% commission per milestone (
            {form.region === "Regional" ? "capped at A$25" : "no cap"}).
          </p>
        </div>
      )}
      {step === 4 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 4: Confirmation</h2>
          <p>Name: {form.name}</p>
          <p>Email: {form.email}</p>
          <p>Region: {form.region}</p>
          <p>Trade: {form.trade}</p>
          <p>Bio: {form.bio}</p>
          <p>Payment Method: {form.paymentMethod}</p>
          <div className="mt-4 p-4 bg-blue-100 rounded">
            <p className="font-bold">Go Premium for A$99/year!</p>
            <p>Enjoy 1.67% commission and priority job matching.</p>
            <Link href="/premium">
              <Button>Learn More</Button>
            </Link>
          </div>
        </div>
      )}
      <Button onClick={handleNext} className="w-full">
        {step === 4 ? "Finish" : "Next"}
      </Button>
    </div>
  );
}

--- ./src/app/tradie/(tradie)/login/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { motion } from "framer-motion";
import { FaEye, FaEyeSlash, FaGoogle, FaEnvelope } from "react-icons/fa";
import { supabase } from "@/lib/supabase/client";
import { toast } from "react-hot-toast";
import { Button } from "@/components/ui/button";

export default function TradieLoginPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [magicLinkSent, setMagicLinkSent] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [mfaRequired, setMfaRequired] = useState(false);
  const [mfaCode, setMfaCode] = useState("");
  const [factorId, setFactorId] = useState("");
  const router = useRouter();

  const handleEmailLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setLoading(true);
    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
      if (error) throw error;

      const { data: factors } = await supabase.auth.mfa.listFactors();
      if (factors?.totp?.length) {
        const id = factors.totp[0].id;
        setFactorId(id);
        setMfaRequired(true);
        const { error: mfaError } = await supabase.auth.mfa.challenge({
          factorId: id,
        });
        if (mfaError) throw mfaError;
      } else {
        toast.success("Login successful!");
      }
    } catch (err: any) {
      setError(err.message);
      toast.error(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleMfaVerify = async () => {
    try {
      const { error } = await supabase.auth.mfa.verify({
        factorId,
        code: mfaCode,
      });
      if (error) throw error;
      toast.success("MFA verified!");
      setMfaRequired(false);
    } catch (err: any) {
      setError(err.message);
      toast.error(err.message);
    }
  };

  const handleOAuthLogin = async () => {
    setLoading(true);
    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: "google",
        options: { redirectTo: `${window.location.origin}/auth/callback` },
      });
      if (error) throw error;
    } catch (err: any) {
      setError(err.message);
      toast.error(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleMagicLink = async () => {
    setLoading(true);
    try {
      const { error } = await supabase.auth.signInWithOtp({
        email,
        options: {
          emailRedirectTo: `${window.location.origin}/auth/callback`,
        },
      });
      if (error) throw error;
      setMagicLinkSent(true);
      toast.success("Magic link sent! Check your email.");
    } catch (err: any) {
      setError(err.message);
      toast.error(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-100 to-gray-300 dark:from-gray-800 dark:to-gray-900 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="absolute inset-0 opacity-10">
        <svg className="w-full h-full" viewBox="0 0 1000 1000">
          <path
            d="M0 0H1000V1000H0V0ZM500 500C600 500 700 400 700 300C700 200 600 100 500 100C400 100 300 200 300 300C300 400 400 500 500 500Z"
            fill="url(#gradient)"
          />
          <defs>
            <linearGradient id="gradient" x1="0" y1="0" x2="1000" y2="1000">
              <stop offset="0%" stopColor="#2563EB" />
              <stop offset="100%" stopColor="#FBBF24" />
            </linearGradient>
          </defs>
        </svg>
      </div>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, ease: "easeOut" }}
        className="relative bg-white dark:bg-gray-800 p-6 sm:p-8 md:p-10 rounded-xl shadow-2xl w-full max-w-md sm:max-w-lg z-10"
      >
        <h1 className="text-3xl sm:text-4xl font-extrabold text-gray-900 dark:text-gray-100 mb-6 text-center">
          Tradie Login
        </h1>
        <p className="text-sm text-gray-600 dark:text-gray-400 mt-4 text-center">
          Sign in to access jobs with secure milestone payments (3.33%
          commission, 1.67% for top tradies) and QBCC compliance. Verify your
          license during onboarding.
        </p>
        {magicLinkSent ? (
          <div className="text-center space-y-4">
            <FaEnvelope
              className="text-blue-600 dark:text-blue-400 mx-auto"
              size={40}
            />
            <p className="text-gray-600 dark:text-gray-400">
              Check <span className="font-semibold">{email}</span> for your
              magic link.
            </p>
            <button
              onClick={() => setMagicLinkSent(false)}
              className="text-blue-600 dark:text-blue-400 hover:underline"
            >
              Try Another Method
            </button>
          </div>
        ) : (
          <>
            {error && (
              <motion.p
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="text-red-500 mb-4 text-center"
              >
                {error}
              </motion.p>
            )}
            <form onSubmit={handleEmailLogin} className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Email
                </label>
                <input
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-gray-100 transition duration-300"
                  required
                />
              </div>
              <div className="relative">
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Password
                </label>
                <input
                  type={showPassword ? "text" : "password"}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-gray-100 transition duration-300"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-10 text-gray-500 dark:text-gray-400"
                  aria-label={showPassword ? "Hide password" : "Show password"}
                >
                  {showPassword ? (
                    <FaEyeSlash size={20} />
                  ) : (
                    <FaEye size={20} />
                  )}
                </button>
              </div>
              {mfaRequired && (
                <div className="mt-4">
                  <input
                    type="text"
                    value={mfaCode}
                    onChange={(e) => setMfaCode(e.target.value)}
                    placeholder="Enter 6-digit MFA code"
                    className="w-full p-2 border rounded"
                  />
                  <Button onClick={handleMfaVerify} className="mt-2 w-full">
                    Verify MFA
                  </Button>
                </div>
              )}
              <Button
                type="submit"
                disabled={loading}
                className="w-full bg-blue-600 hover:bg-blue-700"
              >
                {loading ? "Signing In..." : "Sign In with Email"}
              </Button>
            </form>
            <div className="relative my-6">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300 dark:border-gray-600"></div>
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="px-2 bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400">
                  Or continue with
                </span>
              </div>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <Button
                onClick={handleOAuthLogin}
                disabled={loading}
                variant="outline"
                className="flex items-center justify-center"
              >
                <FaGoogle className="mr-2 text-red-500" /> Google
              </Button>
              <Button
                onClick={handleMagicLink}
                disabled={loading || !email}
                variant="outline"
                className="flex items-center justify-center"
              >
                <FaEnvelope className="mr-2 text-blue-500" /> Magic Link
              </Button>
            </div>
            <div className="mt-6 text-center space-y-2">
              <p className="text-sm text-gray-600 dark:text-gray-400">
                New to TradeMatey?{" "}
                <Link
                  href="/tradie/register"
                  className="text-blue-600 dark:text-blue-400 hover:underline"
                >
                  Register
                </Link>
              </p>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                Forgot password?{" "}
                <Link
                  href="/tradie/reset-password"
                  className="text-blue-600 dark:text-blue-400 hover:underline"
                >
                  Reset
                </Link>
              </p>
            </div>
          </>
        )}
      </motion.div>
    </div>
  );
}


--- ./src/app/tradie/(tradie)/dashboard/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { Card, Button } from "@/components/ui";
import { supabase } from "@/lib/supabase/client";
import { toast } from "react-hot-toast";
import { useRouter } from "next/navigation";

export default function TradieDashboard() {
  const [jobs, setJobs] = useState<any[]>([]);
  const [isTopTradie, setIsTopTradie] = useState(false);
  const router = useRouter();

  const fetchJobs = async () => {
    const {
      data: { user },
    } = await supabase.auth.getUser();
    const { data, error } = await supabase
      .from("jobs")
      .select("*, milestones(*), region")
      .eq("tradie_id", user!.id);
    if (error) throw error;
    setJobs(data || []);
  };

  useEffect(() => {
    const fetchUser = async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      const { data } = await supabase
        .from("users")
        .select("top_tradie")
        .eq("id", user!.id)
        .single();
      setIsTopTradie(data?.top_tradie || false);
    };
    fetchUser();
  }, []);

  useEffect(() => {
    const channel = supabase
      .channel("milestones")
      .on(
        "postgres_changes",
        { event: "UPDATE", schema: "public", table: "milestones" },
        (payload) => {
          if (
            payload.new.status === "verified" ||
            payload.new.status === "paid"
          ) {
            toast.success(
              `Milestone "${payload.new.title}" ${payload.new.status}!`
            );
            fetchJobs();
          }
        }
      )
      .subscribe();
    return () => supabase.removeChannel(channel);
  }, []);

  useEffect(() => {
    fetchJobs().catch((e) => toast.error(e.message));
  }, []);

  const markCompleted = async (milestoneId: string) => {
    const { data, error } = await supabase
      .from("milestones")
      .update({ status: "completed" })
      .eq("id", milestoneId)
      .select();
    if (error) {
      toast.error("Failed to mark as completed");
    } else {
      toast.success("Milestone marked as completed!");
      fetchJobs();
    }
  };

  const viewDetails = (jobId: string) => router.push(`/tradie/job/${jobId}`);

  const disputeMilestone = async (milestoneId: string) => {
    const res = await fetch("/api/disputes", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ milestone_id: milestoneId }),
    });
    if (res.ok) toast.success("Dispute initiated!");
    else toast.error("Failed to initiate dispute");
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold">Tradie Dashboard</h1>
      <p className="text-sm">
        Milestones follow QBCC-compliant 14+14 day payment timelines.
      </p>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
        {jobs.map((job) => (
          <Card key={job.id} className="p-4">
            <h2 className="text-xl">{job.title}</h2>
            <p>Status: {job.status}</p>
            <h3 className="text-lg mt-2">Milestones:</h3>
            <ul>
              {job.milestones.map((milestone: any) => {
                const commissionRate = isTopTradie ? 0.0167 : 0.0333;
                const commission =
                  job.region === "Regional"
                    ? Math.min(milestone.amount * commissionRate, 25)
                    : milestone.amount * commissionRate;
                return (
                  <li key={milestone.id} className="mt-1">
                    {milestone.title}: {milestone.status} (Amount: A$
                    {milestone.amount.toFixed(2)}, Commission: A$
                    {commission.toFixed(2)})
                    {milestone.status === "pending" && (
                      <Button onClick={() => markCompleted(milestone.id)}>
                        Mark as Completed
                      </Button>
                    )}
                    {milestone.status === "completed" && (
                      <Button
                        variant="outline"
                        onClick={() => disputeMilestone(milestone.id)}
                      >
                        Dispute
                      </Button>
                    )}
                    <Button
                      variant="outline"
                      onClick={() => viewDetails(job.id)}
                    >
                      View Details
                    </Button>
                  </li>
                );
              })}
            </ul>
          </Card>
        ))}
      </div>
    </div>
  );
}


--- ./src/app/tradie/(tradie)/referrals/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useAuth } from "@/context/AuthContext";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";

export default function TradieReferrals() {
  const { user } = useAuth();
  const [referralLink, setReferralLink] = useState("");
  const [credits, setCredits] = useState(0);

  const { data, error, isLoading } = useQuery({
    queryKey: ["tradieReferrals", user?.id],
    queryFn: async () => {
      const res = await fetch(`/api/referrals?user_id=${user?.id}`);
      if (!res.ok) throw new Error("Failed to fetch referral data");
      return res.json();
    },
  });

  useEffect(() => {
    if (data) {
      setCredits(data.credits || 0);
      setReferralLink(
        `${window.location.origin}/tradie/signup?ref=${user?.id}`
      );
    }
    if (error) toast.error(error.message);
  }, [data, error, user?.id]);

  const handleInvite = async (referredUserId: string) => {
    const res = await fetch("/api/referrals", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        referrer_id: user?.id,
        referred_user_id,
        role: "tradie",
      }),
    });
    if (res.ok) {
      toast.success("Referral recorded! Earn $50 when they complete a job.");
    } else {
      toast.error("Referral failed");
    }
  };

  if (isLoading) return <div className="text-center py-10">Loading...</div>;

  return (
    <div className="space-y-6 max-w-md mx-auto p-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Tradie Referrals
      </h1>
      <p className="text-gray-600 dark:text-gray-400">
        Invite tradies and earn $50 credit when they complete their first job!
      </p>
      <p className="text-gray-800 dark:text-gray-200 font-semibold">
        Your Credits: ${credits}
      </p>
      <div className="space-y-4">
        <input
          type="text"
          value={referralLink}
          readOnly
          className="w-full rounded-md border-gray-300 dark:border-gray-600 bg-gray-100 dark:bg-gray-800 p-2"
        />
        <button
          onClick={() => navigator.clipboard.writeText(referralLink)}
          className="w-full px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors"
        >
          Copy Referral Link
        </button>
        <div>
          <input
            type="text"
            placeholder="Enter referred tradie ID"
            onChange={(e) => handleInvite(e.target.value)}
            className="w-full rounded-md border-gray-300 dark:border-gray-600 focus:border-green-500 focus:ring-green-500 dark:bg-gray-700 dark:text-white p-2"
          />
        </div>
      </div>
    </div>
  );
}


--- ./src/app/tradie/(tradie)/disputes/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { Card, Button } from "@/components/ui";
import { useAuth } from "@/context/AuthContext";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";

export default function TradieDisputes() {
  const { user } = useAuth();
  const [disputes, setDisputes] = useState<any[]>([]);

  const { data, error, isLoading } = useQuery({
    queryKey: ["disputes", user?.id],
    queryFn: async () => {
      const res = await fetch(`/api/disputes?user_id=${user?.id}`);
      if (!res.ok) throw new Error("Failed to fetch disputes");
      return res.json();
    },
  });

  useEffect(() => {
    if (data) setDisputes(data);
    if (error) toast.error(error.message);
  }, [data, error]);

  if (isLoading) return <div className="text-center py-10">Loading...</div>;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Disputes
      </h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {disputes.map((dispute) => (
          <Card key={dispute.id} className="p-6 shadow-lg">
            <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">
              {dispute.title}
            </h2>
            <p className="text-gray-600 dark:text-gray-400 mt-2">
              Job: {dispute.jobs.title}
            </p>
            <p className="text-gray-600 dark:text-gray-400">
              Client: {dispute.users.name}
            </p>
            <p className="text-gray-600 dark:text-gray-400">
              Status:{" "}
              {dispute.qbcc_dispute ? "Escalated to QBCC" : "In Dispute"}
            </p>
          </Card>
        ))}
      </div>
    </div>
  );
}


--- ./src/app/tradie/(tradie)/availability/page.tsx ---

"use client";

import { useState } from "react";
import { Button } from "@/components/ui";
import { toast } from "react-hot-toast";
import { useAuth } from "@/context/AuthContext";

export default function Availability() {
  const { user } = useAuth();
  const [availability, setAvailability] = useState({
    monday: false,
    tuesday: false,
    wednesday: false,
    thursday: false,
    friday: false,
  });

  const handleSave = async () => {
    const res = await fetch("/api/tradies", {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ user_id: user?.id, availability }),
    });
    if (res.ok) toast.success("Availability updated!");
    else toast.error("Update failed");
  };

  return (
    <div className="max-w-md mx-auto p-6 space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Set Availability
      </h1>
      <div className="space-y-4">
        {["monday", "tuesday", "wednesday", "thursday", "friday"].map((day) => (
          <label
            key={day}
            className="block text-sm font-medium text-gray-700 dark:text-gray-300"
          >
            <input
              type="checkbox"
              checked={availability[day as keyof typeof availability]}
              onChange={(e) =>
                setAvailability({ ...availability, [day]: e.target.checked })
              }
              className="mr-2"
            />
            {day.charAt(0).toUpperCase() + day.slice(1)}
          </label>
        ))}
        <Button onClick={handleSave} className="w-full">
          Save Availability
        </Button>
      </div>
    </div>
  );
}


--- ./src/app/tradie/(tradie)/messages/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useAuth } from "@/context/AuthContext";
import { useQuery, useMutation } from "@tanstack/react-query";
import { toast } from "react-hot-toast";

export default function TradieMessages() {
  const { user } = useAuth();
  const [messages, setMessages] = useState<any[]>([]);
  const [newMessage, setNewMessage] = useState("");
  const [selectedJobId, setSelectedJobId] = useState("");

  const { data, error, isLoading } = useQuery({
    queryKey: ["tradieMessages", user?.id],
    queryFn: async () => {
      const res = await fetch(`/api/messages?user_id=${user?.id}`);
      if (!res.ok) throw new Error("Failed to fetch messages");
      return res.json();
    },
  });

  const mutation = useMutation({
    mutationFn: async ({
      receiverId,
      jobId,
    }: {
      receiverId: string;
      jobId: string;
    }) => {
      const res = await fetch("/api/messages", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          sender_id: user?.id,
          receiver_id: receiverId,
          content: newMessage,
          job_id: jobId,
        }),
      });
      if (!res.ok) throw new Error("Failed to send message");
      return res.json();
    },
    onSuccess: (newMsg) => {
      setMessages([...messages, newMsg]);
      setNewMessage("");
      toast.success("Message sent!");
    },
    onError: (err: any) => toast.error(err.message),
  });

  useEffect(() => {
    if (data) setMessages(data);
    if (error) toast.error(error.message);
  }, [data, error]);

  if (isLoading) return <div className="text-center py-10">Loading...</div>;

  const lastMsg = messages.length > 0 ? messages[messages.length - 1] : null;
  const receiverId =
    lastMsg?.sender_id !== user?.id ? lastMsg?.sender_id : lastMsg?.receiver_id;

  return (
    <div className="space-y-6 max-w-2xl mx-auto p-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Messages
      </h1>
      <div className="space-y-4 max-h-96 overflow-y-auto">
        {messages.map((msg) => (
          <div
            key={msg.id}
            className={`p-4 rounded-lg max-w-lg ${
              msg.sender_id === user?.id
                ? "bg-green-100 dark:bg-green-900 ml-auto"
                : "bg-gray-100 dark:bg-gray-800 mr-auto"
            }`}
          >
            <p className="text-sm text-gray-600 dark:text-gray-400">
              {msg.sender_id === user?.id ? "You" : msg.sender.name} to{" "}
              {msg.sender_id === user?.id ? msg.receiver.name : "You"}
            </p>
            <p className="text-gray-900 dark:text-gray-100">{msg.content}</p>
            <p className="text-xs text-gray-500 dark:text-gray-500 mt-1">
              {new Date(msg.created_at).toLocaleString()}
            </p>
          </div>
        ))}
      </div>
      <div className="flex space-x-2">
        <select
          value={selectedJobId}
          onChange={(e) => setSelectedJobId(e.target.value)}
          className="w-1/3 rounded-md border-gray-300 dark:border-gray-600 focus:border-green-500 focus:ring-green-500 dark:bg-gray-700 dark:text-white p-2"
        >
          <option value="">Select Job</option>
          {/* Assume jobs are fetched or stored in context */}
          <option value="job1">Job 1</option>
          <option value="job2">Job 2</option>
        </select>
        <input
          type="text"
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          placeholder="Type a message (e.g., Milestone update)..."
          className="flex-1 rounded-md border-gray-300 dark:border-gray-600 focus:border-green-500 focus:ring-green-500 dark:bg-gray-700 dark:text-white p-2"
        />
        <button
          onClick={() =>
            mutation.mutate({
              receiverId: receiverId || "",
              jobId: selectedJobId,
            })
          }
          disabled={
            !newMessage || !receiverId || !selectedJobId || mutation.isLoading
          }
          className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:bg-gray-400 dark:disabled:bg-gray-600 transition-colors"
        >
          {mutation.isLoading ? "Sending..." : "Send"}
        </button>
      </div>
    </div>
  );
}


--- ./src/app/tradie/(tradie)/settings/page.tsx ---

"use client";

import { useState } from "react";
import { supabase } from "@/lib/supabase/client";
import { Button } from "@/components/ui/button";
import QRCode from "qrcode.react";
import { toast } from "react-hot-toast";

export default function Settings() {
  const [qrCode, setQrCode] = useState("");
  const [mfaCode, setMfaCode] = useState("");

  const enableMFA = async () => {
    const { data: user } = await supabase.auth.getUser();
    const { data, error } = await supabase.auth.mfa.enroll({
      userId: user.user!.id,
      factorType: "totp",
    });
    if (error) {
      toast.error(error.message);
    } else {
      setQrCode(data.totp.qr_code);
    }
  };

  const verifyMFA = async () => {
    const { data: factors } = await supabase.auth.mfa.listFactors();
    if (!factors?.totp?.length) {
      toast.error("No TOTP factor found");
      return;
    }
    const factorId = factors.totp[0].id;
    const { error } = await supabase.auth.mfa.verify({
      factorId,
      code: mfaCode,
    });
    if (error) {
      toast.error(error.message);
    } else {
      toast.success("MFA enabled!");
      setQrCode("");
      setMfaCode("");
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold">Settings</h1>
      <div className="mt-4">
        <h2 className="text-xl">Multi-Factor Authentication</h2>
        {!qrCode ? (
          <Button onClick={enableMFA}>Enable MFA</Button>
        ) : (
          <div className="space-y-4">
            <p>Scan this QR code with an authenticator app:</p>
            <QRCode value={qrCode} />
            <input
              type="text"
              value={mfaCode}
              onChange={(e) => setMfaCode(e.target.value)}
              placeholder="Enter 6-digit code"
              className="mt-2 p-2 border rounded w-full"
            />
            <Button onClick={verifyMFA} className="mt-2">
              Verify
            </Button>
          </div>
        )}
      </div>
    </div>
  );
}


--- ./src/app/tradie/(tradie)/profile/page.tsx ---

"use client";

import { useState } from "react";
import { Button } from "@/components/ui";
import { toast } from "react-hot-toast";
import { useAuth } from "@/context/AuthContext";

export default function Profile() {
  const { user } = useAuth();
  const [form, setForm] = useState({
    name: user?.name || "",
    trade: user?.trade || "",
    region: user?.region || "",
  });

  const handleSave = async () => {
    // Placeholder for updating profile via API
    toast.success("Profile updated!");
  };

  return (
    <div className="max-w-md mx-auto p-6 space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Edit Profile
      </h1>
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Name
          </label>
          <input
            type="text"
            value={form.name}
            onChange={(e) => setForm({ ...form, name: e.target.value })}
            className="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Trade
          </label>
          <input
            type="text"
            value={form.trade}
            onChange={(e) => setForm({ ...form, trade: e.target.value })}
            className="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Region
          </label>
          <input
            type="text"
            value={form.region}
            onChange={(e) => setForm({ ...form, region: e.target.value })}
            className="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
          />
        </div>
        <Button onClick={handleSave} className="w-full">
          Save Changes
        </Button>
      </div>
    </div>
  );
}


--- ./src/app/tradie/(tradie)/job/[id]/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/router";
import { Card, Button } from "@/components/ui";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";

export default function TradieJobDetails({
  params,
}: {
  params: { id: string };
}) {
  const [job, setJob] = useState<any>(null);
  const { data, error, isLoading } = useQuery({
    queryKey: ["job", params.id],
    queryFn: async () => {
      const res = await fetch(`/api/jobs?job_id=${params.id}`);
      if (!res.ok) throw new Error("Failed to fetch job");
      return res.json();
    },
  });

  useEffect(() => {
    if (data && data.length > 0) setJob(data[0]);
    if (error) toast.error(error.message);
  }, [data, error]);

  if (isLoading) return <div className="text-center py-10">Loading...</div>;
  if (!job) return <div className="text-center py-10">Job not found</div>;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        {job.title}
      </h1>
      <Card className="p-6 shadow-lg">
        <p className="text-gray-600 dark:text-gray-400">
          Description: {job.description}
        </p>
        <p className="text-gray-600 dark:text-gray-400">
          Budget: ${job.budget}
        </p>
        <p className="text-gray-600 dark:text-gray-400">Status: {job.status}</p>
        <p className="text-gray-600 dark:text-gray-400">
          Payment Type: {job.payment_type}
        </p>
        {job.payment_type === "milestone" && (
          <>
            <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200 mt-4">
              Milestones
            </h2>
            <ul className="mt-2 space-y-2">
              {job.milestones.map((milestone: any) => (
                <li
                  key={milestone.id}
                  className="p-3 bg-gray-50 dark:bg-gray-800 rounded-lg"
                >
                  {milestone.title}: {milestone.status} (${milestone.amount})
                  {milestone.status === "pending" && (
                    <Button
                      onClick={() =>
                        alert("Mark complete functionality coming soon!")
                      }
                      className="mt-2"
                    >
                      Mark Complete
                    </Button>
                  )}
                </li>
              ))}
            </ul>
          </>
        )}
      </Card>
    </div>
  );
}


--- ./src/app/tradie/(tradie)/page.tsx ---

"use client";

import Link from "next/link";

export default function TradieHome() {
  return (
    <div className="text-center space-y-6 py-12">
      <h1 className="text-5xl font-bold text-gray-900 dark:text-gray-100">
        Welcome to TradeMatey - Tradie Portal
      </h1>
      <p className="text-lg text-gray-600 dark:text-gray-400">
        Manage your jobs, update availability, and connect with clients.
      </p>
      <div className="space-x-4">
        <Link href="/tradie/dashboard">
          <button className="px-6 py-3 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors">
            Go to Dashboard
          </button>
        </Link>
        <Link href="/tradie/availability">
          <button className="px-6 py-3 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors">
            Update Availability
          </button>
        </Link>
      </div>
    </div>
  );
}


--- ./src/app/finance/(finance)/dashboard/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";

export default function FinanceDashboard() {
  const [analytics, setAnalytics] = useState<any>({});

  const { data, error, isLoading } = useQuery({
    queryKey: ["analytics"],
    queryFn: async () => {
      const res = await fetch("/api/analytics");
      if (!res.ok) throw new Error("Failed to fetch analytics");
      return res.json();
    },
  });

  useEffect(() => {
    if (data) setAnalytics(data);
    if (error) toast.error(error.message);
  }, [data, error]);

  if (isLoading) return <div className="text-center py-10">Loading...</div>;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Finance Dashboard
      </h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
          <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">
            Total Revenue
          </h2>
          <p className="text-3xl font-bold text-gray-900 dark:text-gray-100 mt-2">
            ${analytics.totalRevenue}
          </p>
        </div>
        <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
          <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">
            Completed Jobs
          </h2>
          <p className="text-3xl font-bold text-gray-900 dark:text-gray-100 mt-2">
            {analytics.completedJobs}
          </p>
        </div>
      </div>
    </div>
  );
}


--- ./src/app/finance/(finance)/page.tsx ---

"use client";

import Link from "next/link";

export default function FinanceHome() {
  return (
    <div className="text-center space-y-6 py-12">
      <h1 className="text-5xl font-bold text-gray-900 dark:text-gray-100">
        Welcome to TradeMatey - Finance Portal
      </h1>
      <p className="text-lg text-gray-600 dark:text-gray-400">
        Manage payments, escrow, and financial reports.
      </p>
      <div className="space-x-4">
        <Link href="/finance/dashboard">
          <button className="px-6 py-3 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors">
            Go to Dashboard
          </button>
        </Link>
      </div>
    </div>
  );
}


--- ./src/app/layout.tsx ---

import { Providers } from "@/components/Providers";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import { Chatbot } from "@/components/ui/Chatbot";
import "./globals.css"; // Adjust path if your CSS file is elsewhere

export const metadata = {
  title: "TradeMatey - Find Trusted Tradies",
  description:
    "Post jobs, pay securely with milestones, and resolve disputes with TradeMatey.",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>
        <Providers>
          <Header />
          <main>{children}</main>
          <Footer />
          <Chatbot />
        </Providers>
      </body>
    </html>
  );
}


--- ./src/app/page.tsx ---

"use client";

import Link from "next/link";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { useEffect } from "react";
import { Button } from "@/components/ui/Button";
import { Card } from "@/components/ui/Card";
import { useQuery } from "@tanstack/react-query";

export default function Home() {
  const { data: session } = useSession();
  const router = useRouter();

  useEffect(() => {
    if (session?.user) {
      const role = session.user.role;
      const hasCompletedOnboarding =
        session.user.has_completed_onboarding ?? false;
      if (hasCompletedOnboarding) {
        router.push(`/${role}/dashboard`);
      } else {
        router.push(`/${role}/onboarding`);
      }
    }
  }, [session, router]);

  const { data: analytics } = useQuery({
    queryKey: ["analytics"],
    queryFn: async () => {
      const res = await fetch("/api/analytics");
      if (!res.ok) throw new Error("Failed to fetch analytics");
      return res.json();
    },
  });

  return (
    <div className="min-h-screen flex flex-col">
      <main className="flex-grow">
        <section className="relative bg-blue-600 py-20">
          <div className="container mx-auto text-center text-white">
            <h1 className="text-4xl md:text-6xl font-bold mb-4">
              Find Trusted Tradies with TradeMatey
            </h1>
            <p className="text-xl mb-6">
              Post jobs, pay securely with milestones, and resolve disputes with
              QBCC support.
            </p>
            <div className="space-x-4">
              <Link href="/client/post-job">
                <Button className="bg-blue-500 hover:bg-blue-600">
                  Post a Job
                </Button>
              </Link>
              <Link href="/tradie/login">
                <Button variant="outline">Join as a Tradie</Button>
              </Link>
            </div>
          </div>
        </section>
        <section className="py-16 bg-gray-100">
          <div className="container mx-auto grid grid-cols-3 gap-8">
            <Card className="p-6">
              <h2 className="text-2xl font-semibold">Milestone Payments</h2>
              <p className="mt-2">
                Pay only for completed work with our secure milestone system.
              </p>
            </Card>
            <Card className="p-6">
              <h2 className="text-2xl font-semibold">AI Tradie Matching</h2>
              <p className="mt-2">
                Our AI matches you with top tradies based on skills, location,
                and ratings.
              </p>
            </Card>
            <Card className="p-6">
              <h2 className="text-2xl font-semibold">QBCC Compliance</h2>
              <p className="mt-2">
                14+14 day payment timelines and dispute escalation to QBCC.
              </p>
            </Card>
          </div>
        </section>
        {analytics && (
          <section className="py-16 text-center">
            <h2 className="text-3xl font-bold mb-8">
              TradeMatey by the Numbers
            </h2>
            <div className="grid grid-cols-3 gap-8">
              <div>
                <p className="text-4xl font-bold">{analytics.totalJobs}</p>
                <p>Jobs Completed</p>
              </div>
              <div>
                <p className="text-4xl font-bold">{analytics.newUsers}</p>
                <p>New Users (30 Days)</p>
              </div>
              <div>
                <p className="text-4xl font-bold">
                  {analytics.completionRate}%
                </p>
                <p>Completion Rate</p>
              </div>
            </div>
          </section>
        )}
      </main>
    </div>
  );
}


--- ./src/app/api/premium/route.ts ---

import { createServerClient } from "@/lib/supabase/server";
import { stripe } from "@/lib/stripe";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function POST(request: Request) {
  try {
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: profile, error: profileError } = await supabase
      .from("users")
      .select("stripe_customer_id")
      .eq("id", user.id)
      .single();

    let customerId = profile?.stripe_customer_id;
    if (!customerId) {
      const customer = await stripe.customers.create({ email: user.email });
      customerId = customer.id;
      await supabase
        .from("users")
        .update({ stripe_customer_id: customerId })
        .eq("id", user.id);
    }

    const session = await stripe.checkout.sessions.create({
      customer: customerId,
      payment_method_types: ["card"],
      line_items: [{ price: "your_price_id", quantity: 1 }],
      mode: "subscription",
      success_url: `${process.env.NEXT_PUBLIC_APP_URL}/dashboard?success=true`,
      cancel_url: `${process.env.NEXT_PUBLIC_APP_URL}/dashboard?cancel=true`,
    });

    await supabase.from("premium").insert({
      user_id: user.id,
      stripe_subscription_id: session.subscription,
      status: "pending",
    });

    return NextResponse.json({ url: session.url });
  } catch (error) {
    console.error("Premium subscription error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

export async function GET(request: Request) {
  try {
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: subscription, error } = await supabase
      .from("premium")
      .select("stripe_subscription_id, status")
      .eq("user_id", user.id)
      .single();

    if (error || !subscription) {
      return NextResponse.json({ subscribed: false });
    }

    const stripeSubscription = await stripe.subscriptions.retrieve(
      subscription.stripe_subscription_id
    );
    return NextResponse.json({
      subscribed: stripeSubscription.status === "active",
      status: stripeSubscription.status,
    });
  } catch (error) {
    console.error("Premium status error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


--- ./src/app/api/community/route.ts ---

import { NextResponse } from "next/server";
import { createServerClient } from "@/lib/supabase/server";
import { cookies } from "next/headers";

export async function GET(request: Request) {
  try {
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const { data, error } = await supabase
      .from("community")
      .select("id, user_id, post_id, content, created_at, users(name)")
      .order("created_at", { ascending: false });

    if (error) throw error;
    return NextResponse.json(data);
  } catch (error: any) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}

export async function POST(request: Request) {
  try {
    const { user_id, content } = await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const { data, error } = await supabase
      .from("community")
      .insert([{ user_id, content }])
      .select();

    if (error) throw error;
    return NextResponse.json(data[0]);
  } catch (error: any) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}


--- ./src/app/api/book/route.ts ---

import { NextResponse } from "next/server";
import { supabase } from "@/lib/supabase/server";

export async function POST(request: Request) {
  try {
    const { jobDescription, location, userId } = await request.json();
    const { data, error } = await supabase
      .from("jobs")
      .insert([
        {
          title: jobDescription,
          description: jobDescription,
          client_id: userId,
          location,
          status: "open",
          payment_type: "milestone",
        },
      ])
      .select()
      .single();
    if (error) throw error;
    return NextResponse.json(data);
  } catch (error: any) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}


--- ./src/app/api/auth/[...nextauth]/route.ts ---

import NextAuth, { NextAuthOptions, Session, User } from "next-auth";
import GoogleProvider from "next-auth/providers/google";
import { SupabaseAdapter } from "@auth/supabase-adapter";
import { createClient } from "@supabase/supabase-js";

// Initialize Supabase client with service role key for full access
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!,
  {
    auth: {
      persistSession: false, // We don't need session persistence for the service role
    },
  }
);

// Custom adapter to handle user lookups with profiles
const customAdapter = {
  ...SupabaseAdapter({
    url: process.env.NEXT_PUBLIC_SUPABASE_URL!,
    secret: process.env.SUPABASE_SERVICE_ROLE_KEY!,
    schema: "public", // Use 'public' for accounts, users, etc.
  }),
  async createUser(
    userData: Omit<User, "id"> & { id?: string }
  ): Promise<User> {
    if (!userData.email) {
      throw new Error("Email is required for user creation");
    }

    // Check if user exists in auth.users
    const { data: authUser, error: authError } =
      await supabase.auth.admin.listUsers();
    const existingUser = authUser?.users.find(
      (u) => u.email === userData.email
    );

    if (authError || !existingUser) {
      console.error(
        "createUser error: User not found in auth.users",
        authError
      );
      throw new Error("User not found in auth.users");
    }

    return {
      id: existingUser.id,
      email: userData.email,
      role: "client",
      created_at: new Date().toISOString(),
    };
  },
  async getUser(id: string): Promise<User | null> {
    const { data, error } = await supabase
      .rpc("get_user_with_profile", { user_id: id })
      .single();

    if (error || !data) {
      // console.error("getUser error:", error);
      return null;
    }

    return {
      id: data.id,
      email: data.email,
      role: data.role,
      created_at: data.created_at,
    };
  },
  async getUserByEmail(email: string): Promise<User | null> {
    const { data, error } = await supabase
      .rpc("get_user_by_email_with_profile", { user_email: email })
      .single();

    if (error || !data) {
      // console.error("getUserByEmail error:", error);
      return null;
    }

    return {
      id: data.id,
      email: data.email,
      role: data.role,
      created_at: data.created_at,
    };
  },
  async getUserByAccount({
    providerAccountId,
    provider,
  }: {
    providerAccountId: string;
    provider: string;
  }): Promise<User | null> {
    const { data: account, error: accountError } = await supabase
      .from("accounts")
      .select("user_id")
      .eq("provider_account_id", providerAccountId)
      .eq("provider", provider)
      .single();

    if (accountError || !account) {
      // console.error("getUserByAccount account error:", accountError);
      return null;
    }

    const { data, error } = await supabase
      .rpc("get_user_with_profile", { user_id: account.user_id })
      .single();

    if (error || !data) {
      // console.error("getUserByAccount user error:", error);
      return null;
    }

    return {
      id: data.id,
      email: data.email,
      role: data.role,
      created_at: data.created_at,
    };
  },
  async linkAccount(account: {
    userId: string;
    provider: string;
    providerAccountId: string;
    access_token?: string;
    expires_at?: number;
    scope?: string;
    token_type?: string;
    id_token?: string;
  }): Promise<void> {
    if (!account.userId) {
      // console.error("linkAccount error: userId is missing from account object");
      throw new Error("User ID is missing; cannot link account");
    }

    const { error } = await supabase.from("accounts").insert({
      user_id: account.userId,
      provider: account.provider,
      provider_account_id: account.providerAccountId,
      access_token: account.access_token,
      expires_at: account.expires_at,
      scope: account.scope,
      token_type: account.token_type,
      id_token: account.id_token,
    });

    if (error) {
      // console.error("linkAccount insert error:", error);
      throw new Error(`Failed to link account: ${error.message}`);
    }
  },
  async createSession(session: {
    sessionToken: string;
    userId: string;
    expires: Date;
  }) {
    const { data, error } = await supabase
      .from("sessions")
      .insert({
        session_token: session.sessionToken,
        user_id: session.userId,
        expires: session.expires.toISOString(),
      })
      .select()
      .single();

    if (error) {
      // console.error("createSession error:", error);
      throw new Error(`Failed to create session: ${error.message}`);
    }

    return {
      sessionToken: data.session_token,
      userId: data.user_id,
      expires: new Date(data.expires),
    };
  },
  async getSessionAndUser(sessionToken: string) {
    // Fetch the session from public.sessions
    const { data: session, error: sessionError } = await supabase
      .from("sessions")
      .select("*")
      .eq("session_token", sessionToken)
      .single();

    if (sessionError || !session) {
      // console.error("getSessionAndUser session error:", sessionError);
      return null;
    }

    if (new Date(session.expires) < new Date()) {
      return null; // Session expired
    }

    // Manually fetch the user from auth.users using the admin API
    const { data: user, error: userError } =
      await supabase.auth.admin.getUserById(session.user_id);

    if (userError || !user?.user) {
      // console.error("getSessionAndUser user error:", userError);
      return null;
    }

    // Fetch the profile from public.profiles
    const { data: profile, error: profileError } = await supabase
      .from("profiles")
      .select("role, created_at")
      .eq("id", session.user_id)
      .single();

    if (profileError) {
      // console.error("getSessionAndUser profile error:", profileError);
    }

    return {
      session: {
        sessionToken: session.session_token,
        userId: session.user_id,
        expires: new Date(session.expires),
      },
      user: {
        id: user.user.id,
        email: user.user.email,
        role: profile?.role || "client",
        created_at: profile?.created_at || new Date().toISOString(),
      },
    };
  },
  async updateSession(session: { sessionToken: string; expires?: Date }) {
    const { data, error } = await supabase
      .from("sessions")
      .update({
        expires: session.expires?.toISOString(),
      })
      .eq("session_token", session.sessionToken)
      .select()
      .single();

    if (error || !data) {
      // console.error("updateSession error:", error);
      throw new Error(`Failed to update session: ${error.message}`);
    }

    return {
      sessionToken: data.session_token,
      userId: data.user_id,
      expires: new Date(data.expires),
    };
  },
  async deleteSession(sessionToken: string) {
    const { error } = await supabase
      .from("sessions")
      .delete()
      .eq("session_token", sessionToken);

    if (error) {
      // console.error("deleteSession error:", error);
      throw new Error(`Failed to delete session: ${error.message}`);
    }
  },
};

// Extend the Session type to include custom fields
declare module "next-auth" {
  interface Session {
    user: {
      id: string;
      email?: string;
      role?: string;
      created_at?: string;
    };
  }

  interface User {
    id: string;
    email?: string;
    role?: string;
    created_at?: string;
  }
}

export const authOptions: NextAuthOptions = {
  adapter: customAdapter,
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
  ],
  callbacks: {
    async signIn({ user, account, profile }) {
      const email = user.email;
      if (!email) {
        console.error("signIn error: Email is missing from user object");
        return false;
      }

      const { data: existingUsers, error: listError } =
        await supabase.auth.admin.listUsers();
      if (listError) {
        return false;
      }

      const existingUser = existingUsers.users.find((u) => u.email === email);
      if (existingUser) {
        user.id = existingUser.id;
        return true;
      }

      const { data: newUser, error: createError } =
        await supabase.auth.admin.createUser({
          email: email,
          email_confirmed_at: new Date().toISOString(),
          user_metadata: {
            name: user.name,
            picture: user.image,
          },
        });

      if (createError) {
        console.error("signIn create user error:", createError);
        return false;
      }

      user.id = newUser.user.id;
      return true;
    },
    async session({ session, user }: { session: Session; user: User }) {
      session.user = {
        ...session.user,
        id: user.id,
        role: user.role ?? null,
        hasProfile: user.hasProfile ?? false,
      };
      return session;
    },
    async redirect({ url, baseUrl }) {
      return `${baseUrl}/dashboard`; // ⬅️ Redirects all users to dashboard
    },
  },
  secret: process.env.NEXTAUTH_SECRET,
  debug: true,
};

const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };


--- ./src/app/api/tradies/routes.ts ---

import { NextResponse } from "next/server";
import { createServerClient } from "@/lib/supabase/server";
import { cookies } from "next/headers";

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const trade = searchParams.get("trade");

    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    let query = supabase
      .from("tradies")
      .select("id, user_id, trade, region, ratings")
      .eq("verified", true); // Assuming tradies need verification

    if (trade) query = query.eq("trade", trade);

    const { data, error } = await query.order("ratings", { ascending: false });
    if (error) throw error;

    return NextResponse.json(data);
  } catch (error: any) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}

export async function PATCH(request: Request) {
  try {
    const { user_id, availability } = await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const { data: tradie, error: tradieError } = await supabase
      .from("tradies")
      .select("id")
      .eq("user_id", user_id)
      .single();

    if (tradieError || !tradie) {
      return NextResponse.json({ error: "Tradie not found" }, { status: 404 });
    }

    const { data, error } = await supabase
      .from("availability")
      .insert({
        tradie_id: tradie.id,
        start_time: availability.start,
        end_time: availability.end,
      })
      .select();

    if (error) throw error;
    return NextResponse.json({
      message: "Availability updated",
      data: data[0],
    });
  } catch (error: any) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}


--- ./src/app/api/availablity/route.ts ---

// src/app/api/availability/route.js
import { supabase } from "../../../lib/supabase";
import { NextResponse } from "next/server";

// Get current user's availability
export async function GET(request) {
  const {
    data: { user },
    error: authError,
  } = await supabase.auth.getUser();
  if (authError || !user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const { data, error } = await supabase
    .from("availability")
    .select("id, available_dates, updated_at")
    .eq("user_id", user.id)
    .single();

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json(data || { available_dates: {} });
}

// Update availability
export async function POST(request) {
  const {
    data: { user },
    error: authError,
  } = await supabase.auth.getUser();
  if (authError || !user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const { available_dates } = await request.json();
  if (!available_dates) {
    return NextResponse.json(
      { error: "Missing available_dates" },
      { status: 400 }
    );
  }

  const { data, error } = await supabase
    .from("availability")
    .upsert(
      {
        user_id: user.id,
        available_dates,
        updated_at: new Date().toISOString(),
      },
      { onConflict: ["user_id"] }
    )
    .select("id, available_dates, updated_at")
    .single();

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json(data);
}


--- ./src/app/api/users/update-stats/route.ts ---

import { NextResponse } from "next/server";
import { supabase } from "@/lib/supabase/server";

export async function POST(request: Request) {
  try {
    const { tradie_id, rating } = await request.json();

    const { data: user } = await supabase
      .from("users")
      .select("completed_jobs, average_rating")
      .eq("id", tradie_id)
      .single();

    const newCompletedJobs = (user.completed_jobs || 0) + 1;
    const newAverageRating =
      ((user.average_rating || 0) * user.completed_jobs + rating) /
      newCompletedJobs;

    const isTopTradie = newCompletedJobs >= 10 && newAverageRating >= 4.5;

    const { data, error } = await supabase
      .from("users")
      .update({
        completed_jobs: newCompletedJobs,
        average_rating: newAverageRating,
        top_tradie: isTopTradie,
      })
      .eq("id", tradie_id)
      .select();

    if (error) throw error;
    return NextResponse.json({
      message: "Stats updated",
      top_tradie: isTopTradie,
      data: data[0],
    });
  } catch (error: any) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}


--- ./src/app/api/jobs/reassign/route.ts ---

import { createServerClient } from "@/lib/supabase/server";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function POST(request: Request) {
  try {
    const { title, description, budget, milestones, region } =
      await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: profile, error: profileError } = await supabase
      .from("profiles")
      .select("role")
      .eq("id", user.id)
      .single();

    if (profileError || profile?.role !== "client") {
      return NextResponse.json(
        { error: "Only clients can post jobs" },
        { status: 403 }
      );
    }

    const { data: job, error: jobError } = await supabase
      .from("jobs")
      .insert({
        title,
        description,
        budget,
        client_id: user.id,
        status: "pending",
        payment_type: "milestone",
        region,
      })
      .select()
      .single();

    if (jobError) throw new Error(jobError.message);

    const milestoneInserts = milestones.map((m: any) => ({
      job_id: job.id,
      title: m.title,
      description: m.description,
      amount: m.amount,
      due_date: m.due_date,
      status: "pending",
    }));

    const { error: milestoneError } = await supabase
      .from("milestones")
      .insert(milestoneInserts);
    if (milestoneError) throw new Error(milestoneError.message);

    return NextResponse.json({ job, milestones: milestoneInserts });
  } catch (error) {
    console.error("Job creation error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


--- ./src/app/api/jobs/route.ts ---

import { createServerClient } from "@/lib/supabase/server";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function POST(request: Request) {
  try {
    const { title, description, budget, milestones, region } =
      await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: profile, error: profileError } = await supabase
      .from("profiles")
      .select("role")
      .eq("id", user.id)
      .single();

    if (profileError || profile?.role !== "client") {
      return NextResponse.json(
        { error: "Only clients can post jobs" },
        { status: 403 }
      );
    }

    const { data: job, error: jobError } = await supabase
      .from("jobs")
      .insert({
        title,
        description,
        budget,
        client_id: user.id,
        status: "pending",
        payment_type: "milestone",
        region,
      })
      .select()
      .single();

    if (jobError) throw new Error(jobError.message);

    const milestoneInserts = milestones.map((m: any) => ({
      job_id: job.id,
      title: m.title,
      description: m.description,
      amount: m.amount,
      due_date: m.due_date,
      status: "pending",
    }));

    const { error: milestoneError } = await supabase
      .from("milestones")
      .insert(milestoneInserts);
    if (milestoneError) throw new Error(milestoneError.message);

    return NextResponse.json({ job, milestones: milestoneInserts });
  } catch (error) {
    console.error("Job creation error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


--- ./src/app/api/notifications/route.ts ---

import { createServerClient } from "@/lib/supabase/server";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function GET(request: Request) {
  try {
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: notifications, error } = await supabase
      .from("notifications")
      .select("id, message, job_id, is_read, created_at")
      .eq("user_id", user.id)
      .eq("is_read", false)
      .order("created_at", { ascending: false });

    if (error) throw new Error(error.message);

    return NextResponse.json(notifications);
  } catch (error) {
    console.error("Notifications error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


--- ./src/app/api/payments/setup/route.tsx ---

import { NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/server";
import Stripe from "stripe";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: "2024-04-10",
});

export async function POST(request: Request) {
  const supabase = createClient();
  const { user_id } = await request.json();
  const { data: user } = await supabase
    .from("users")
    .select("stripe_customer_id")
    .eq("id", user_id)
    .single();

  if (!user.stripe_customer_id) {
    const customer = await stripe.customers.create({ metadata: { user_id } });
    await supabase
      .from("users")
      .update({ stripe_customer_id: customer.id })
      .eq("id", user_id);
    user.stripe_customer_id = customer.id;
  }

  const setupIntent = await stripe.setupIntents.create({
    customer: user.stripe_customer_id,
    payment_method_types: ["card"],
  });

  return NextResponse.json({ clientSecret: setupIntent.client_secret });
}


--- ./src/app/api/payments/route.ts ---

import { createServerClient } from "@/lib/supabase/server";
import { stripe } from "@/lib/stripe";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function POST(request: Request) {
  try {
    const { milestoneId, amount } = await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: milestone, error: milestoneError } = await supabase
      .from("milestones")
      .select("*, jobs!inner(client_id, region)")
      .eq("id", milestoneId)
      .single();

    if (milestoneError || !milestone) {
      return NextResponse.json(
        { error: "Milestone not found" },
        { status: 404 }
      );
    }
    if (milestone.jobs.client_id !== user.id) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 403 });
    }

    const { data: profile, error: profileError } = await supabase
      .from("users")
      .select("stripe_customer_id")
      .eq("id", user.id)
      .single();

    if (profileError || !profile?.stripe_customer_id) {
      return NextResponse.json({ error: "No payment method" }, { status: 400 });
    }

    const commission =
      milestone.jobs.region === "Regional"
        ? Math.min(amount * 0.0333, 25)
        : amount * 0.0333;

    const paymentIntent = await stripe.paymentIntents.create({
      amount: Math.round((amount + commission) * 100),
      currency: "aud",
      customer: profile.stripe_customer_id,
      automatic_payment_methods: { enabled: true },
      metadata: { milestoneId, commission: commission.toString() },
    });

    await supabase.from("payments").insert({
      milestone_id: milestoneId,
      amount,
      payment_intent_id: paymentIntent.id,
      status: "pending",
      client_id: user.id,
    });

    await supabase
      .from("milestones")
      .update({ status: "pending", payment_intent_id: paymentIntent.id })
      .eq("id", milestoneId);

    return NextResponse.json({ clientSecret: paymentIntent.client_secret });
  } catch (error) {
    console.error("Payment error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

export async function PATCH(request: Request) {
  try {
    const { milestoneId } = await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: milestone, error: milestoneError } = await supabase
      .from("milestones")
      .select("*, jobs!inner(tradie_id)")
      .eq("id", milestoneId)
      .single();

    if (milestoneError || !milestone) {
      return NextResponse.json(
        { error: "Milestone not found" },
        { status: 404 }
      );
    }
    if (milestone.jobs.tradie_id !== user.id) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 403 });
    }

    const { data: payment, error: paymentError } = await supabase
      .from("payments")
      .select("payment_intent_id, amount, client_id")
      .eq("milestone_id", milestoneId)
      .single();

    if (paymentError || !payment) {
      return NextResponse.json({ error: "Payment not found" }, { status: 404 });
    }

    const { data: tradie, error: tradieError } = await supabase
      .from("accounts")
      .select("stripe_account_id")
      .eq("user_id", milestone.jobs.tradie_id)
      .single();

    if (tradieError || !tradie?.stripe_account_id) {
      return NextResponse.json(
        { error: "Tradie account not set up" },
        { status: 400 }
      );
    }

    const paymentIntent = await stripe.paymentIntents.retrieve(
      payment.payment_intent_id
    );
    if (paymentIntent.status !== "succeeded") {
      return NextResponse.json(
        { error: "Payment not completed" },
        { status: 400 }
      );
    }

    const commission =
      milestone.jobs.region === "Regional"
        ? Math.min(payment.amount * 0.0333, 25)
        : payment.amount * 0.0333;

    await stripe.transfers.create({
      amount: Math.round((payment.amount - commission) * 100),
      currency: "aud",
      destination: tradie.stripe_account_id,
      transfer_group: `milestone_${milestoneId}`,
    });

    await supabase
      .from("payments")
      .update({ status: "completed" })
      .eq("milestone_id", milestoneId);

    await supabase
      .from("badges")
      .insert({ user_id: tradieId, badge: "First Job", earned_at: new Date() });

    await supabase
      .from("milestones")
      .update({ status: "completed" })
      .eq("id", milestoneId);

    await supabase.from("notifications").insert({
      user_id: payment.client_id,
      message: `Milestone ${milestone.title} verified and paid`,
      job_id: milestone.job_id,
    });

    return NextResponse.json({ message: "Milestone verified and paid" });
  } catch (error) {
    console.error("Verification error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


--- ./src/app/api/payments/escrow/route.ts ---

// src/app/api/payments/escrow/route.js
import { supabase } from "../../../../lib/supabase";
import { NextResponse } from "next/server";

// Create escrow payment
export async function POST(request) {
  const {
    data: { user },
    error: authError,
  } = await supabase.auth.getUser();
  if (authError || !user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const { booking_id, amount } = await request.json();
  if (!booking_id || !amount) {
    return NextResponse.json(
      { error: "Missing booking_id or amount" },
      { status: 400 }
    );
  }

  // Verify booking exists and belongs to user
  const { data: booking, error: bookingError } = await supabase
    .from("bookings")
    .select("id")
    .eq("id", booking_id)
    .eq("user_id", user.id)
    .single();

  if (bookingError || !booking) {
    return NextResponse.json({ error: "Booking not found" }, { status: 404 });
  }

  // Create payment in escrow
  const { data: payment, error: paymentError } = await supabase
    .from("payments")
    .insert({
      booking_id,
      amount,
      status: "held",
      created_at: new Date().toISOString(),
    })
    .select("id, booking_id, amount, status, created_at")
    .single();

  if (paymentError) {
    return NextResponse.json({ error: paymentError.message }, { status: 500 });
  }

  return NextResponse.json(payment);
}


--- ./src/app/api/support/route.ts ---

import { createServerClient } from "@/lib/supabase/server";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function POST(request: Request) {
  try {
    const { query } = await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: support, error } = await supabase
      .from("support")
      .insert({ user_id: user.id, query, status: "pending" })
      .select()
      .single();

    if (error) throw new Error(error.message);

    const response = `Support query received: ${query}. A team member will respond soon.`;
    await supabase
      .from("support")
      .update({ response, status: "responded" })
      .eq("id", support.id);

    return NextResponse.json({ message: response });
  } catch (error) {
    console.error("Support error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


--- ./src/app/api/webhooks/route.ts ---

// src/app/api/webhooks/stripe/route.ts
import { stripe } from "@/lib/stripe";
import { supabase } from "@/lib/supabase";
export async function POST(request) {
  const payload = await request.text();
  const sig = request.headers.get("stripe-signature");
  let event;
  try {
    event = stripe.webhooks.constructEvent(
      payload,
      sig,
      process.env.STRIPE_WEBHOOK_SECRET
    );
  } catch (err) {
    return new Response("Webhook Error", { status: 400 });
  }
  if (event.type === "payment_intent.succeeded") {
    const paymentIntent = event.data.object;
    await supabase
      .from("payments")
      .update({ status: "completed" })
      .eq("payment_intent_id", paymentIntent.id);
  }
  return new Response("OK", { status: 200 });
}


--- ./src/app/api/referrals/route.ts ---

import { createServerClient } from "@/lib/supabase/server";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function POST(request: Request) {
  try {
    const { referredEmail } = await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { error } = await supabase.from("referrals").insert({
      referrer_id: user.id,
      referred_email: referredEmail,
    });

    if (error) throw new Error(error.message);

    return NextResponse.json({ message: "Referral created" });
  } catch (error) {
    console.error("Referral error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


--- ./src/app/api/disputes/escalate/route.ts ---

// src/app/api/disputes/escalate/route.ts
import { createServerClient } from "@/lib/supabase/server";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";
export async function PATCH(request) {
  const { dispute_id } = await request.json();
  const supabase = createServerClient(cookies());
  const {
    data: { user },
  } = await supabase.auth.getUser();
  if (!user)
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  const { data: profile } = await supabase
    .from("profiles")
    .select("role")
    .eq("id", user.id)
    .single();
  if (profile.role !== "support")
    return NextResponse.json({ error: "Forbidden" }, { status: 403 });
  const { error } = await supabase
    .from("disputes")
    .update({ qbcc_escalated: true })
    .eq("id", dispute_id);
  if (error)
    return NextResponse.json({ error: error.message }, { status: 500 });
  return NextResponse.json({ message: "Dispute escalated to QBCC" });
}


--- ./src/app/api/disputes/route.ts ---

import { createServerClient } from "@/lib/supabase/server";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function POST(request: Request) {
  try {
    const { milestoneId, reason } = await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: milestone, error: milestoneError } = await supabase
      .from("milestones")
      .select("*, jobs!inner(client_id, tradie_id)")
      .eq("id", milestoneId)
      .single();

    if (milestoneError || !milestone) {
      return NextResponse.json(
        { error: "Milestone not found" },
        { status: 404 }
      );
    }

    if (
      ![milestone.jobs.client_id, milestone.jobs.tradie_id].includes(user.id)
    ) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 403 });
    }

    const { data: dispute, error: disputeError } = await supabase
      .from("disputes")
      .insert({
        milestone_id: milestoneId,
        job_id: milestone.job_id,
        reason,
        status: "pending",
        qbcc_escalated: false,
      })
      .select()
      .single();

    if (disputeError) throw new Error(disputeError.message);

    await supabase.from("notifications").insert([
      {
        user_id: milestone.jobs.client_id,
        message: `Dispute filed for milestone ${milestone.title}`,
        job_id: milestone.job_id,
      },
      {
        user_id: milestone.jobs.tradie_id,
        message: `Dispute filed for milestone ${milestone.title}`,
        job_id: milestone.job_id,
      },
    ]);

    return NextResponse.json(dispute);
  } catch (error) {
    console.error("Dispute error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


--- ./src/app/api/messages/route.ts ---

import { createServerClient } from "@/lib/supabase/server";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function POST(request: Request) {
  try {
    const { jobId, content, receiverId } = await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: job, error: jobError } = await supabase
      .from("jobs")
      .select("client_id, tradie_id")
      .eq("id", jobId)
      .single();

    if (jobError || !job)
      return NextResponse.json({ error: "Job not found" }, { status: 404 });

    if (
      ![job.client_id, job.tradie_id].includes(user.id) ||
      ![job.client_id, job.tradie_id].includes(receiverId)
    ) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 403 });
    }

    const { data: message, error: messageError } = await supabase
      .from("messages")
      .insert({
        sender_id: user.id,
        receiver_id: receiverId,
        content,
        job_id: jobId,
      })
      .select()
      .single();

    if (messageError) throw new Error(messageError.message);

    await supabase.from("notifications").insert({
      user_id: receiverId,
      message: `New message for job ${jobId}`,
      job_id: jobId,
    });

    return NextResponse.json(message);
  } catch (error) {
    console.error("Message error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


--- ./src/app/api/forum/route.ts ---

import { NextResponse } from "next/server";
import { supabase } from "@/lib/supabase";
export async function POST(request: Request) {
  const { user_id, title, content } = await request.json();
  const { data, error } = await supabase
    .from("forum_posts")
    .insert([{ user_id, title, content }])
    .select();
  if (error)
    return NextResponse.json({ error: error.message }, { status: 500 });
  return NextResponse.json(data);
}


--- ./src/app/api/commissions/route.ts ---

// src/app/api/commissions/route.js
import { supabase } from "../../../lib/supabase";
import { NextResponse } from "next/server";

// Get commissions for current user (via bookings)
export async function GET(request) {
  const {
    data: { user },
    error: authError,
  } = await supabase.auth.getUser();
  if (authError || !user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const { data, error } = await supabase
    .from("commissions")
    .select("id, source_type, source_id, amount, created_at")
    .eq("source_type", "booking")
    .in(
      "source_id",
      supabase.from("bookings").select("id").eq("user_id", user.id)
    );

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json(data);
}


--- ./src/app/api/analytics/route.ts ---

import { createServerClient } from "@/lib/supabase/server";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function GET(request: Request) {
  try {
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: analytics, error } = await supabase
      .from("analytics")
      .select("event_type, created_at, metadata")
      .eq("user_id", user.id)
      .order("created_at", { ascending: false })
      .limit(100);

    if (error) throw new Error(error.message);

    return NextResponse.json(analytics);
  } catch (error) {
    console.error("Analytics error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    const { event_type, metadata } = await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const validEventTypes = [
      "job_posted",
      "job_accepted",
      "milestone_paid",
      "milestone_verified",
      "payment_received",
      "dispute_filed",
      "premium_subscribed",
      "referral_sent",
    ];
    if (!validEventTypes.includes(event_type)) {
      return NextResponse.json(
        { error: "Invalid event type" },
        { status: 400 }
      );
    }

    const { error } = await supabase.from("analytics").insert({
      user_id: user.id,
      event_type,
      metadata,
    });

    if (error) throw new Error(error.message);

    return NextResponse.json({ message: "Event logged" });
  } catch (error) {
    console.error("Analytics post error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


--- ./src/app/api/badges/route.ts ---

// src/app/api/badges/route.js
import { supabase } from "../../../lib/supabase";
import { NextResponse } from "next/server";

// Get user's badges
export async function GET(request) {
  const {
    data: { user },
    error: authError,
  } = await supabase.auth.getUser();
  if (authError || !user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const { data, error } = await supabase
    .from("badges")
    .select("id, badge, earned_at")
    .eq("user_id", user.id);

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json(data);
}

// Award a badge (admin only, assumes profile role check)
export async function POST(request) {
  const {
    data: { user },
    error: authError,
  } = await supabase.auth.getUser();
  if (authError || !user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  // Check if user is admin (via profiles.role)
  const { data: profile, error: profileError } = await supabase
    .from("profiles")
    .select("role")
    .eq("id", user.id)
    .single();
  if (profileError || profile.role !== "admin") {
    return NextResponse.json({ error: "Forbidden" }, { status: 403 });
  }

  const { user_id, badge } = await request.json();
  if (!user_id || !badge) {
    return NextResponse.json(
      { error: "Missing user_id or badge" },
      { status: 400 }
    );
  }

  const { data, error } = await supabase
    .from("badges")
    .insert({
      user_id,
      badge,
      earned_at: new Date().toISOString(),
    })
    .select("id, badge, earned_at")
    .single();

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json(data);
}


--- ./src/app/api/bookings/route.ts ---

// src/app/api/bookings/route.js
import { supabase } from "../../../lib/supabase";
import { NextResponse } from "next/server";

// Get bookings for current user
export async function GET(request) {
  const {
    data: { user },
    error: authError,
  } = await supabase.auth.getUser();
  if (authError || !user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const { data, error } = await supabase
    .from("bookings")
    .select("id, job_description, location, status, commission, created_at")
    .eq("user_id", user.id);

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json(data);
}

// Create a booking
export async function POST(request) {
  const {
    data: { user },
    error: authError,
  } = await supabase.auth.getUser();
  if (authError || !user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const { job_description, location, job_cost, is_regional } =
    await request.json();
  if (!job_description || !location || !job_cost) {
    return NextResponse.json(
      { error: "Missing required fields" },
      { status: 400 }
    );
  }

  // Calculate commission: 3.33% of job_cost, capped at A$25 for regional jobs
  const commissionRate = 0.0333;
  let commission = job_cost * commissionRate;
  if (is_regional && commission > 25) {
    commission = 25;
  }

  const { data: booking, error: bookingError } = await supabase
    .from("bookings")
    .insert({
      user_id: user.id,
      job_description,
      location,
      status: "pending",
      commission,
      created_at: new Date().toISOString(),
    })
    .select("id, job_description, location, status, commission, created_at")
    .single();

  if (bookingError) {
    return NextResponse.json({ error: bookingError.message }, { status: 500 });
  }

  // Insert commission record
  const { error: commissionError } = await supabase.from("commissions").insert({
    id: crypto.randomUUID(),
    source_type: "booking",
    source_id: booking.id,
    amount: commission,
    created_at: new Date().toISOString(),
  });

  if (commissionError) {
    return NextResponse.json(
      { error: commissionError.message },
      { status: 500 }
    );
  }

  return NextResponse.json(booking);
}


--- ./src/app/api/subscribe/route.ts ---

import { stripe } from "@/lib/stripe";
import { supabase } from "@/lib/supabase/server";

export async function POST(req: Request) {
  const { userId, planType } = await req.json();
  const session = await stripe.checkout.sessions.create({
    customer: (
      await supabase
        .from("users")
        .select("stripe_customer_id")
        .eq("id", userId)
        .single()
    ).data.stripe_customer_id,
    mode: "subscription",
    line_items: [{ price: "price_xxx", quantity: 1 }],
    success_url: `${process.env.NEXT_PUBLIC_URL}/success`,
    cancel_url: `${process.env.NEXT_PUBLIC_URL}/cancel`,
  });
  await supabase
    .from("premium")
    .insert({
      user_id: userId,
      plan_type: planType,
      subscription_status: "active",
    });
  return NextResponse.json({ url: session.url });
}


--- ./src/app/marketing/(marketing)/dashboard/page.tsx ---

import { supabase } from "@/lib/ supabase ";
export default async function MarketingDashboard() {
  const { data: referrals } = await supabase
    .from("referrals ")
    .select("count ");
  const { data: posts } = await supabase.from("community ").select("count ");
  return (
    <div className=" container mx -auto p-4">
      <h1 className="text -2 xl">Marketing Dashboard </h1>
      <p> Referrals : {referrals[0].count || 0} </p>
      <p>Posts : {posts[0].count || 0} </p>
    </div>
  );
}


--- ./src/app/marketing/(marketing)/page.tsx ---

"use client";

import Link from "next/link";

export default function MarketingHome() {
  return (
    <div className="text-center space-y-6 py-12">
      <h1 className="text-5xl font-bold text-gray-900 dark:text-gray-100">
        Welcome to TradeMatey - Marketing Portal
      </h1>
      <p className="text-lg text-gray-600 dark:text-gray-400">
        Manage campaigns, referrals, and promotions.
      </p>
      <div className="space-x-4">
        <Link href="/marketing/dashboard">
          <button className="px-6 py-3 bg-orange-600 text-white rounded-md hover:bg-orange-700 transition-colors">
            Go to Dashboard
          </button>
        </Link>
      </div>
    </div>
  );
}


--- ./src/components/TradieCard.tsx ---

import Link from "next/link";
import { Tradie } from "@/lib/types";

export default function TradieCard({ tradie }: { tradie: Tradie }) {
  return (
    <div className="group relative overflow-hidden rounded-2xl bg-white shadow-lg transition-shadow hover:shadow-2xl dark:bg-gray-900">
      {/* Background effect */}
      <div className="absolute inset-0 bg-gradient-to-br from-blue-50 to-transparent opacity-0 transition-opacity group-hover:opacity-30 dark:from-gray-800" />

      <div className="relative z-10 p-6">
        <h3 className="text-2xl font-bold text-gray-900 dark:text-white">
          {tradie.name}
        </h3>
        <p className="mt-2 text-lg font-medium text-gray-600 dark:text-gray-400">
          {tradie.trade}
        </p>
        <p className="text-sm text-gray-500 dark:text-gray-400">
          📍 {tradie.location}
        </p>

        {tradie.top_tradie && (
          <span className="absolute top-2 right-2 bg-yellow-400 text-black text-xs px-2 py-1 rounded">
            Top Tradie
          </span>
        )}

        <Link
          href={`/tradies/${tradie.id}`}
          className="mt-4 inline-block w-full rounded-lg bg-blue-600 px-4 py-2 text-center text-white font-medium transition-transform transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:bg-blue-500"
        >
          View Profile →
        </Link>
      </div>
    </div>
  );
}


--- ./src/components/AvailablityForm.tsx ---

// src/components/AvailabilityForm.tsx
"use client";
import { useState } from "react";
import { supabase } from "@/lib/supabase/client";
import { toast } from "react-hot-toast";
export default function AvailabilityForm() {
  const [dates, setDates] = useState("");
  const handleSubmit = async (e) => {
    e.preventDefault();
    const res = await fetch("/api/availability", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ available_dates: JSON.parse(dates) }),
    });
    if (res.ok) toast.success("Availability updated!");
    else toast.error("Failed to update");
  };
  return (
    <form onSubmit={handleSubmit}>
      <textarea
        value={dates}
        onChange={(e) => setDates(e.target.value)}
        placeholder='{"dates": ["2025-06-05", "2025-06-06"]}'
      />
      <button type="submit">Update Availability</button>
    </form>
  );
}


--- ./src/components/BadgeList.tsx ---

// src/components/BadgeList.tsx
"use client";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";
export default function BadgeList() {
  const { data, error, isLoading } = useQuery({
    queryKey: ["badges"],
    queryFn: async () => {
      const res = await fetch("/api/badges");
      if (!res.ok) throw new Error("Failed to fetch badges");
      return res.json();
    },
  });
  if (isLoading) return <p>Loading...</p>;
  if (error) toast.error(error.message);
  return (
    <div>
      <h2>Your Badges</h2>
      {data.map((badge) => (
        <p key={badge.id}>
          {badge.badge} (Earned:{" "}
          {new Date(badge.earned_at).toLocaleDateString()})
        </p>
      ))}
    </div>
  );
}


--- ./src/components/ui/Card.tsx ---

"use client";
import { cn } from "@/lib/utils";
export function Card({
  children,
  className,
  ...props
}: {
  children: React.ReactNode;
  className?: string;
}) {
  return (
    <div
      className={cn("p-4 border rounded-md shadow-sm", className)}
      {...props}
    >
      {children}
    </div>
  );
}


--- ./src/components/ui/Chatbot.tsx ---

"use client";

import { useState } from "react";
import { Button } from "@/components/ui/Button";

export function Chatbot() {
  const [messages, setMessages] = useState<{ role: string; content: string }[]>(
    []
  );
  const [input, setInput] = useState("");

  const sendMessage = async () => {
    setMessages([...messages, { role: "user", content: input }]);
    const res = await fetch("/api/support", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ message: input }),
    });
    const { reply } = await res.json();
    setMessages([
      ...messages,
      { role: "user", content: input },
      { role: "bot", content: reply },
    ]);
    setInput("");
  };

  return (
    <div className="fixed bottom-4 right-4 w-80 bg-white dark:bg-gray-800 p-4 rounded-lg shadow-lg">
      <div className="max-h-64 overflow-y-auto space-y-2">
        {messages.map((msg, i) => (
          <div key={i} className={msg.role === "user" ? "text-right" : ""}>
            <p className="p-2 rounded bg-gray-100 dark:bg-gray-700">
              {msg.content}
            </p>
          </div>
        ))}
      </div>
      <div className="mt-2 flex">
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          className="flex-grow p-2 border rounded-l dark:bg-gray-700"
          placeholder="Ask a question..."
        />
        <Button onClick={sendMessage} className="rounded-l-none">
          Send
        </Button>
      </div>
    </div>
  );
}


--- ./src/components/ui/Button.tsx ---

"use client";

import { ButtonHTMLAttributes, forwardRef } from "react";

export type ButtonProps = ButtonHTMLAttributes<HTMLButtonElement> & {
  variant?: "default" | "outline" | "destructive";
  isLoading?: boolean;
};

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant = "default", isLoading, children, ...props }, ref) => {
    const baseStyles =
      "px-4 py-2 rounded-md font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50";
    const variantStyles = {
      default:
        "bg-indigo-600 text-white hover:bg-indigo-700 focus:ring-indigo-500",
      outline:
        "border border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-900 dark:text-gray-100",
      destructive: "bg-red-600 text-white hover:bg-red-700 focus:ring-red-500",
    };

    return (
      <button
        ref={ref}
        className={`${baseStyles} ${variantStyles[variant]} ${className} ${
          isLoading ? "opacity-75" : ""
        }`}
        disabled={isLoading}
        {...props}
      >
        {isLoading ? "Loading..." : children}
      </button>
    );
  }
);

Button.displayName = "Button";
export { Button };


--- ./src/components/Footer.tsx ---

import Link from "next/link";

export default function Footer() {
  return (
    <footer className="bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 py-6 mt-12">
      <div className="container mx-auto px-4 text-center">
        <p className="text-sm text-gray-600 dark:text-gray-400">
          © {new Date().getFullYear()} TradeMatey. All rights reserved. |{" "}
          <Link
            href="/privacy-policy"
            className="text-blue-600 dark:text-blue-400 hover:underline"
          >
            Privacy Policy
          </Link>{" "}
          |{" "}
          <Link
            href="/terms"
            className="text-blue-600 dark:text-blue-400 hover:underline"
          >
            Terms of Service
          </Link>
        </p>
      </div>
    </footer>
  );
}


--- ./src/components/Header.tsx ---

"use client";

import Link from "next/link";
import { useSession, signOut, getSession } from "next-auth/react";
import { useEffect, useState } from "react";
import { FaBars, FaTimes } from "react-icons/fa";
import { motion } from "framer-motion";

export default function Header() {
  const { data: session } = useSession();
  const [clientSession, setClientSession] = useState(session);
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  useEffect(() => {
    async function refreshSession() {
      const updatedSession = await getSession();
      setClientSession(updatedSession);
    }
    refreshSession();
  }, []);

  const dashboardLink = () => {
    if (!clientSession?.user?.role) return "/";
    switch (clientSession.user.role) {
      case "tradie":
        return "/tradie/dashboard";
      case "client":
        return "/client/dashboard";
      case "admin":
        return "/admin/dashboard";
      case "finance":
        return "/finance/dashboard";
      case "marketing":
        return "/marketing/dashboard";
      case "support":
        return "/support-group/dashboard";
      default:
        return "/";
    }
  };

  const profileLink = () => {
    if (!clientSession?.user?.role) return "/";
    switch (clientSession.user.role) {
      case "tradie":
        return "/tradie/profile";
      case "client":
        return "/client/settings";
      case "admin":
        return "/admin/settings";
      case "finance":
        return "/finance/settings";
      case "marketing":
        return "/marketing/settings";
      case "support":
        return "/support-group/settings";
      default:
        return "/";
    }
  };

  return (
    <header className="bg-gradient-to-r from-blue-800 to-blue-600 text-white shadow-lg sticky top-0 z-50">
      <nav className="container mx-auto flex justify-between items-center py-4 px-4 sm:px-6 lg:px-8">
        {/* Logo */}
        <Link
          href="/"
          className="flex items-center space-x-2"
          aria-label="TradeMatey Home"
        >
          <span className="text-2xl sm:text-3xl font-extrabold tracking-tight">
            TradeMatey
          </span>
        </Link>

        {/* Desktop Navigation */}
        <div className="hidden md:flex items-center space-x-6">
          <Link
            href="/client/browse-tradies"
            className="text-base hover:text-yellow-300 transition duration-300 ease-in-out"
            aria-label="Browse Tradies"
          >
            Browse Tradies
          </Link>
          <Link
            href="/client/post-job"
            className="text-base hover:text-yellow-300 transition duration-300 ease-in-out"
            aria-label="Post a Job"
          >
            Post a Job
          </Link>
          {clientSession ? (
            <div className="flex items-center space-x-4">
              <Link
                href={dashboardLink()}
                className="text-base hover:text-yellow-300 transition duration-300 ease-in-out"
                aria-label="Dashboard"
                aria-current={
                  window.location.pathname === dashboardLink()
                    ? "page"
                    : undefined
                }
              >
                Dashboard
              </Link>
              <Link
                href={profileLink()}
                className="text-base hover:text-yellow-300 transition duration-300 ease-in-out"
                aria-label="Profile"
                aria-current={
                  window.location.pathname === profileLink()
                    ? "page"
                    : undefined
                }
              >
                Profile
              </Link>
              <button
                onClick={() => signOut()}
                className="bg-red-500 text-white px-3 py-1.5 sm:px-4 sm:py-2 rounded-lg hover:bg-red-600 transition duration-300 ease-in-out transform hover:scale-105"
                aria-label="Sign Out"
              >
                Sign Out
              </button>
            </div>
          ) : (
            <div className="flex items-center space-x-4">
              <Link
                href="/client/login"
                className="text-base hover:text-yellow-300 transition duration-300 ease-in-out"
                aria-label="Client Login"
              >
                Client Login
              </Link>
              <Link
                href="/tradie/login"
                className="bg-yellow-400 text-blue-900 font-semibold px-3 py-1.5 sm:px-5 sm:py-2 rounded-lg shadow-md hover:bg-yellow-500 transition duration-300 ease-in-out transform hover:scale-105"
                aria-label="Tradie Login"
              >
                Tradie Login
              </Link>
            </div>
          )}
        </div>

        {/* Mobile Menu Button */}
        <div className="md:hidden flex items-center">
          <button
            onClick={() => setIsMenuOpen(!isMenuOpen)}
            className="text-white focus:outline-none focus:ring-2 focus:ring-yellow-400"
            aria-label={isMenuOpen ? "Close Menu" : "Open Menu"}
            aria-expanded={isMenuOpen}
          >
            {isMenuOpen ? <FaTimes size={24} /> : <FaBars size={24} />}
          </button>
        </div>

        {/* Mobile Menu */}
        {isMenuOpen && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            transition={{ duration: 0.3 }}
            className="md:hidden absolute top-16 right-4 w-48 bg-blue-700 rounded-lg shadow-lg p-4 space-y-4"
          >
            <Link
              href="/client/browse-tradies"
              className="block text-white hover:text-yellow-300 transition duration-300 ease-in-out"
              onClick={() => setIsMenuOpen(false)}
              aria-label="Browse Tradies"
            >
              Browse Tradies
            </Link>
            <Link
              href="/client/post-job"
              className="block text-white hover:text-yellow-300 transition duration-300 ease-in-out"
              onClick={() => setIsMenuOpen(false)}
              aria-label="Post a Job"
            >
              Post a Job
            </Link>
            {clientSession ? (
              <>
                <Link
                  href={dashboardLink()}
                  className="block text-white hover:text-yellow-300 transition duration-300 ease-in-out"
                  onClick={() => setIsMenuOpen(false)}
                  aria-label="Dashboard"
                  aria-current={
                    window.location.pathname === dashboardLink()
                      ? "page"
                      : undefined
                  }
                >
                  Dashboard
                </Link>
                <Link
                  href={profileLink()}
                  className="block text-white hover:text-yellow-300 transition duration-300 ease-in-out"
                  onClick={() => setIsMenuOpen(false)}
                  aria-label="Profile"
                  aria-current={
                    window.location.pathname === profileLink()
                      ? "page"
                      : undefined
                  }
                >
                  Profile
                </Link>
                <button
                  onClick={() => {
                    signOut();
                    setIsMenuOpen(false);
                  }}
                  className="w-full bg-red-500 text-white px-3 py-1.5 rounded-lg hover:bg-red-600 transition duration-300 ease-in-out"
                  aria-label="Sign Out"
                >
                  Sign Out
                </button>
              </>
            ) : (
              <>
                <Link
                  href="/client/login"
                  className="block text-white hover:text-yellow-300 transition duration-300 ease-in-out"
                  onClick={() => setIsMenuOpen(false)}
                  aria-label="Client Login"
                >
                  Client Login
                </Link>
                <Link
                  href="/tradie/login"
                  className="block bg-yellow-400 text-blue-900 font-semibold px-3 py-1.5 rounded-lg shadow-md hover:bg-yellow-500 transition duration-300 ease-in-out"
                  onClick={() => setIsMenuOpen(false)}
                  aria-label="Tradie Login"
                >
                  Tradie Login
                </Link>
              </>
            )}
          </motion.div>
        )}
      </nav>
    </header>
  );
}


--- ./src/components/Providers.tsx ---

// ./src/components/Providers.tsx
"use client";

import { SessionProvider } from "next-auth/react";
import { createContext, useContext, ReactNode, useState } from "react";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query"; // Add imports

// Create a QueryClient instance
const queryClient = new QueryClient();

// Job Context
interface JobContextType {
  jobs: any[];
  addJob: (job: any) => void;
  updateJob: (jobId: string, updates: any) => void;
}

const JobContext = createContext<JobContextType | undefined>(undefined);

export function JobProvider({ children }: { children: ReactNode }) {
  const [jobs, setJobs] = useState<any[]>([]);

  const addJob = (job: any) => {
    setJobs((prevJobs) => [...prevJobs, job]);
  };

  const updateJob = (jobId: string, updates: any) => {
    setJobs((prevJobs) =>
      prevJobs.map((job) => (job.id === jobId ? { ...job, ...updates } : job))
    );
  };

  return (
    <JobContext.Provider value={{ jobs, addJob, updateJob }}>
      {children}
    </JobContext.Provider>
  );
}

export function useJobs() {
  const context = useContext(JobContext);
  if (!context) throw new Error("useJobs must be used within a JobProvider");
  return context;
}

// Combined Providers
interface ProvidersProps {
  children: ReactNode;
}

export function Providers({ children }: ProvidersProps) {
  return (
    <SessionProvider>
      <QueryClientProvider client={queryClient}>
        {" "}
        {/* Add QueryClientProvider */}
        <JobProvider>{children}</JobProvider>
      </QueryClientProvider>
    </SessionProvider>
  );
}


--- ./src/components/shared/notifications.tsx ---

"use client";

import { useEffect, useState } from "react";
import { supabase } from "@/lib/supabase/client";
import { toast } from "react-hot-toast";
import { Button } from "@/components/ui";

export function Notifications({ userId }: { userId: string }) {
  const [notifications, setNotifications] = useState<any[]>([]);

  useEffect(() => {
    const fetchNotifications = async () => {
      const { data } = await supabase
        .from("notifications")
        .select("*")
        .eq("user_id", userId)
        .eq("is_read", false);
      setNotifications(data || []);
    };
    fetchNotifications();

    const channel = supabase
      .channel("notifications")
      .on(
        "postgres_changes",
        {
          event: "INSERT",
          schema: "public",
          table: "notifications",
          filter: `user_id=eq.${userId}`,
        },
        (payload) => {
          setNotifications((prev) => [...prev, payload.new]);
          toast.success(payload.new.message);
        }
      )
      .subscribe();
    return () => supabase.removeChannel(channel);
  }, [userId]);

  const markAsRead = async (notificationId: string) => {
    await supabase
      .from("notifications")
      .update({ is_read: true })
      .eq("id", notificationId);
    setNotifications(notifications.filter((n) => n.id !== notificationId));
  };

  return (
    <div className="p-4">
      {notifications.map((notification) => (
        <div
          key={notification.id}
          className="p-2 border-b flex justify-between"
        >
          <p>{notification.message}</p>
          <Button onClick={() => markAsRead(notification.id)} variant="outline">
            Mark as Read
          </Button>
        </div>
      ))}
    </div>
  );
}


--- ./src/components/shared/messages.tsx ---

"use client";

import { useEffect, useState } from "react";
import { supabase } from "@/lib/supabase/client";
import { Button } from "@/components/ui";

export function Messages({ userId, jobId }: { userId: string; jobId: string }) {
  const [messages, setMessages] = useState<any[]>([]);
  const [newMessage, setNewMessage] = useState("");

  useEffect(() => {
    const fetchMessages = async () => {
      const { data, error } = await supabase
        .from("messages")
        .select(
          "*, sender:users!sender_id(name), receiver:users!receiver_id(name)"
        )
        .eq("job_id", jobId);
      if (!error) setMessages(data || []);
    };
    fetchMessages();

    const channel = supabase
      .channel("messages")
      .on(
        "postgres_changes",
        {
          event: "INSERT",
          schema: "public",
          table: "messages",
          filter: `job_id=eq.${jobId}`,
        },
        (payload) => setMessages((prev) => [...prev, payload.new])
      )
      .subscribe();
    return () => supabase.removeChannel(channel);
  }, [jobId]);

  const sendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    const { data: job } = await supabase
      .from("jobs")
      .select("client_id, tradie_id")
      .eq("id", jobId)
      .single();
    const receiverId = userId === job.client_id ? job.tradie_id : job.client_id;
    const { error } = await supabase.from("messages").insert([
      {
        sender_id: userId,
        receiver_id: receiverId,
        content: newMessage,
        job_id: jobId,
      },
    ]);
    if (!error) setNewMessage("");
    else toast.error("Failed to send message");
  };

  return (
    <div className="p-4">
      <div className="space-y-2 max-h-96 overflow-y-auto">
        {messages.map((msg) => (
          <div key={msg.id} className="p-2 border-b">
            <p className="font-semibold">{msg.sender.name}:</p>
            <p>{msg.content}</p>
            <p className="text-sm text-gray-500">
              {new Date(msg.created_at).toLocaleString()}
            </p>
          </div>
        ))}
      </div>
      <form onSubmit={sendMessage} className="mt-4 flex space-x-2">
        <input
          type="text"
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          className="flex-grow p-2 border rounded"
          placeholder="Type a message..."
          required
        />
        <Button type="submit">Send</Button>
      </form>
    </div>
  );
}


--- ./src/components/BookingForm.tsx ---

// src/components/BookingForm.tsx
"use client";
import { useState } from "react";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { toast } from "react-hot-toast";
export default function BookingForm() {
  const { data: session } = useSession();
  const [form, setForm] = useState({
    job_description: "",
    location: "",
    job_cost: "",
    is_regional: false,
  });
  const router = useRouter();
  const handleSubmit = async (e) => {
    e.preventDefault();
    const res = await fetch("/api/bookings", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ ...form, job_cost: Number(form.job_cost) }),
    });
    if (res.ok) {
      toast.success("Booking created!");
      router.push("/client/dashboard");
    } else toast.error("Failed to book");
  };
  if (!session) return <p>Please sign in to book</p>;
  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <label>Job Description</label>
        <textarea
          value={form.job_description}
          onChange={(e) =>
            setForm({ ...form, job_description: e.target.value })
          }
          className="w-full p-2 border rounded"
          required
        />
      </div>
      <div>
        <label>Location</label>
        <input
          type="text"
          value={form.location}
          onChange={(e) => setForm({ ...form, location: e.target.value })}
          className="w-full p-2 border rounded"
          required
        />
      </div>
      <div>
        <label>Job Cost (A$)</label>
        <input
          type="number"
          value={form.job_cost}
          onChange={(e) => setForm({ ...form, job_cost: e.target.value })}
          className="w-full p-2 border rounded"
          required
        />
      </div>
      <div>
        <label>
          <input
            type="checkbox"
            checked={form.is_regional}
            onChange={(e) =>
              setForm({ ...form, is_regional: e.target.checked })
            }
          />
          Regional Queensland (A$25 commission cap)
        </label>
      </div>
      <button
        type="submit"
        className="bg-blue-600 text-white px-4 py-2 rounded"
      >
        Submit
      </button>
    </form>
  );
}


--- ./src/types/index.ts ---

export interface User {
  id: string;
  email: string;
  role: "client" | "tradie";
}

export type UserRole =
  | "admin"
  | "marketing"
  | "finance"
  | "support"
  | "employee";
export type ProfileRole = "client" | "tradie";

export interface Database {
  public: {
    Tables: {
      users: {
        Row: {
          id: string;
          email: string | null;
          roles: UserRole[];
          completed_jobs: number;
          average_rating: number;
          top_tradie: boolean;
          referral_credits: number;
          region: string | null;
          first_job_free: boolean;
          has_completed_onboarding: boolean;
          stripe_customer_id: string | null;
          payment_method_id: string | null;
          stripe_account_id: string | null;
          license_path: string | null;
          trade: string | null;
          location: string | null;
          bio: string | null;
        };
        Insert: {
          id: string;
          email?: string | null;
          roles?: UserRole[];
          completed_jobs?: number;
          average_rating?: number;
          top_tradie?: boolean;
          referral_credits?: number;
          region?: string | null;
          first_job_free?: boolean;
          has_completed_onboarding?: boolean;
          stripe_customer_id?: string | null;
          payment_method_id?: string | null;
          stripe_account_id?: string | null;
          license_path?: string | null;
          trade?: string | null;
          location?: string | null;
          bio?: string | null;
        };
        Update: {
          id?: string;
          email?: string | null;
          roles?: UserRole[];
          completed_jobs?: number;
          average_rating?: number;
          top_tradie?: boolean;
          referral_credits?: number;
          region?: string | null;
          first_job_free?: boolean;
          has_completed_onboarding?: boolean;
          stripe_customer_id?: string | null;
          payment_method_id?: string | null;
          stripe_account_id?: string | null;
          license_path?: string | null;
          trade?: string | null;
          location?: string | null;
          bio?: string | null;
        };
      };
      profiles: {
        Row: {
          id: string;
          role: ProfileRole;
          created_at: string;
        };
        Insert: {
          id: string;
          role?: ProfileRole;
          created_at?: string;
        };
        Update: {
          id?: string;
          role?: ProfileRole;
          created_at?: string;
        };
      };
    };
    Functions: {
      assign_user_role: {
        Args: {
          user_id: string;
          new_roles: string[];
        };
        Returns: void;
      };
    };
  };
}


--- ./src/service-worker.ts ---

self.addEventListener("fetch", (event) => {
  event.respondWith(
    caches.match(event.request).then((response) => {
      return response || fetch(event.request);
    })
  );
});


--- ./src/lib/supabase/server.ts ---

import { createServerClient } from "@supabase/ssr";
import { cookies } from "next/headers";

export const createClient = () => {
  const cookieStore = cookies();
  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll();
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            );
          } catch {
            // Ignore errors in Server Components
          }
        },
      },
    }
  );
};


--- ./src/lib/supabase/client.ts ---

import { createBrowserClient } from "@supabase/ssr";

export const createClient = () =>
  createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  );


--- ./src/lib/supabase/functions/stripe-payment.ts ---

import Stripe from "stripe";
import { createClient } from "@/lib/supabase/server";

const stripe = new Stripe(Deno.env.get("STRIPE_SECRET_KEY")!);
const supabase = createClient();

export async function handler(req: Request) {
  const { amount, client_id, milestone_id } = await req.json();
  const { data: milestone } = await supabase
    .from("milestones")
    .select("*, jobs!inner(region)")
    .eq("id", milestone_id)
    .single();

  const commission =
    milestone.jobs.region === "Regional"
      ? Math.min(amount * 0.0333, 25)
      : amount * 0.0333;

  const paymentIntent = await stripe.paymentIntents.create({
    amount: Math.round((amount + commission) * 100),
    currency: "aud",
    metadata: { client_id, milestone_id },
  });

  await supabase.from("payments").insert({
    milestone_id,
    client_id,
    amount,
    status: "pending",
    payment_intent_id: paymentIntent.id,
  });

  return new Response(
    JSON.stringify({ clientSecret: paymentIntent.client_secret })
  );
}


--- ./src/lib/supabase/functions/escrow-payment.ts ---

// src/lib/supabase/functions/escrow-payment.ts
import Stripe from "stripe";
import { createClient } from "@/lib/supabase/server";
const stripe = new Stripe(Deno.env.get("STRIPE_SECRET_KEY"));
const supabase = createClient();
export async function handler(req) {
  const { booking_id, client_id, amount, is_regional } = await req.json();
  const commissionRate = 0.0333;
  let commission = amount * commissionRate;
  if (is_regional) commission = Math.min(commission, 25);
  const paymentIntent = await stripe.paymentIntents.create({
    amount: Math.round((amount + commission) * 100),
    currency: "aud",
    metadata: { booking_id, client_id, commission: commission.toString() },
  });
  const { error } = await supabase.from("payments").insert({
    booking_id,
    client_id,
    amount,
    status: "held",
    payment_intent_id: paymentIntent.id,
  });
  if (error) throw new Error(error.message);
  return new Response(
    JSON.stringify({ clientSecret: paymentIntent.client_secret })
  );
}


--- ./src/lib/supabase/functions/sync-quickbook.ts ---

import { supabase } from "./ lib/ supabase ";
import { QuickBooks } from "quickbooks ";
export default async (req: Request) => {
  const { data: payments } = await supabase
    .from("payments ")
    .select("amount , status ");
  const qb = new QuickBooks({ consumerKey: "", consumerSecret: "" });
  payments.forEach((p) =>
    qb.createInvoice({ amount: p.amount, status: p.status })
  );
  return new Response(JSON.stringify({ success: true }));
};


--- ./src/lib/supabase/functions/match-tradies.ts ---

import { supabase } from './lib/supabase';

export async function handler(req: Request) {
  const { job_id } = await req.json();

  const { data: job } = await supabase
    .from('jobs')
    .select('description, location')
    .eq('id', job_id)
    .single();

  if (!job) {
    return new Response(JSON.stringify({ success: false, error: 'Job not found' }), { status: 404 });
  }

  const { data: tradies } = await supabase
    .from('tradies')
    .select('id, skills, location, ratings, availability(available_dates)')
    .ilike('skills', `%${job.description}%`)
    .eq('location', job.location);

  if (!tradies) {
    return new Response(JSON.stringify({ success: false, error: 'No tradies found' }), { status: 404 });
  }

  const matchedTradies = tradies.filter((tradie) => {
    const skillMatch = tradie.skills?.some((skill: string) =>
      job.description.toLowerCase().includes(skill.toLowerCase())
    );
    const locationMatch = calculateDistance(tradie.location, job.location) < 50;
    return skillMatch && locationMatch && tradie.ratings >= 4;
  });

  await supabase
    .from('jobs')
    .update({ matched_tradies: matchedTradies })
    .eq('id', job_id);

  return new Response(JSON.stringify({ success: true, matchedCount: matchedTradies.length }));
}

// Dummy function: replace with your actual distance calc
function calculateDistance(l


--- ./src/lib/supabase/functions/sync-hubspot.ts ---

import { supabase } from "./ lib/ supabase ";
import { HubSpot } from "hubspot -api ";
export default async (req: Request) => {
  const { data: users } = await supabase.from("users ").select("email , role ");
  const hubspot = new HubSpot({ apiKey: "" });
  users.forEach((u) =>
    hubspot.contacts.create({ email: u.email, properties: { role: u.role } })
  );
  return new Response(JSON.stringify({ success: true }));
};


--- ./src/lib/supabase/functions/milestone-payment.ts ---

import Stripe from "stripe";
import { createClient } from "@/lib/supabase/server";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: "2024-04-10",
});
const supabase = createClient();

export async function processMilestonePayment(milestoneId: string) {
  try {
    // Fetch milestone and related job
    const { data: milestone, error: milestoneError } = await supabase
      .from("milestones")
      .select("*, job:jobs(client_id, region)")
      .eq("id", milestoneId)
      .single();
    if (milestoneError || !milestone) {
      throw new Error("Milestone not found");
    }

    // Fetch client payment details
    const { data: client, error: clientError } = await supabase
      .from("users")
      .select("stripe_customer_id, payment_method_id")
      .eq("id", milestone.job.client_id)
      .single();
    if (clientError || !client) {
      throw new Error("Client not found");
    }

    // Calculate commission (3.33%, capped at A$25 in regional Queensland)
    const commissionRate = 0.0333;
    let commission = milestone.amount * commissionRate;
    if (milestone.job.region === "Regional") {
      commission = Math.min(commission, 25); // A$25 cap
    }

    // Create payment intent
    const paymentIntent = await stripe.paymentIntents.create({
      amount: Math.round((milestone.amount + commission) * 100), // Convert to cents
      currency: "aud", // Use AUD for Queensland
      customer: client.stripe_customer_id,
      payment_method: client.payment_method_id,
      off_session: true,
      confirm: true,
      description: `Milestone: ${milestone.title} (Job: ${milestone.job_id})`,
      metadata: {
        milestone_id: milestoneId,
        commission: commission.toFixed(2),
        region: milestone.job.region,
      },
    });

    // Update milestone status
    const { error: updateError } = await supabase
      .from("milestones")
      .update({
        status: "paid",
        commission,
        payment_intent_id: paymentIntent.id,
        updated_at: new Date().toISOString(),
      })
      .eq("id", milestoneId);
    if (updateError) {
      throw new Error("Failed to update milestone");
    }

    // Notify client and tradie
    const { data: users } = await supabase
      .from("jobs")
      .select("client_id, tradie_id")
      .eq("id", milestone.job_id)
      .single();
    await supabase.from("notifications").insert([
      {
        user_id: users.client_id,
        message: `Milestone "${milestone.title}" paid (A$${
          milestone.amount
        }, commission A$${commission.toFixed(2)})`,
        job_id: milestone.job_id,
      },
      {
        user_id: users.tradie_id,
        message: `Milestone "${milestone.title}" paid (A$${milestone.amount})`,
        job_id: milestone.job_id,
      },
    ]);

    return { success: true, paymentIntent };
  } catch (error) {
    console.error("Payment error:", error);
    await supabase.from("notifications").insert({
      user_id: (await supabase.auth.getUser()).data.user!.id,
      message: `Payment failed for milestone ${milestoneId}: ${error.message}`,
      job_id: milestone?.job_id,
    });
    return { success: false, error: error.message };
  }
}


--- ./src/lib/auth.tsx ---

import { NextAuthOptions } from "next-auth";
import Credentials from "next-auth/providers/credentials";
import GoogleProvider from "next-auth/providers/google";
import { SupabaseAdapter } from "@auth/supabase-adapter";
import { createClient } from "@/lib/supabase/server";

export const authOptions: NextAuthOptions = {
  adapter: SupabaseAdapter({
    url: process.env.NEXT_PUBLIC_SUPABASE_URL!,
    secret: process.env.SUPABASE_SERVICE_ROLE_KEY!,
  }),
  providers: [
    CredentialsProvider({
      async authorize(credentials) {
        const supabase = createClient();
        const { data, error } = await supabase.auth.signInWithPassword({
          email: credentials?.email || "",
          password: credentials?.password || "",
        });
        if (error || !data.user) return null;
        const { data: userData } = await supabase
          .from("users")
          .select("id, email, roles, has_completed_onboarding, profiles(role)")
          .eq("id", data.user.id)
          .single();
        return {
          id: userData.id,
          email: userData.email,
          roles: userData.roles,
          profile_role: userData.profiles.role,
          has_completed_onboarding: userData.has_completed_onboarding ?? false,
        };
      },
    }),
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
  ],
  callbacks: {
    async session({ session, user }) {
      const supabase = createClient();
      const { data: factors } = await supabase.auth.mfa.listFactors({
        userId: user.id,
      });
      session.user.mfa_enabled = factors?.totp.length > 0;
      session.user.roles = user.roles;
      session.user.profile_role = user.profile_role;
      return session;
    },
    async redirect({ baseUrl, user }) {
      if (!user.has_completed_onboarding) {
        return user.profile_role === "tradie"
          ? `${baseUrl}/tradie/onboarding`
          : `${baseUrl}/client/onboarding`;
      }
      return user.roles.includes("admin")
        ? `${baseUrl}/admin/dashboard`
        : user.roles.includes("marketing")
        ? `${baseUrl}/marketing/dashboard`
        : user.roles.includes("finance")
        ? `${baseUrl}/finance/dashboard`
        : user.roles.includes("support")
        ? `${baseUrl}/support-group/dashboard`
        : user.profile_role === "tradie"
        ? `${baseUrl}/tradie/dashboard`
        : `${baseUrl}/client/dashboard`;
    },
  },
};


--- ./src/lib/supabase.ts ---

import { createClient } from "@supabase/supabase-js";
import { Database } from "./types";

export const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);


--- ./src/lib/types.ts ---

export interface Tradie {
  id: string;
  name: string;
  trade: string;
  location: string;
  bio: string;
  user_id?: string; // Optional, added for auth
}

export interface User {
  id: string;
  email: string;
  role: "client" | "tradie";
}

export type UserRole =
  | "admin"
  | "marketing"
  | "finance"
  | "support"
  | "employee";
export type ProfileRole = "client" | "tradie";

export interface Database {
  public: {
    Tables: {
      users: {
        Row: {
          id: string;
          email: string | null;
          roles: UserRole[];
          completed_jobs: number;
          average_rating: number;
          top_tradie: boolean;
          referral_credits: number;
          region: string | null;
          first_job_free: boolean;
          has_completed_onboarding: boolean;
          stripe_customer_id: string | null;
          payment_method_id: string | null;
          stripe_account_id: string | null;
          license_path: string | null;
          trade: string | null;
          location: string | null;
          bio: string | null;
        };
        Insert: {
          id: string;
          email?: string | null;
          roles?: UserRole[];
          completed_jobs?: number;
          average_rating?: number;
          top_tradie?: boolean;
          referral_credits?: number;
          region?: string | null;
          first_job_free?: boolean;
          has_completed_onboarding?: boolean;
          stripe_customer_id?: string | null;
          payment_method_id?: string | null;
          stripe_account_id?: string | null;
          license_path?: string | null;
          trade?: string | null;
          location?: string | null;
          bio?: string | null;
        };
        Update: {
          id?: string;
          email?: string | null;
          roles?: UserRole[];
          completed_jobs?: number;
          average_rating?: number;
          top_tradie?: boolean;
          referral_credits?: number;
          region?: string | null;
          first_job_free?: boolean;
          has_completed_onboarding?: boolean;
          stripe_customer_id?: string | null;
          payment_method_id?: string | null;
          stripe_account_id?: string | null;
          license_path?: string | null;
          trade?: string | null;
          location?: string | null;
          bio?: string | null;
        };
      };
      profiles: {
        Row: {
          id: string;
          role: ProfileRole;
          created_at: string;
        };
        Insert: {
          id: string;
          role?: ProfileRole;
          created_at?: string;
        };
        Update: {
          id?: string;
          role?: ProfileRole;
          created_at?: string;
        };
      };
    };
    Functions: {
      assign_user_role: {
        Args: {
          user_id: string;
          new_roles: string[];
        };
        Returns: void;
      };
    };
  };
}

export interface Post {
  id: string;
  title: string;
  content: string;
  created_at: string;
  user_id: string;
  users: { name: string };
}

export interface Analytics {
  totalJobs: number;
  completionRate: number;
  newUsers: number;
}

export interface Dispute {
  id: string;
  title: string;
  jobs: { title: string };
  qbcc_dispute: boolean;
}

export interface Job {
  id: string;
  title: string;
  status: string;
  milestones: Milestone[];
  region: string;
}

export interface Milestone {
  id: string;
  title: string;
  status: string;
  amount: number;
  commission?: number;
}


--- ./src/lib/utils.ts ---

// ./src/lib/utils.ts
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

console.log("utils.ts loaded"); // Debug log
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}


--- ./src/app/community/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";
import { useAuth } from "@/context/AuthContext";
import { Post } from "@/types";

export default function Community() {
  const { user } = useAuth();
  const [posts, setPosts] = useState<Post[]>([]);
  const [newPost, setNewPost] = useState({ title: "", content: "" });

  const { data, error, isLoading } = useQuery({
    queryKey: ["community"],
    queryFn: async () => {
      const res = await fetch("/api/ForumPost");
      if (!res.ok) throw new Error("Failed to fetch posts");
      return res.json();
    },
  });

  useEffect(() => {
    if (data) setPosts(data);
    if (error) toast.error(error.message);
  }, [data, error]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const res = await fetch("/api/ForumPost", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ user_id: user?.id, ...newPost }),
    });
    if (res.ok) {
      toast.success("Post created!");
      const post = await res.json();
      setPosts([post, ...posts]);
      setNewPost({ title: "", content: "" });
    } else {
      toast.error("Failed to create post");
    }
  };

  if (isLoading) return <div className="text-center py-10">Loading...</div>;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Community Forum
      </h1>
      <form
        onSubmit={handleSubmit}
        className="space-y-4 p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg"
      >
        <input
          type="text"
          placeholder="Post Title"
          value={newPost.title}
          onChange={(e) => setNewPost({ ...newPost, title: e.target.value })}
          className="w-full rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
        />
        <textarea
          placeholder="Post Content"
          value={newPost.content}
          onChange={(e) => setNewPost({ ...newPost, content: e.target.value })}
          className="w-full rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
        />
        <button
          type="submit"
          className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700"
        >
          Create Post
        </button>
      </form>
      <div className="space-y-4">
        {posts.map((post) => (
          <div
            key={post.id}
            className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg"
          >
            <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">
              {post.title}
            </h2>
            <p className="text-gray-600 dark:text-gray-400 mt-2">
              {post.content}
            </p>
            <p className="text-sm text-gray-500 dark:text-gray-500 mt-1">
              Posted by {post.users.name} on{" "}
              {new Date(post.created_at).toLocaleString()}
            </p>
          </div>
        ))}
      </div>
    </div>
  );
}


--- ./src/app/admin/(admin)/assign-roles/route.ts ---

import { NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/server";
import { cookies } from "next/headers";

export async function POST(request: Request) {
  try {
    const { user_id, new_roles } = await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { error } = await supabase.rpc("assign_user_role", {
      user_id: user_id,
      new_roles: new_roles,
    });

    if (error) throw new Error(error.message);

    return NextResponse.json({ message: "Roles assigned successfully" });
  } catch (error: any) {
    console.error("Role assignment error:", error);
    return NextResponse.json(
      { error: error.message || "Internal server error" },
      { status: 500 }
    );
  }
}


--- ./src/app/admin/(admin)/assign-roles/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui";
import { toast } from "react-hot-toast";
import { useRouter } from "next/navigation";
import { supabase } from "@/lib/supabase/client";
import { loadStripe } from "@stripe/stripe-js";
import {
  Elements,
  CardElement,
  useStripe,
  useElements,
} from "@stripe/stripe-js";
import Link from "next/link";

const stripePromise = loadStripe(
  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!
);

function PaymentForm({ onSuccess }: { onSuccess: () => void }) {
  const stripe = useStripe();
  const elements = useElements();
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    const {
      data: { user },
    } = await supabase.auth.getUser();
    const res = await fetch("/api/payments/setup", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ user_id: user!.id }),
    });
    const { clientSecret } = await res.json();
    const { error, setupIntent } = await stripe!.confirmCardSetup(
      clientSecret,
      {
        payment_method: { card: elements!.getElement(CardElement)! },
      }
    );
    if (error) {
      toast.error(error.message!);
    } else {
      await supabase
        .from("users")
        .update({ payment_method_id: setupIntent!.payment_method })
        .eq("id", user!.id);
      toast.success("Payment method added!");
      onSuccess();
    }
    setLoading(false);
  };

  return (
    <form onSubmit={handleSubmit}>
      <CardElement />
      <Button type="submit" disabled={loading} className="mt-2 w-full">
        {loading ? "Processing..." : "Add Payment Method"}
      </Button>
    </form>
  );
}

export default function Onboarding() {
  const [step, setStep] = useState(1);
  const [form, setForm] = useState({
    name: "",
    email: "",
    region: "",
    trade: "",
    bio: "",
    paymentMethod: "",
  });
  const router = useRouter();

  useEffect(() => {
    const fetchUser = async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      const { data } = await supabase
        .from("users")
        .select("email, region, trade, bio")
        .eq("id", user!.id)
        .single();
      setForm((prev) => ({
        ...prev,
        email: data?.email || user?.email || "",
        region: data?.region || "",
        trade: data?.trade || "",
        bio: data?.bio || "",
      }));
    };
    fetchUser();
  }, []);

  const handleNext = async () => {
    if (step < 4) setStep(step + 1);
    else {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      const { error: profileError } = await supabase
        .from("profiles")
        .update({ role: 'tradie' })
        .eq("id", user!.id);
      const { error: userError } = await supabase
        .from("users")
        .update({
          name: form.name,
          region: form.region,
          trade: form.trade,
          bio: form.bio,
          has_completed_onboarding: true,
          roles: ['employee'],
        })
        .eq("id", user!.id);
      if (profileError || userError) {
        toast.error("Failed to save profile");
      } else {
        await supabase.from("badges").insert([
          {
            user_id: user!.id,
            badge: "Welcome Aboard",
            earned_at: new Date().toISOString(),
          },
        ]);
        await supabase.from("notifications").insert({
          user_id: user!.id,
          message: "You earned the 'Welcome Aboard' badge!",
        });
        toast.success("Onboarding completed!");
        router.push("/tradie/dashboard");
      }
    }
  };

  return (
    <div className="max-w-md mx-auto p-6 space-y-6">
      <h1 className="text-3xl font-bold">Welcome to TradeMatey</h1>
      {step === 1 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 1: Watch Intro</h2>
          <video src="/intro.mp4" controls className="w-full rounded" />
          <p>
            Secure milestone payments with 3.33% commission and QBCC-compliant
            14+14 day timelines.
          </p>
        </div>
      )}
      {step === 2 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 2: Personal Info</h2>
          <input
            type="text"
            placeholder="Name"
            value={form.name}
            onChange={(e) => setForm({ ...form, name: e.target.value })}
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
            required
          />
          <input
            type="email"
            placeholder="Email"
            value={form.email}
            disabled
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
          />
          <select
            value={form.region}
            onChange={(e) => setForm({ ...form, region: e.target.value })}
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
            required
          >
            <option value="">Select Region</option>
            <option value="Regional">Regional Queensland</option>
            <option value="Metro">Metro Queensland</option>
          </select>
          <input
            type="text"
            placeholder="Trade (e.g., Plumber)"
            value={form.trade}
            onChange={(e) => setForm({ ...form, trade: e.target.value })}
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
            required
          />
          <textarea
            placeholder="Bio"
            value={form.bio}
            onChange={(e) => setForm({ ...form, bio: e.target.value })}
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
          />
        </div>
      )}
      {step === 3 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 3: Payment Method</h2>
          <Elements stripe={stripePromise}>
            <PaymentForm
              onSuccess={() =>
                setForm({ ...form, interim payment_method: 'Card Added' })
              } />
          </Elements>
          <p className="text-sm text-gray-600">
            3.33% commission per milestone (
            {form.region === "Regional" ? "capped at A$25" : "no cap"}).
          </p>
        </div>
      )}
      {step === 4 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 4: Confirmation</h2>
          <p>Name: {form.name}</p>
          <p>Email: {form.email}</p>
          <p>Region: {form.region}</p>
          <p>Trade: {form.trade}</p>
          <p>Bio: {form.bio}</p>
          <p>Payment Method: {form.paymentMethod}</p>
          <div className="mt-4 p-4 bg-blue-100 rounded">
            <p className="font-bold">Go Premium for A$99/year!</p>
            <p>Enjoy 1.67% commission and priority job matching.</p>
            <Link href="/premium">
              <Button>Learn More</Button>
            </Link>
          </div>
        </div>
      )}
      <Button onClick={handleNext} className="w-full">
        {step === 4 ? "Finish" : "Next"}
      </Button>
    </div>
  );
}

--- ./src/app/admin/(admin)/dashboard/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";
import { Analytics } from "@/types";

export default function AdminDashboard() {
  const [analytics, setAnalytics] = useState<Analytics | null>(null);

  const { data, error, isLoading } = useQuery<Analytics | null>({
    queryKey: ["analytics"],
    queryFn: async () => {
      const res = await fetch("/api/analytics");
      if (!res.ok) throw new Error("Failed to fetch analytics");
      return res.json();
    },
  });

  useEffect(() => {
    if (data) setAnalytics(data);
    if (error) toast.error(error.message);
  }, [data, error]);

  if (isLoading) return <div className="text-center py-10">Loading...</div>;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Admin Dashboard
      </h1>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
          <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">
            Total Jobs
          </h2>
          <p className="text-3xl font-bold text-gray-900 dark:text-gray-100 mt-2">
            {analytics.totalJobs}
          </p>
        </div>
        <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
          <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">
            Completion Rate
          </h2>
          <p className="text-3xl font-bold text-gray-900 dark:text-gray-100 mt-2">
            {analytics.completionRate}%
          </p>
        </div>
        <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
          <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">
            New Users (30d)
          </h2>
          <p className="text-3xl font-bold text-gray-900 dark:text-gray-100 mt-2">
            {analytics.newUsers}
          </p>
        </div>
      </div>
    </div>
  );
}


--- ./src/app/admin/(admin)/page.tsx ---

"use client";

import Link from "next/link";

export default function AdminHome() {
  return (
    <div className="text-center space-y-6 py-12">
      <h1 className="text-5xl font-bold text-gray-900 dark:text-gray-100">
        Welcome to TradeMatey - Admin Portal
      </h1>
      <p className="text-lg text-gray-600 dark:text-gray-400">
        Manage users, disputes, and platform settings.
      </p>
      <div className="space-x-4">
        <Link href="/admin/dashboard">
          <button className="px-6 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
            Go to Dashboard
          </button>
        </Link>
      </div>
    </div>
  );
}


--- ./src/app/support/route.ts ---

import { NextResponse } from "next/server";

export async function POST(request: Request) {
  try {
    const { message } = await request.json();
    // Placeholder response
    const reply = `You asked: "${message}". How can I assist you further?`;
    // Optional: Integrate with xAI Grok API
    /*
    const grokResponse = await fetch("https://api.x.ai/v1/grok", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${process.env.GROK_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ prompt: message }),
    });
    const { reply } = await grokResponse.json();
    */
    return NextResponse.json({ reply });
  } catch (error: any) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}


--- ./src/app/support/page.tsx ---

"use client";

import { useState } from "react";
import { toast } from "react-hot-toast";

export default function Support() {
  const [form, setForm] = useState({ name: "", email: "", message: "" });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    // Placeholder for support ticket submission
    toast.success("Support request sent!");
    setForm({ name: "", email: "", message: "" });
  };

  return (
    <div className="max-w-md mx-auto p-6 space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Support
      </h1>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Name
          </label>
          <input
            type="text"
            value={form.name}
            onChange={(e) => setForm({ ...form, name: e.target.value })}
            className="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
            required
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Email
          </label>
          <input
            type="email"
            value={form.email}
            onChange={(e) => setForm({ ...form, email: e.target.value })}
            className="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
            required
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Message
          </label>
          <textarea
            value={form.message}
            onChange={(e) => setForm({ ...form, message: e.target.value })}
            className="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
            required
          />
        </div>
        <button
          type="submit"
          className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 w-full"
        >
          Submit
        </button>
      </form>
    </div>
  );
}


--- ./src/app/support-group/(support)/dashboard/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";
import { Dispute } from "@/types";

export default function SupportDashboard() {
  const [disputes, setDisputes] = useState<Dispute[]>([]);

  const { data, error, isLoading } = useQuery<Dispute[]>({
    queryKey: ["disputes"],
    queryFn: async () => {
      const res = await fetch("/api/disputes");
      if (!res.ok) throw new Error("Failed to fetch disputes");
      return res.json();
    },
  });

  useEffect(() => {
    if (data) setDisputes(data);
    if (error) toast.error(error.message);
  }, [data, error]);

  const escalateToQBCC = async (disputeId) => {
    const res = await fetch("/api/disputes/escalate", {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ dispute_id: disputeId }),
    });
    if (res.ok) toast.success("Escalated to QBCC!");
    else toast.error("Failed to escalate");
  };

  if (isLoading) return <div className="text-center py-10">Loading...</div>;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Support Dashboard
      </h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {disputes.map((dispute) => (
          <div
            key={dispute.id}
            className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg"
          >
            <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">
              {dispute.title}
            </h2>
            <p className="text-gray-600 dark:text-gray-400 mt-2">
              Job: {dispute.jobs.title}
            </p>
            <p className="text-gray-600 dark:text-gray-400">
              Status:{" "}
              {dispute.qbcc_dispute ? "Escalated to QBCC" : "In Dispute"}
            </p>
          </div>
        ))}
      </div>
    </div>
  );
}


--- ./src/app/support-group/(support)/page.tsx ---

"use client";

import Link from "next/link";

export default function SupportHome() {
  return (
    <div className="text-center space-y-6 py-12">
      <h1 className="text-5xl font-bold text-gray-900 dark:text-gray-100">
        Welcome to TradeMatey - Support Portal
      </h1>
      <p className="text-lg text-gray-600 dark:text-gray-400">
        Assist users, manage tickets, and resolve issues.
      </p>
      <div className="space-x-4">
        <Link href="/support/dashboard">
          <button className="px-6 py-3 bg-teal-600 text-white rounded-md hover:bg-teal-700 transition-colors">
            Go to Dashboard
          </button>
        </Link>
      </div>
    </div>
  );
}


--- ./src/app/client/(client)/onboarding/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui";
import { toast } from "react-hot-toast";
import { useRouter } from "next/navigation";
import { supabase } from "@/lib/supabase/client";
import { loadStripe } from "@stripe/stripe-js";
import {
  Elements,
  CardElement,
  useStripe,
  useElements,
} from "@stripe/stripe-js";
import Link from "next/link";

const stripePromise = loadStripe(
  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!
);

function PaymentForm({ onSuccess }: { onSuccess: () => void }) {
  const stripe = useStripe();
  const elements = useElements();
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    const {
      data: { user },
    } = await supabase.auth.getUser();
    const res = await fetch("/api/payments/setup", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ user_id: user!.id }),
    });
    const { clientSecret } = await res.json();
    const { error, setupIntent } = await stripe!.confirmCardSetup(
      clientSecret,
      {
        payment_method: { card: elements!.getElement(CardElement)! },
      }
    );
    if (error) {
      toast.error(error.message!);
    } else {
      await supabase
        .from("users")
        .update({ payment_method_id: setupIntent!.payment_method })
        .eq("id", user!.id);
      toast.success("Payment method added!");
      onSuccess();
    }
    setLoading(false);
  };

  return (
    <form onSubmit={handleSubmit}>
      <CardElement />
      <Button type="submit" disabled={loading} className="mt-2 w-full">
        {loading ? "Processing..." : "Add Payment Method"}
      </Button>
    </form>
  );
}

export default function Onboarding() {
  const [step, setStep] = useState(1);
  const [form, setForm] = useState({
    name: "",
    email: "",
    region: "",
    paymentMethod: "",
  });
  const router = useRouter();

  useEffect(() => {
    const fetchUser = async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      const { data } = await supabase
        .from("users")
        .select("email, region")
        .eq("id", user!.id)
        .single();
      setForm((prev) => ({
        ...prev,
        email: data?.email || user?.email || "",
        region: data?.region || "",
      }));
    };
    fetchUser();
  }, []);

  const handleNext = async () => {
    if (step < 4) setStep(step + 1);
    else {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      const { error: profileError } = await supabase
        .from("profiles")
        .update({ role: "client" })
        .eq("id", user!.id);
      const { error: userError } = await supabase
        .from("users")
        .update({
          name: form.name,
          region: form.region,
          has_completed_onboarding: true,
          roles: ["employee"],
        })
        .eq("id", user!.id);
      if (profileError || userError) {
        toast.error("Failed to save profile");
      } else {
        await supabase.from("badges").insert([
          {
            user_id: user!.id,
            badge: "Welcome Aboard",
            earned_at: new Date().toISOString(),
          },
        ]);
        await supabase.from("notifications").insert({
          user_id: user!.id,
          message: "You earned the 'Welcome Aboard' badge!",
        });
        toast.success("Onboarding completed!");
        router.push("/client/dashboard");
      }
    }
  };

  return (
    <div className="max-w-md mx-auto p-6 space-y-6">
      <h1 className="text-3xl font-bold">Welcome to TradeMatey</h1>
      {step === 1 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 1: Watch Intro</h2>
          <video src="/intro.mp4" controls className="w-full rounded" />
          <p>
            Secure milestone payments with 3.33% commission and QBCC-compliant
            14+14 day timelines.
          </p>
        </div>
      )}
      {step === 2 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 2: Personal Info</h2>
          <input
            type="text"
            placeholder="Name"
            value={form.name}
            onChange={(e) => setForm({ ...form, name: e.target.value })}
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
            required
          />
          <input
            type="email"
            placeholder="Email"
            value={form.email}
            disabled
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
          />
          <select
            value={form.region}
            onChange={(e) => setForm({ ...form, region: e.target.value })}
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
            required
          >
            <option value="">Select Region</option>
            <option value="Regional">Regional Queensland</option>
            <option value="Metro">Metro Queensland</option>
          </select>
        </div>
      )}
      {step === 3 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 3: Payment Method</h2>
          <Elements stripe={stripePromise}>
            <PaymentForm
              onSuccess={() =>
                setForm({ ...form, paymentMethod: "Card Added" })
              }
            />
          </Elements>
          <p className="text-sm text-gray-600">
            3.33% commission per milestone (
            {form.region === "Regional" ? "capped at A$25" : "no cap"}).
          </p>
        </div>
      )}
      {step === 4 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 4: Confirmation</h2>
          <p>Name: {form.name}</p>
          <p>Email: {form.email}</p>
          <p>Region: {form.region}</p>
          <p>Payment Method: {form.paymentMethod}</p>
          <div className="mt-4 p-4 bg-blue-100 rounded">
            <p className="font-bold">Go Premium for A$99/year!</p>
            <p>Enjoy 1.67% commission and priority job matching.</p>
            <Link href="/premium">
              <Button>Learn More</Button>
            </Link>
          </div>
        </div>
      )}
      <Button onClick={handleNext} className="w-full">
        {step === 4 ? "Finish" : "Next"}
      </Button>
    </div>
  );
}


--- ./src/app/client/(client)/auth/callback/route.ts ---

import { NextResponse } from "next/server";
import { supabase } from "@/lib/supabase/server";

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url);
  const code = searchParams.get("code");
  if (code) {
    await supabase.auth.exchangeCodeForSession(code);
  }
  return NextResponse.redirect(new URL("/client/dashboard", request.url));
}


--- ./src/app/client/(client)/login/page.tsx ---

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { motion } from "framer-motion";
import { FaEye, FaEyeSlash, FaGoogle, FaEnvelope } from "react-icons/fa";
import { supabase } from "@/lib/supabase/client";
import { toast } from "react-hot-toast";
import { Button } from "@/components/ui/button";

export default function ClientLoginPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [magicLinkSent, setMagicLinkSent] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [mfaRequired, setMfaRequired] = useState(false);
  const [mfaCode, setMfaCode] = useState("");
  const [factorId, setFactorId] = useState("");
  const router = useRouter();

  const handleEmailLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setLoading(true);
    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
      if (error) throw error;

      const { data: factors } = await supabase.auth.mfa.listFactors();
      if (factors?.totp?.length) {
        const id = factors.totp[0].id;
        setFactorId(id);
        setMfaRequired(true);

        const { error: mfaError } = await supabase.auth.mfa.challenge({
          factorId: id,
        });
        if (mfaError) throw mfaError;
      } else {
        toast.success("Login successful!");
      }
    } catch (err: any) {
      setError(err.message);
      toast.error(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleMfaVerify = async () => {
    try {
      const { error } = await supabase.auth.mfa.verify({
        factorId,
        code: mfaCode,
      });
      if (error) throw error;
      toast.success("MFA verified!");
      setMfaRequired(false);
    } catch (err: any) {
      setError(err.message);
      toast.error(err.message);
    }
  };

  const handleOAuthLogin = async () => {
    setLoading(true);
    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: "google",
        options: {
          redirectTo: `${window.location.origin}/auth/callback`,
        },
      });
      if (error) throw error;
    } catch (err: any) {
      setError(err.message);
      toast.error(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleMagicLink = async () => {
    setLoading(true);
    try {
      const { error } = await supabase.auth.signInWithOtp({
        email,
        options: {
          emailRedirectTo: `${window.location.origin}/auth/callback`,
        },
      });
      if (error) throw error;
      setMagicLinkSent(true);
      toast.success("Magic link sent! Check your email.");
    } catch (err: any) {
      setError(err.message);
      toast.error(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-100 to-blue-300 dark:from-gray-800 dark:to-blue-900 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="absolute inset-0 opacity-10">
        <svg className="w-full h-full" viewBox="0 0 1000 1000">
          <path
            d="M0 0H1000V1000H0V0ZM500 500C600 500 700 400 700 300C700 200 600 100 500 100C400 100 300 200 300 300C300 400 400 500 500 500Z"
            fill="url(#gradient)"
          />
          <defs>
            <linearGradient id="gradient" x1="0" y1="0" x2="1000" y2="1000">
              <stop offset="0%" stopColor="#2196F3" />
              <stop offset="100%" stopColor="#FF9800" />
            </linearGradient>
          </defs>
        </svg>
      </div>

      <motion.div
        className="relative bg-white dark:bg-gray-800 p-8 rounded-lg shadow-lg w-full max-w-md"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
      >
        <h2 className="text-3xl font-bold text-center">Client Login</h2>
        <p className="text-sm text-gray-600 dark:text-gray-400 mt-4 text-center">
          Sign in to post jobs with secure milestone payments (3.33% commission,
          A$25 cap in regional Queensland).
        </p>

        {magicLinkSent ? (
          <div className="text-center space-y-4 mt-6">
            <FaEnvelope className="text-blue-600 mx-auto" size={40} />
            <p>
              Check <span className="font-bold">{email}</span> for your magic
              link.
            </p>
            <button
              onClick={() => setMagicLinkSent(false)}
              className="text-blue-600 hover:underline"
            >
              Try Another Method
            </button>
          </div>
        ) : (
          <>
            {error && <p className="text-red-500 text-center">{error}</p>}

            <form onSubmit={handleEmailLogin} className="space-y-4 mt-6">
              <div>
                <label className="block text-sm font-medium">Email</label>
                <input
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="w-full p-2 border rounded"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium">Password</label>
                <div className="relative">
                  <input
                    type={showPassword ? "text" : "password"}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="w-full p-2 border rounded"
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-2 top-2"
                  >
                    {showPassword ? <FaEyeSlash /> : <FaEye />}
                  </button>
                </div>
              </div>

              {mfaRequired && (
                <div>
                  <input
                    type="text"
                    value={mfaCode}
                    onChange={(e) => setMfaCode(e.target.value)}
                    placeholder="Enter 6-digit MFA code"
                    className="w-full p-2 border rounded"
                  />
                  <Button onClick={handleMfaVerify} className="w-full mt-2">
                    Verify MFA
                  </Button>
                </div>
              )}

              <Button type="submit" disabled={loading} className="w-full">
                {loading ? "Signing In..." : "Sign In with Email"}
              </Button>
            </form>

            <div className="my-4 text-center">Or</div>

            <div className="space-y-2">
              <Button
                onClick={handleOAuthLogin}
                disabled={loading}
                variant="outline"
                className="w-full flex items-center justify-center"
              >
                <FaGoogle className="mr-2" /> Google
              </Button>
              <Button
                onClick={handleMagicLink}
                disabled={loading || !email}
                variant="outline"
                className="w-full flex items-center justify-center"
              >
                <FaEnvelope className="mr-2" /> Magic Link
              </Button>
            </div>

            <div className="mt-4 text-center space-y-2">
              <p>
                No account?{" "}
                <Link href="/client/register" className="text-blue-600">
                  Register
                </Link>
              </p>
              <p>
                Forgot password?
                <Link href="/client/reset-password" className="text-blue-600">
                  Reset
                </Link>
              </p>
            </div>
          </>
        )}
      </motion.div>
    </div>
  );
}


--- ./src/app/client/(client)/dashboard/page.tsx ---

"use client";

import { useState, useEffect, useRef } from "react"; // Add useRef
import { Card, Button } from "@/components/ui";
import { supabase } from "@/lib/supabase/client";
import { toast } from "react-hot-toast";
import Chart from "chart.js/auto";

export default function Dashboard() {
  const [jobs, setJobs] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const chartRef = useRef<HTMLCanvasElement>(null);
  const chartInstanceRef = useRef<Chart | null>(null);
  const [commissions, setCommissions] = useState([]);
  useEffect(() => {
    const fetchCommissions = async () => {
      const res = await fetch("/api/commissions");
      if (res.ok) setCommissions(await res.json());
      else toast.error("Failed to fetch commissions");
    };
    fetchCommissions();
  }, []);

  const fetchJobs = async () => {
    const {
      data: { user },
    } = await supabase.auth.getUser();
    const { data, error } = await supabase
      .from("jobs")
      .select("*, milestones(*), region")
      .eq("client_id", user!.id);
    if (error) throw error;
    setJobs(data || []);
  };

  useEffect(() => {
    const channel = supabase
      .channel("bookings")
      .on(
        "postgres_changes",
        { event: "*", schema: "public", table: "bookings" },
        () => fetchJobs()
      )
      .subscribe();
    return () => supabase.removeChannel(channel);
  }, []);

  useEffect(() => {
    const channel = supabase
      .channel("milestones")
      .on(
        "postgres_changes",
        { event: "UPDATE", schema: "public", table: "milestones" },
        () => fetchJobs()
      )
      .subscribe();
    return () => supabase.removeChannel(channel);
  }, []);

  useEffect(() => {
    fetchJobs()
      .catch((e) => toast.error(e.message))
      .finally(() => setLoading(false));
  }, []);

  useEffect(() => {
    if (chartRef.current && jobs.length) {
      const completed = jobs.filter((job) => job.status === "completed").length;
      const inProgress = jobs.filter(
        (job) => job.status === "in_progress"
      ).length;
      const pending = jobs.filter((job) => job.status === "pending").length;

      if (chartInstanceRef.current) {
        chartInstanceRef.current.destroy();
      }

      chartInstanceRef.current = new Chart(chartRef.current, {
        type: "bar",
        data: {
          labels: ["Completed", "In Progress", "Pending"],
          datasets: [
            {
              label: "Job Status",
              data: [completed, inProgress, pending],
              backgroundColor: ["#2563EB", "#FBBF24", "#EF4444"],
              borderColor: ["#1E40AF", "#D97706", "#B91C1C"],
              borderWidth: 1,
            },
          ],
        },
        options: {
          scales: {
            y: {
              beginAtZero: true,
              title: { display: true, text: "Number of Jobs" },
            },
            x: { title: { display: true, text: "Status" } },
          },
          plugins: {
            legend: { display: true, position: "top" },
            title: { display: true, text: "Job Completion Rate" },
          },
        },
      });
    }
    return () => {
      if (chartInstanceRef.current) {
        chartInstanceRef.current.destroy();
      }
    };
  }, [jobs]);

  const verifyMilestone = async (milestoneId: string) => {
    const res = await fetch("/api/payments", {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ milestone_id: milestoneId, action: "verify" }),
    });
    if (res.ok) {
      toast.success("Milestone verified!");
      fetchJobs();
    } else {
      toast.error("Failed to verify milestone");
    }
  };

  const disputeMilestone = async (milestoneId: string) => {
    const res = await fetch("/api/disputes", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ milestone_id: milestoneId }),
    });
    if (res.ok) {
      toast.success("Dispute initiated!");
      fetchJobs();
    } else {
      toast.error("Failed to initiate dispute");
    }
  };

  const payMilestone = async (milestoneId: string) => {
    const { data: milestone } = await supabase
      .from("milestones")
      .select("amount")
      .eq("id", milestoneId)
      .single();
    const res = await fetch("/api/payments", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        milestone_id: milestoneId,
        amount: milestone!.amount,
      }),
    });
    if (res.ok) {
      toast.success("Payment processed!");
      fetchJobs();
    } else {
      toast.error("Payment failed");
    }
  };

  return (
    <div className="container mx-auto p-4">
      {loading ? (
        <p>Loading...</p>
      ) : (
        <>
          <h1 className="text-2xl font-bold">Client Dashboard</h1>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
            {jobs.map((job) => (
              <Card key={job.id} className="p-4">
                <h2 className="text-xl">{job.title}</h2>
                <p>Status: {job.status}</p>
                <h3 className="text-lg mt-2">Milestones:</h3>
                <ul>
                  {job.milestones.map((milestone: any) => (
                    <li key={milestone.id} className="mt-1">
                      {milestone.title}: {milestone.status} (Amount: A$
                      {milestone.amount.toFixed(2)}, Commission: A$
                      {(milestone.commission || 0).toFixed(2)})
                      {milestone.status === "completed" && (
                        <>
                          <Button onClick={() => verifyMilestone(milestone.id)}>
                            Verify
                          </Button>
                          <Button
                            variant="outline"
                            onClick={() => disputeMilestone(milestone.id)}
                          >
                            Dispute
                          </Button>
                        </>
                      )}
                      {milestone.status === "verified" && (
                        <Button onClick={() => payMilestone(milestone.id)}>
                          Pay A$
                          {(
                            milestone.amount + (milestone.commission || 0)
                          ).toFixed(2)}
                        </Button>
                      )}
                    </li>
                  ))}
                </ul>
              </Card>
            ))}

            <Card className="p-4 mt-4">
              <h2 className="text-xl font-bold">Commissions</h2>
              <ul>
                {commissions.map((c) => (
                  <li key={c.id}>
                    A${c.amount.toFixed(2)} ({c.source_type} {c.source_id}) -{" "}
                    {new Date(c.created_at).toLocaleDateString()}
                  </li>
                ))}
              </ul>
            </Card>
          </div>
          <Card className="p-4 mt-4">
            <h2 className="text-xl font-bold">Job Completion Rate</h2>
            <canvas ref={chartRef} />
          </Card>
        </>
      )}
    </div>
  );
}


--- ./src/app/client/(client)/post-job/page.tsx ---

"use client";

import { useState, useEffect } from "react"; // Add useEffect
import { Button } from "@/components/ui";
import { useRouter } from "next/navigation";
import { toast } from "react-hot-toast";
import { supabase } from "@/lib/supabase/client";

export default function PostJob() {
  const [job, setJob] = useState({ title: "", description: "", budget: "" });
  const [milestones, setMilestones] = useState([
    { title: "", description: "", percentage: "", due_date: "" },
  ]);
  const [region, setRegion] = useState("");
  const router = useRouter();

  useEffect(() => {
    const fetchUser = async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      const { data } = await supabase
        .from("users")
        .select("region")
        .eq("id", user!.id)
        .single();
      setRegion(data?.region || "");
    };
    fetchUser();
  }, []);

  const calculateCommission = () => {
    const budget = Number(job.budget);
    let commission = budget * 0.0333;
    if (region === "Regional") commission = Math.min(commission, 25);
    return commission.toFixed(2);
  };

  const addMilestone = () => {
    setMilestones([
      ...milestones,
      { title: "", description: "", percentage: "", due_date: "" },
    ]);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const totalPercentage = milestones.reduce(
      (sum, m) => sum + Number(m.percentage),
      0
    );
    if (totalPercentage !== 100) {
      toast.error("Milestone percentages must sum to 100%");
      return;
    }

    const {
      data: { user },
    } = await supabase.auth.getUser();
    const res = await fetch("/api/jobs", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        title: job.title,
        description: job.description,
        budget: Number(job.budget),
        client_id: user!.id,
        payment_type: "milestone",
        milestones,
      }),
    });

    if (res.ok) {
      toast.success("Job posted!");
      router.push("/client/dashboard");
    } else {
      toast.error("Failed to post job");
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold">Post a Job</h1>
      <form onSubmit={handleSubmit} className="space-y-4 mt-4">
        <div>
          <label className="block">Job Title</label>
          <input
            type="text"
            value={job.title}
            onChange={(e) => setJob({ ...job, title: e.target.value })}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <div>
          <label className="block">Description</label>
          <textarea
            value={job.description}
            onChange={(e) => setJob({ ...job, description: e.target.value })}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <div>
          <label className="block">Budget (A$)</label>
          <input
            type="number"
            value={job.budget}
            onChange={(e) => setJob({ ...job, budget: e.target.value })}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <h2 className="text-xl font-semibold">Milestones</h2>
        {milestones.map((milestone, index) => (
          <div key={index} className="space-y-2 border p-4 rounded">
            <div>
              <label className="block">Milestone Title</label>
              <input
                type="text"
                value={milestone.title}
                onChange={(e) => {
                  const newMilestones = [...milestones];
                  newMilestones[index].title = e.target.value;
                  setMilestones(newMilestones);
                }}
                className="w-full p-2 border rounded"
                required
              />
            </div>
            <div>
              <label className="block">Description</label>
              <textarea
                value={milestone.description}
                onChange={(e) => {
                  const newMilestones = [...milestones];
                  newMilestones[index].description = e.target.value;
                  setMilestones(newMilestones);
                }}
                className="w-full p-2 border rounded"
              />
            </div>
            <div>
              <label className="block">Percentage (%)</label>
              <input
                type="number"
                value={milestone.percentage}
                onChange={(e) => {
                  const newMilestones = [...milestones];
                  newMilestones[index].percentage = e.target.value;
                  setMilestones(newMilestones);
                }}
                className="w-full p-2 border rounded"
                required
              />
            </div>
            <div>
              <label className="block">Due Date</label>
              <input
                type="date"
                value={milestone.due_date}
                onChange={(e) => {
                  const newMilestones = [...milestones];
                  newMilestones[index].due_date = e.target.value;
                  setMilestones(newMilestones);
                }}
                className="w-full p-2 border rounded"
                required
              />
            </div>
          </div>
        ))}
        <p className="text-sm">
          Estimated commission: A${calculateCommission()} (
          {region === "Regional" ? "capped at A$25" : "3.33%"})
        </p>
        <Button type="button" onClick={addMilestone} variant="outline">
          Add Milestone
        </Button>
        <Button type="submit">Post Job</Button>
      </form>
    </div>
  );
}


--- ./src/app/client/(client)/referrals/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useAuth } from "@/context/AuthContext";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";

export default function ClientReferrals() {
  const { user } = useAuth();
  const [referralLink, setReferralLink] = useState("");
  const [credits, setCredits] = useState(0);

  const { data, error, isLoading } = useQuery({
    queryKey: ["clientReferrals", user?.id],
    queryFn: async () => {
      const res = await fetch(`/api/referrals?user_id=${user?.id}`);
      if (!res.ok) throw new Error("Failed to fetch referral data");
      return res.json();
    },
  });

  useEffect(() => {
    if (data) {
      setCredits(data.credits || 0);
      setReferralLink(
        `${window.location.origin}/client/signup?ref=${user?.id}`
      );
    }
    if (error) toast.error(error.message);
  }, [data, error, user?.id]);

  const handleInvite = async (referredUserId: string) => {
    const res = await fetch("/api/referrals", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        referrer_id: user?.id,
        referred_user_id,
        role: "client",
      }),
    });
    if (res.ok) {
      toast.success("Referral credit applied! ($10 credit)");
      setCredits(credits + 10);
    } else {
      toast.error("Referral failed");
    }
  };

  if (isLoading) return <div className="text-center py-10">Loading...</div>;

  return (
    <div className="space-y-6 max-w-md mx-auto p-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Client Referrals
      </h1>
      <p className="text-gray-600 dark:text-gray-400">
        Invite friends and earn $10 credit per successful referral!
      </p>
      <p className="text-gray-800 dark:text-gray-200 font-semibold">
        Your Credits: ${credits}
      </p>
      <div className="space-y-4">
        <input
          type="text"
          value={referralLink}
          readOnly
          className="w-full rounded-md border-gray-300 dark:border-gray-600 bg-gray-100 dark:bg-gray-800 p-2"
        />
        <button
          onClick={() => navigator.clipboard.writeText(referralLink)}
          className="w-full px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors"
        >
          Copy Referral Link
        </button>
        <div>
          <input
            type="text"
            placeholder="Enter referred client ID"
            onChange={(e) => handleInvite(e.target.value)}
            className="w-full rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white p-2"
          />
        </div>
      </div>
    </div>
  );
}


--- ./src/app/client/(client)/disputes/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { Card, Button } from "@/components/ui";
import { useAuth } from "@/context/AuthContext";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";

export default function Disputes() {
  const { user } = useAuth();
  const [disputes, setDisputes] = useState<any[]>([]);

  const { data, error, isLoading } = useQuery({
    queryKey: ["disputes", user?.id],
    queryFn: async () => {
      const res = await fetch(`/api/disputes?user_id=${user?.id}`);
      if (!res.ok) throw new Error("Failed to fetch disputes");
      return res.json();
    },
  });

  useEffect(() => {
    if (data) setDisputes(data);
    if (error) toast.error(error.message);
  }, [data, error]);

  if (isLoading) return <div className="text-center py-10">Loading...</div>;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Disputes
      </h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {disputes.map((dispute) => (
          <Card key={dispute.id} className="p-6 shadow-lg">
            <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">
              {dispute.title}
            </h2>
            <p className="text-gray-600 dark:text-gray-400 mt-2">
              Job: {dispute.jobs.title}
            </p>
            <p className="text-gray-600 dark:text-gray-400">
              Tradie: {dispute.users.name}
            </p>
            <p className="text-gray-600 dark:text-gray-400">
              Status:{" "}
              {dispute.qbcc_dispute ? "Escalated to QBCC" : "In Dispute"}
            </p>
            {!dispute.qbcc_dispute &&
              new Date() > new Date(dispute.funds_acquired_date) && (
                <Button
                  onClick={async () => {
                    const res = await fetch("/api/disputes", {
                      method: "POST",
                      headers: { "Content-Type": "application/json" },
                      body: JSON.stringify({
                        milestone_id: dispute.id,
                        action: "escalate",
                      }),
                    });
                    if (res.ok) toast.success("Escalated to QBCC!");
                    else toast.error("Escalation failed");
                  }}
                  variant="destructive"
                  className="mt-4 w-full"
                >
                  Escalate to QBCC
                </Button>
              )}
          </Card>
        ))}
      </div>
    </div>
  );
}


--- ./src/app/client/(client)/browse-tradies/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { TradieCard } from "@/components/TradieCard";
import { toast } from "react-hot-toast";

export default function BrowseTradies() {
  const [tradeFilter, setTradeFilter] = useState("");
  const [tradies, setTradies] = useState<any[]>([]);

  const { data, error, isLoading } = useQuery({
    queryKey: ["tradies", tradeFilter],
    queryFn: async () => {
      const res = await fetch(
        `/api/tradies${tradeFilter ? `?trade=${tradeFilter}` : ""}`
      );
      if (!res.ok) throw new Error("Failed to fetch tradies");
      return res.json();
    },
  });

  useEffect(() => {
    if (data) setTradies(data);
    if (error) toast.error(error.message);
  }, [data, error]);

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Browse Tradies
      </h1>
      <div className="flex space-x-4">
        <select
          value={tradeFilter}
          onChange={(e) => setTradeFilter(e.target.value)}
          className="px-4 py-2 rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
        >
          <option value="">All Trades</option>
          <option value="carpentry">Carpentry</option>
          <option value="plumbing">Plumbing</option>
          <option value="electrical">Electrical</option>
        </select>
      </div>
      {isLoading ? (
        <div className="text-center py-10">Loading...</div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {tradies.map((tradie) => (
            <TradieCard
              key={tradie.id}
              tradie={tradie}
              className="p-6 shadow-lg hover:shadow-xl transition-shadow duration-300"
            />
          ))}
        </div>
      )}
    </div>
  );
}


--- ./src/app/client/(client)/messages/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useAuth } from "@/context/AuthContext";
import { useQuery, useMutation } from "@tanstack/react-query";
import { toast } from "react-hot-toast";

export default function ClientMessages() {
  const { user } = useAuth();
  const [messages, setMessages] = useState<any[]>([]);
  const [newMessage, setNewMessage] = useState("");
  const [selectedJobId, setSelectedJobId] = useState("");

  const { data, error, isLoading } = useQuery({
    queryKey: ["clientMessages", user?.id],
    queryFn: async () => {
      const res = await fetch(`/api/messages?user_id=${user?.id}`);
      if (!res.ok) throw new Error("Failed to fetch messages");
      return res.json();
    },
  });

  const mutation = useMutation({
    mutationFn: async ({
      receiverId,
      jobId,
    }: {
      receiverId: string;
      jobId: string;
    }) => {
      const res = await fetch("/api/messages", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          sender_id: user?.id,
          receiver_id: receiverId,
          content: newMessage,
          job_id: jobId,
        }),
      });
      if (!res.ok) throw new Error("Failed to send message");
      return res.json();
    },
    onSuccess: (newMsg) => {
      setMessages([...messages, newMsg]);
      setNewMessage("");
      toast.success("Message sent!");
    },
    onError: (err: any) => toast.error(err.message),
  });

  useEffect(() => {
    if (data) setMessages(data);
    if (error) toast.error(error.message);
  }, [data, error]);

  if (isLoading) return <div className="text-center py-10">Loading...</div>;

  const lastMsg = messages.length > 0 ? messages[messages.length - 1] : null;
  const receiverId =
    lastMsg?.sender_id !== user?.id ? lastMsg?.sender_id : lastMsg?.receiver_id;

  return (
    <div className="space-y-6 max-w-2xl mx-auto p-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Messages
      </h1>
      <div className="space-y-4 max-h-96 overflow-y-auto">
        {messages.map((msg) => (
          <div
            key={msg.id}
            className={`p-4 rounded-lg max-w-lg ${
              msg.sender_id === user?.id
                ? "bg-indigo-100 dark:bg-indigo-900 ml-auto"
                : "bg-gray-100 dark:bg-gray-800 mr-auto"
            }`}
          >
            <p className="text-sm text-gray-600 dark:text-gray-400">
              {msg.sender_id === user?.id ? "You" : msg.sender.name} to{" "}
              {msg.sender_id === user?.id ? msg.receiver.name : "You"}
            </p>
            <p className="text-gray-900 dark:text-gray-100">{msg.content}</p>
            <p className="text-xs text-gray-500 dark:text-gray-500 mt-1">
              {new Date(msg.created_at).toLocaleString()}
            </p>
          </div>
        ))}
      </div>
      <div className="flex space-x-2">
        <select
          value={selectedJobId}
          onChange={(e) => setSelectedJobId(e.target.value)}
          className="w-1/3 rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white p-2"
        >
          <option value="">Select Job</option>
          {/* Assume jobs are fetched or stored in context */}
          <option value="job1">Job 1</option>
          <option value="job2">Job 2</option>
        </select>
        <input
          type="text"
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          placeholder="Type a message..."
          className="flex-1 rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white p-2"
        />
        <button
          onClick={() =>
            mutation.mutate({
              receiverId: receiverId || "",
              jobId: selectedJobId,
            })
          }
          disabled={
            !newMessage || !receiverId || !selectedJobId || mutation.isLoading
          }
          className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:bg-gray-400 dark:disabled:bg-gray-600 transition-colors"
        >
          {mutation.isLoading ? "Sending..." : "Send"}
        </button>
      </div>
    </div>
  );
}


--- ./src/app/client/(client)/settings/page.tsx ---

"use client";

import { useState } from "react";
import { supabase } from "@/lib/supabase/client";
import { Button } from "@/components/ui/button";
import QRCode from "qrcode.react";
import { toast } from "react-hot-toast";

export default function Settings() {
  const [qrCode, setQrCode] = useState("");
  const [mfaCode, setMfaCode] = useState("");

  const enableMFA = async () => {
    const { data: user } = await supabase.auth.getUser();
    const { data, error } = await supabase.auth.mfa.enroll({
      userId: user.user!.id,
      factorType: "totp",
    });
    if (error) {
      toast.error(error.message);
    } else {
      setQrCode(data.totp.qr_code);
    }
  };

  const verifyMFA = async () => {
    const { data: factors } = await supabase.auth.mfa.listFactors();
    if (!factors?.totp?.length) {
      toast.error("No TOTP factor found");
      return;
    }
    const factorId = factors.totp[0].id;
    const { error } = await supabase.auth.mfa.verify({
      factorId,
      code: mfaCode,
    });
    if (error) {
      toast.error(error.message);
    } else {
      toast.success("MFA enabled!");
      setQrCode("");
      setMfaCode("");
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold">Settings</h1>
      <div className="mt-4">
        <h2 className="text-xl">Multi-Factor Authentication</h2>
        {!qrCode ? (
          <Button onClick={enableMFA}>Enable MFA</Button>
        ) : (
          <div className="space-y-4">
            <p>Scan this QR code with an authenticator app:</p>
            <QRCode value={qrCode} />
            <input
              type="text"
              value={mfaCode}
              onChange={(e) => setMfaCode(e.target.value)}
              placeholder="Enter 6-digit code"
              className="mt-2 p-2 border rounded w-full"
            />
            <Button onClick={verifyMFA} className="mt-2">
              Verify
            </Button>
          </div>
        )}
      </div>
    </div>
  );
}


--- ./src/app/client/(client)/job/[id]/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/router";
import { Card, Button } from "@/components/ui";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";

export default function JobDetails({ params }: { params: { id: string } }) {
  const [job, setJob] = useState<any>(null);
  const { data, error, isLoading } = useQuery({
    queryKey: ["job", params.id],
    queryFn: async () => {
      const res = await fetch(`/api/jobs?job_id=${params.id}`);
      if (!res.ok) throw new Error("Failed to fetch job");
      return res.json();
    },
  });

  useEffect(() => {
    if (data && data.length > 0) setJob(data[0]);
    if (error) toast.error(error.message);
  }, [data, error]);

  if (isLoading) return <div className="text-center py-10">Loading...</div>;
  if (!job) return <div className="text-center py-10">Job not found</div>;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        {job.title}
      </h1>
      <Card className="p-6 shadow-lg">
        <p className="text-gray-600 dark:text-gray-400">
          Description: {job.description}
        </p>
        <p className="text-gray-600 dark:text-gray-400">
          Budget: ${job.budget}
        </p>
        <p className="text-gray-600 dark:text-gray-400">Status: {job.status}</p>
        <p className="text-gray-600 dark:text-gray-400">
          Payment Type: {job.payment_type}
        </p>
        {job.payment_type === "milestone" && (
          <>
            <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200 mt-4">
              Milestones
            </h2>
            <ul className="mt-2 space-y-2">
              {job.milestones.map((milestone: any) => (
                <li
                  key={milestone.id}
                  className="p-3 bg-gray-50 dark:bg-gray-800 rounded-lg"
                >
                  {milestone.title}: {milestone.status} (${milestone.amount})
                </li>
              ))}
            </ul>
          </>
        )}
      </Card>
    </div>
  );
}


--- ./src/app/client/(client)/reset-password/page.tsx ---

"use client";

import { useState } from "react";
import { Button } from "@/components/ui";
import { toast } from "react-hot-toast";
import { useRouter } from "next/navigation";

export default function ResetPassword() {
  const [email, setEmail] = useState("");
  const router = useRouter();

  const handleReset = async (e: React.FormEvent) => {
    e.preventDefault();
    // Placeholder for password reset logic (e.g., using NextAuth or Supabase auth)
    toast.success("Password reset link sent to your email!");
    router.push("/client/login");
  };

  return (
    <div className="max-w-md mx-auto p-6 space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Reset Password
      </h1>
      <form onSubmit={handleReset} className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Email
          </label>
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
            required
          />
        </div>
        <Button type="submit" className="w-full">
          Send Reset Link
        </Button>
      </form>
    </div>
  );
}


--- ./src/app/client/(client)/tradie/[id]/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";

export default function TradieProfile({ params }: { params: { id: string } }) {
  const [tradie, setTradie] = useState<any>(null);

  const { data, error, isLoading } = useQuery({
    queryKey: ["tradie", params.id],
    queryFn: async () => {
      const res = await fetch(`/api/tradies?user_id=${params.id}`);
      if (!res.ok) throw new Error("Failed to fetch tradie");
      return res.json();
    },
  });

  useEffect(() => {
    if (data && data.length > 0) setTradie(data[0]);
    if (error) toast.error(error.message);
  }, [data, error]);

  if (isLoading) return <div className="text-center py-10">Loading...</div>;
  if (!tradie) return <div className="text-center py-10">Tradie not found</div>;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        {tradie.name}
      </h1>
      <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
        <p className="text-gray-600 dark:text-gray-400">
          Trade: {tradie.trade}
        </p>
        <p className="text-gray-600 dark:text-gray-400">
          Rating: {tradie.average_rating || "N/A"}
        </p>
        <p className="text-gray-600 dark:text-gray-400">
          Region: {tradie.region}
        </p>
        {tradie.top_tradie && (
          <p className="text-green-600 dark:text-green-400">Top Tradie ✅</p>
        )}
        <button
          onClick={() => alert("Contact functionality coming soon!")}
          className="mt-4 px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700"
        >
          Contact Tradie
        </button>
      </div>
    </div>
  );
}


--- ./src/app/client/(client)/page.tsx ---

"use client";

import Link from "next/link";

export default function ClientHome() {
  return (
    <div className="text-center space-y-6 py-12">
      <h1 className="text-5xl font-bold text-gray-900 dark:text-gray-100">
        Welcome to TradeMatey - Client Portal
      </h1>
      <p className="text-lg text-gray-600 dark:text-gray-400">
        Manage your projects, hire vetted tradies, and track payments.
      </p>
      <div className="space-x-4">
        <Link href="/client/dashboard">
          <button className="px-6 py-3 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors">
            Go to Dashboard
          </button>
        </Link>
        <Link href="/client/post-job">
          <button className="px-6 py-3 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors">
            Post a Job
          </button>
        </Link>
      </div>
    </div>
  );
}


--- ./src/app/globals.css ---

@tailwind base;
@tailwind components;
@tailwind utilities;

--- ./src/app/robots.ts ---



--- ./src/app/sitemap.ts ---

import { MetadataRoute } from "next";

export default function sitemap(): MetadataRoute.Sitemap {
  return [
    { url: "https://yourwebsite.com", lastModified: new Date() },
    { url: "https://yourwebsite.com/about", lastModified: new Date() },
  ];
}


--- ./src/app/tradie/(tradie)/premium/page.tsx ---

"use client";

import Link from "next/link";

export default function PremiumPage() {
  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto text-center space-y-8">
        <h1 className="text-4xl font-bold text-gray-900 dark:text-gray-100">
          Upgrade to TradeMatey Premium
        </h1>
        <p className="text-lg text-gray-600 dark:text-gray-400">
          Unlock advanced tools and features with our premium subscription,
          backed by a $1M investment for top-tier service.
        </p>
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-xl">
          <h2 className="text-2xl font-semibold text-gray-900 dark:text-gray-100">
            Premium Benefits
          </h2>
          <ul className="mt-4 space-y-2 text-left text-gray-600 dark:text-gray-400">
            <li>✔ Advanced Job Analytics</li>
            <li>✔ Automated Invoicing</li>
            <li>✔ Marketing Tools</li>
            <li>✔ Priority Support</li>
          </ul>
          <p className="mt-4 text-lg font-medium text-gray-900 dark:text-gray-100">
            Starting at $19.99/month
          </p>
          <Link href="/tradie/subscribe">
            <button className="mt-6 px-8 py-3 bg-yellow-400 text-blue-900 rounded-lg shadow-md hover:bg-yellow-500 transition transform hover:scale-105">
              Subscribe Now
            </button>
          </Link>
        </div>
      </div>
    </div>
  );
}


--- ./src/app/tradie/(tradie)/onboarding/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui";
import { toast } from "react-hot-toast";
import { useRouter } from "next/navigation";
import { supabase } from "@/lib/supabase/client";
import { loadStripe } from "@stripe/stripe-js";
import {
  Elements,
  CardElement,
  useStripe,
  useElements,
} from "@stripe/stripe-js";
import Link from "next/link";

const stripePromise = loadStripe(
  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!
);

function PaymentForm({ onSuccess }: { onSuccess: () => void }) {
  const stripe = useStripe();
  const elements = useElements();
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    const {
      data: { user },
    } = await supabase.auth.getUser();
    const res = await fetch("/api/payments/setup", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ user_id: user!.id }),
    });
    const { clientSecret } = await res.json();
    const { error, setupIntent } = await stripe!.confirmCardSetup(
      clientSecret,
      {
        payment_method: { card: elements!.getElement(CardElement)! },
      }
    );
    if (error) {
      toast.error(error.message!);
    } else {
      await supabase
        .from("users")
        .update({ payment_method_id: setupIntent!.payment_method })
        .eq("id", user!.id);
      toast.success("Payment method added!");
      onSuccess();
    }
    setLoading(false);
  };

  return (
    <form onSubmit={handleSubmit}>
      <CardElement />
      <Button type="submit" disabled={loading} className="mt-2 w-full">
        {loading ? "Processing..." : "Add Payment Method"}
      </Button>
    </form>
  );
}

export default function Onboarding() {
  const [step, setStep] = useState(1);
  const [form, setForm] = useState({
    name: "",
    email: "",
    region: "",
    trade: "",
    bio: "",
    paymentMethod: "",
  });
  const router = useRouter();

  useEffect(() => {
    const fetchUser = async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      const { data } = await supabase
        .from("users")
        .select("email, region, trade, bio")
        .eq("id", user!.id)
        .single();
      setForm((prev) => ({
        ...prev,
        email: data?.email || user?.email || "",
        region: data?.region || "",
        trade: data?.trade || "",
        bio: data?.bio || "",
      }));
    };
    fetchUser();
  }, []);

  const handleNext = async () => {
    if (step < 4) setStep(step + 1);
    else {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      const { error: profileError } = await supabase
        .from("profiles")
        .update({ role: 'tradie' })
        .eq("id", user!.id);
      const { error: userError } = await supabase
        .from("users")
        .update({
          name: form.name,
          region: form.region,
          trade: form.trade,
          bio: form.bio,
          has_completed_onboarding: true,
          roles: ['employee'],
        })
        .eq("id", user!.id);
      if (profileError || userError) {
        toast.error("Failed to save profile");
      } else {
        await supabase.from("badges").insert([
          {
            user_id: user!.id,
            badge: "Welcome Aboard",
            earned_at: new Date().toISOString(),
          },
        ]);
        await supabase.from("notifications").insert({
          user_id: user!.id,
          message: "You earned the 'Welcome Aboard' badge!",
        });
        toast.success("Onboarding completed!");
        router.push("/tradie/dashboard");
      }
    }
  };

  return (
    <div className="max-w-md mx-auto p-6 space-y-6">
      <h1 className="text-3xl font-bold">Welcome to TradeMatey</h1>
      {step === 1 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 1: Watch Intro</h2>
          <video src="/intro.mp4" controls className="w-full rounded" />
          <p>
            Secure milestone payments with 3.33% commission and QBCC-compliant
            14+14 day timelines.
          </p>
        </div>
      )}
      {step === 2 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 2: Personal Info</h2>
          <input
            type="text"
            placeholder="Name"
            value={form.name}
            onChange={(e) => setForm({ ...form, name: e.target.value })}
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
            required
          />
          <input
            type="email"
            placeholder="Email"
            value={form.email}
            disabled
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
          />
          <select
            value={form.region}
            onChange={(e) => setForm({ ...form, region: e.target.value })}
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
            required
          >
            <option value="">Select Region</option>
            <option value="Regional">Regional Queensland</option>
            <option value="Metro">Metro Queensland</option>
          </select>
          <input
            type="text"
            placeholder="Trade (e.g., Plumber)"
            value={form.trade}
            onChange={(e) => setForm({ ...form, trade: e.target.value })}
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
            required
          />
          <textarea
            placeholder="Bio"
            value={form.bio}
            onChange={(e) => setForm({ ...form, bio: e.target.value })}
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
          />
        </div>
      )}
      {step === 3 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 3: Payment Method</h2>
          <Elements stripe={stripePromise}>
            <PaymentForm
              onSuccess={() =>
                setForm({ ...form, interim payment_method: 'Card Added' })
              } />
          </Elements>
          <p className="text-sm text-gray-600">
            3.33% commission per milestone (
            {form.region === "Regional" ? "capped at A$25" : "no cap"}).
          </p>
        </div>
      )}
      {step === 4 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 4: Confirmation</h2>
          <p>Name: {form.name}</p>
          <p>Email: {form.email}</p>
          <p>Region: {form.region}</p>
          <p>Trade: {form.trade}</p>
          <p>Bio: {form.bio}</p>
          <p>Payment Method: {form.paymentMethod}</p>
          <div className="mt-4 p-4 bg-blue-100 rounded">
            <p className="font-bold">Go Premium for A$99/year!</p>
            <p>Enjoy 1.67% commission and priority job matching.</p>
            <Link href="/premium">
              <Button>Learn More</Button>
            </Link>
          </div>
        </div>
      )}
      <Button onClick={handleNext} className="w-full">
        {step === 4 ? "Finish" : "Next"}
      </Button>
    </div>
  );
}

--- ./src/app/tradie/(tradie)/login/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { motion } from "framer-motion";
import { FaEye, FaEyeSlash, FaGoogle, FaEnvelope } from "react-icons/fa";
import { supabase } from "@/lib/supabase/client";
import { toast } from "react-hot-toast";
import { Button } from "@/components/ui/button";

export default function TradieLoginPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [magicLinkSent, setMagicLinkSent] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [mfaRequired, setMfaRequired] = useState(false);
  const [mfaCode, setMfaCode] = useState("");
  const [factorId, setFactorId] = useState("");
  const router = useRouter();

  const handleEmailLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setLoading(true);
    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
      if (error) throw error;

      const { data: factors } = await supabase.auth.mfa.listFactors();
      if (factors?.totp?.length) {
        const id = factors.totp[0].id;
        setFactorId(id);
        setMfaRequired(true);
        const { error: mfaError } = await supabase.auth.mfa.challenge({
          factorId: id,
        });
        if (mfaError) throw mfaError;
      } else {
        toast.success("Login successful!");
      }
    } catch (err: any) {
      setError(err.message);
      toast.error(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleMfaVerify = async () => {
    try {
      const { error } = await supabase.auth.mfa.verify({
        factorId,
        code: mfaCode,
      });
      if (error) throw error;
      toast.success("MFA verified!");
      setMfaRequired(false);
    } catch (err: any) {
      setError(err.message);
      toast.error(err.message);
    }
  };

  const handleOAuthLogin = async () => {
    setLoading(true);
    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: "google",
        options: { redirectTo: `${window.location.origin}/auth/callback` },
      });
      if (error) throw error;
    } catch (err: any) {
      setError(err.message);
      toast.error(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleMagicLink = async () => {
    setLoading(true);
    try {
      const { error } = await supabase.auth.signInWithOtp({
        email,
        options: {
          emailRedirectTo: `${window.location.origin}/auth/callback`,
        },
      });
      if (error) throw error;
      setMagicLinkSent(true);
      toast.success("Magic link sent! Check your email.");
    } catch (err: any) {
      setError(err.message);
      toast.error(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-100 to-gray-300 dark:from-gray-800 dark:to-gray-900 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="absolute inset-0 opacity-10">
        <svg className="w-full h-full" viewBox="0 0 1000 1000">
          <path
            d="M0 0H1000V1000H0V0ZM500 500C600 500 700 400 700 300C700 200 600 100 500 100C400 100 300 200 300 300C300 400 400 500 500 500Z"
            fill="url(#gradient)"
          />
          <defs>
            <linearGradient id="gradient" x1="0" y1="0" x2="1000" y2="1000">
              <stop offset="0%" stopColor="#2563EB" />
              <stop offset="100%" stopColor="#FBBF24" />
            </linearGradient>
          </defs>
        </svg>
      </div>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, ease: "easeOut" }}
        className="relative bg-white dark:bg-gray-800 p-6 sm:p-8 md:p-10 rounded-xl shadow-2xl w-full max-w-md sm:max-w-lg z-10"
      >
        <h1 className="text-3xl sm:text-4xl font-extrabold text-gray-900 dark:text-gray-100 mb-6 text-center">
          Tradie Login
        </h1>
        <p className="text-sm text-gray-600 dark:text-gray-400 mt-4 text-center">
          Sign in to access jobs with secure milestone payments (3.33%
          commission, 1.67% for top tradies) and QBCC compliance. Verify your
          license during onboarding.
        </p>
        {magicLinkSent ? (
          <div className="text-center space-y-4">
            <FaEnvelope
              className="text-blue-600 dark:text-blue-400 mx-auto"
              size={40}
            />
            <p className="text-gray-600 dark:text-gray-400">
              Check <span className="font-semibold">{email}</span> for your
              magic link.
            </p>
            <button
              onClick={() => setMagicLinkSent(false)}
              className="text-blue-600 dark:text-blue-400 hover:underline"
            >
              Try Another Method
            </button>
          </div>
        ) : (
          <>
            {error && (
              <motion.p
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="text-red-500 mb-4 text-center"
              >
                {error}
              </motion.p>
            )}
            <form onSubmit={handleEmailLogin} className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Email
                </label>
                <input
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-gray-100 transition duration-300"
                  required
                />
              </div>
              <div className="relative">
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Password
                </label>
                <input
                  type={showPassword ? "text" : "password"}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-gray-100 transition duration-300"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-10 text-gray-500 dark:text-gray-400"
                  aria-label={showPassword ? "Hide password" : "Show password"}
                >
                  {showPassword ? (
                    <FaEyeSlash size={20} />
                  ) : (
                    <FaEye size={20} />
                  )}
                </button>
              </div>
              {mfaRequired && (
                <div className="mt-4">
                  <input
                    type="text"
                    value={mfaCode}
                    onChange={(e) => setMfaCode(e.target.value)}
                    placeholder="Enter 6-digit MFA code"
                    className="w-full p-2 border rounded"
                  />
                  <Button onClick={handleMfaVerify} className="mt-2 w-full">
                    Verify MFA
                  </Button>
                </div>
              )}
              <Button
                type="submit"
                disabled={loading}
                className="w-full bg-blue-600 hover:bg-blue-700"
              >
                {loading ? "Signing In..." : "Sign In with Email"}
              </Button>
            </form>
            <div className="relative my-6">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300 dark:border-gray-600"></div>
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="px-2 bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400">
                  Or continue with
                </span>
              </div>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <Button
                onClick={handleOAuthLogin}
                disabled={loading}
                variant="outline"
                className="flex items-center justify-center"
              >
                <FaGoogle className="mr-2 text-red-500" /> Google
              </Button>
              <Button
                onClick={handleMagicLink}
                disabled={loading || !email}
                variant="outline"
                className="flex items-center justify-center"
              >
                <FaEnvelope className="mr-2 text-blue-500" /> Magic Link
              </Button>
            </div>
            <div className="mt-6 text-center space-y-2">
              <p className="text-sm text-gray-600 dark:text-gray-400">
                New to TradeMatey?{" "}
                <Link
                  href="/tradie/register"
                  className="text-blue-600 dark:text-blue-400 hover:underline"
                >
                  Register
                </Link>
              </p>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                Forgot password?{" "}
                <Link
                  href="/tradie/reset-password"
                  className="text-blue-600 dark:text-blue-400 hover:underline"
                >
                  Reset
                </Link>
              </p>
            </div>
          </>
        )}
      </motion.div>
    </div>
  );
}


--- ./src/app/tradie/(tradie)/dashboard/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { Card, Button } from "@/components/ui";
import { supabase } from "@/lib/supabase/client";
import { toast } from "react-hot-toast";
import { useRouter } from "next/navigation";

export default function TradieDashboard() {
  const [jobs, setJobs] = useState<any[]>([]);
  const [isTopTradie, setIsTopTradie] = useState(false);
  const router = useRouter();

  const fetchJobs = async () => {
    const {
      data: { user },
    } = await supabase.auth.getUser();
    const { data, error } = await supabase
      .from("jobs")
      .select("*, milestones(*), region")
      .eq("tradie_id", user!.id);
    if (error) throw error;
    setJobs(data || []);
  };

  useEffect(() => {
    const fetchUser = async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      const { data } = await supabase
        .from("users")
        .select("top_tradie")
        .eq("id", user!.id)
        .single();
      setIsTopTradie(data?.top_tradie || false);
    };
    fetchUser();
  }, []);

  useEffect(() => {
    const channel = supabase
      .channel("milestones")
      .on(
        "postgres_changes",
        { event: "UPDATE", schema: "public", table: "milestones" },
        (payload) => {
          if (
            payload.new.status === "verified" ||
            payload.new.status === "paid"
          ) {
            toast.success(
              `Milestone "${payload.new.title}" ${payload.new.status}!`
            );
            fetchJobs();
          }
        }
      )
      .subscribe();
    return () => supabase.removeChannel(channel);
  }, []);

  useEffect(() => {
    fetchJobs().catch((e) => toast.error(e.message));
  }, []);

  const markCompleted = async (milestoneId: string) => {
    const { data, error } = await supabase
      .from("milestones")
      .update({ status: "completed" })
      .eq("id", milestoneId)
      .select();
    if (error) {
      toast.error("Failed to mark as completed");
    } else {
      toast.success("Milestone marked as completed!");
      fetchJobs();
    }
  };

  const viewDetails = (jobId: string) => router.push(`/tradie/job/${jobId}`);

  const disputeMilestone = async (milestoneId: string) => {
    const res = await fetch("/api/disputes", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ milestone_id: milestoneId }),
    });
    if (res.ok) toast.success("Dispute initiated!");
    else toast.error("Failed to initiate dispute");
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold">Tradie Dashboard</h1>
      <p className="text-sm">
        Milestones follow QBCC-compliant 14+14 day payment timelines.
      </p>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
        {jobs.map((job) => (
          <Card key={job.id} className="p-4">
            <h2 className="text-xl">{job.title}</h2>
            <p>Status: {job.status}</p>
            <h3 className="text-lg mt-2">Milestones:</h3>
            <ul>
              {job.milestones.map((milestone: any) => {
                const commissionRate = isTopTradie ? 0.0167 : 0.0333;
                const commission =
                  job.region === "Regional"
                    ? Math.min(milestone.amount * commissionRate, 25)
                    : milestone.amount * commissionRate;
                return (
                  <li key={milestone.id} className="mt-1">
                    {milestone.title}: {milestone.status} (Amount: A$
                    {milestone.amount.toFixed(2)}, Commission: A$
                    {commission.toFixed(2)})
                    {milestone.status === "pending" && (
                      <Button onClick={() => markCompleted(milestone.id)}>
                        Mark as Completed
                      </Button>
                    )}
                    {milestone.status === "completed" && (
                      <Button
                        variant="outline"
                        onClick={() => disputeMilestone(milestone.id)}
                      >
                        Dispute
                      </Button>
                    )}
                    <Button
                      variant="outline"
                      onClick={() => viewDetails(job.id)}
                    >
                      View Details
                    </Button>
                  </li>
                );
              })}
            </ul>
          </Card>
        ))}
      </div>
    </div>
  );
}


--- ./src/app/tradie/(tradie)/referrals/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useAuth } from "@/context/AuthContext";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";

export default function TradieReferrals() {
  const { user } = useAuth();
  const [referralLink, setReferralLink] = useState("");
  const [credits, setCredits] = useState(0);

  const { data, error, isLoading } = useQuery({
    queryKey: ["tradieReferrals", user?.id],
    queryFn: async () => {
      const res = await fetch(`/api/referrals?user_id=${user?.id}`);
      if (!res.ok) throw new Error("Failed to fetch referral data");
      return res.json();
    },
  });

  useEffect(() => {
    if (data) {
      setCredits(data.credits || 0);
      setReferralLink(
        `${window.location.origin}/tradie/signup?ref=${user?.id}`
      );
    }
    if (error) toast.error(error.message);
  }, [data, error, user?.id]);

  const handleInvite = async (referredUserId: string) => {
    const res = await fetch("/api/referrals", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        referrer_id: user?.id,
        referred_user_id,
        role: "tradie",
      }),
    });
    if (res.ok) {
      toast.success("Referral recorded! Earn $50 when they complete a job.");
    } else {
      toast.error("Referral failed");
    }
  };

  if (isLoading) return <div className="text-center py-10">Loading...</div>;

  return (
    <div className="space-y-6 max-w-md mx-auto p-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Tradie Referrals
      </h1>
      <p className="text-gray-600 dark:text-gray-400">
        Invite tradies and earn $50 credit when they complete their first job!
      </p>
      <p className="text-gray-800 dark:text-gray-200 font-semibold">
        Your Credits: ${credits}
      </p>
      <div className="space-y-4">
        <input
          type="text"
          value={referralLink}
          readOnly
          className="w-full rounded-md border-gray-300 dark:border-gray-600 bg-gray-100 dark:bg-gray-800 p-2"
        />
        <button
          onClick={() => navigator.clipboard.writeText(referralLink)}
          className="w-full px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors"
        >
          Copy Referral Link
        </button>
        <div>
          <input
            type="text"
            placeholder="Enter referred tradie ID"
            onChange={(e) => handleInvite(e.target.value)}
            className="w-full rounded-md border-gray-300 dark:border-gray-600 focus:border-green-500 focus:ring-green-500 dark:bg-gray-700 dark:text-white p-2"
          />
        </div>
      </div>
    </div>
  );
}


--- ./src/app/tradie/(tradie)/disputes/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { Card, Button } from "@/components/ui";
import { useAuth } from "@/context/AuthContext";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";

export default function TradieDisputes() {
  const { user } = useAuth();
  const [disputes, setDisputes] = useState<any[]>([]);

  const { data, error, isLoading } = useQuery({
    queryKey: ["disputes", user?.id],
    queryFn: async () => {
      const res = await fetch(`/api/disputes?user_id=${user?.id}`);
      if (!res.ok) throw new Error("Failed to fetch disputes");
      return res.json();
    },
  });

  useEffect(() => {
    if (data) setDisputes(data);
    if (error) toast.error(error.message);
  }, [data, error]);

  if (isLoading) return <div className="text-center py-10">Loading...</div>;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Disputes
      </h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {disputes.map((dispute) => (
          <Card key={dispute.id} className="p-6 shadow-lg">
            <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">
              {dispute.title}
            </h2>
            <p className="text-gray-600 dark:text-gray-400 mt-2">
              Job: {dispute.jobs.title}
            </p>
            <p className="text-gray-600 dark:text-gray-400">
              Client: {dispute.users.name}
            </p>
            <p className="text-gray-600 dark:text-gray-400">
              Status:{" "}
              {dispute.qbcc_dispute ? "Escalated to QBCC" : "In Dispute"}
            </p>
          </Card>
        ))}
      </div>
    </div>
  );
}


--- ./src/app/tradie/(tradie)/availability/page.tsx ---

"use client";

import { useState } from "react";
import { Button } from "@/components/ui";
import { toast } from "react-hot-toast";
import { useAuth } from "@/context/AuthContext";

export default function Availability() {
  const { user } = useAuth();
  const [availability, setAvailability] = useState({
    monday: false,
    tuesday: false,
    wednesday: false,
    thursday: false,
    friday: false,
  });

  const handleSave = async () => {
    const res = await fetch("/api/tradies", {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ user_id: user?.id, availability }),
    });
    if (res.ok) toast.success("Availability updated!");
    else toast.error("Update failed");
  };

  return (
    <div className="max-w-md mx-auto p-6 space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Set Availability
      </h1>
      <div className="space-y-4">
        {["monday", "tuesday", "wednesday", "thursday", "friday"].map((day) => (
          <label
            key={day}
            className="block text-sm font-medium text-gray-700 dark:text-gray-300"
          >
            <input
              type="checkbox"
              checked={availability[day as keyof typeof availability]}
              onChange={(e) =>
                setAvailability({ ...availability, [day]: e.target.checked })
              }
              className="mr-2"
            />
            {day.charAt(0).toUpperCase() + day.slice(1)}
          </label>
        ))}
        <Button onClick={handleSave} className="w-full">
          Save Availability
        </Button>
      </div>
    </div>
  );
}


--- ./src/app/tradie/(tradie)/messages/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useAuth } from "@/context/AuthContext";
import { useQuery, useMutation } from "@tanstack/react-query";
import { toast } from "react-hot-toast";

export default function TradieMessages() {
  const { user } = useAuth();
  const [messages, setMessages] = useState<any[]>([]);
  const [newMessage, setNewMessage] = useState("");
  const [selectedJobId, setSelectedJobId] = useState("");

  const { data, error, isLoading } = useQuery({
    queryKey: ["tradieMessages", user?.id],
    queryFn: async () => {
      const res = await fetch(`/api/messages?user_id=${user?.id}`);
      if (!res.ok) throw new Error("Failed to fetch messages");
      return res.json();
    },
  });

  const mutation = useMutation({
    mutationFn: async ({
      receiverId,
      jobId,
    }: {
      receiverId: string;
      jobId: string;
    }) => {
      const res = await fetch("/api/messages", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          sender_id: user?.id,
          receiver_id: receiverId,
          content: newMessage,
          job_id: jobId,
        }),
      });
      if (!res.ok) throw new Error("Failed to send message");
      return res.json();
    },
    onSuccess: (newMsg) => {
      setMessages([...messages, newMsg]);
      setNewMessage("");
      toast.success("Message sent!");
    },
    onError: (err: any) => toast.error(err.message),
  });

  useEffect(() => {
    if (data) setMessages(data);
    if (error) toast.error(error.message);
  }, [data, error]);

  if (isLoading) return <div className="text-center py-10">Loading...</div>;

  const lastMsg = messages.length > 0 ? messages[messages.length - 1] : null;
  const receiverId =
    lastMsg?.sender_id !== user?.id ? lastMsg?.sender_id : lastMsg?.receiver_id;

  return (
    <div className="space-y-6 max-w-2xl mx-auto p-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Messages
      </h1>
      <div className="space-y-4 max-h-96 overflow-y-auto">
        {messages.map((msg) => (
          <div
            key={msg.id}
            className={`p-4 rounded-lg max-w-lg ${
              msg.sender_id === user?.id
                ? "bg-green-100 dark:bg-green-900 ml-auto"
                : "bg-gray-100 dark:bg-gray-800 mr-auto"
            }`}
          >
            <p className="text-sm text-gray-600 dark:text-gray-400">
              {msg.sender_id === user?.id ? "You" : msg.sender.name} to{" "}
              {msg.sender_id === user?.id ? msg.receiver.name : "You"}
            </p>
            <p className="text-gray-900 dark:text-gray-100">{msg.content}</p>
            <p className="text-xs text-gray-500 dark:text-gray-500 mt-1">
              {new Date(msg.created_at).toLocaleString()}
            </p>
          </div>
        ))}
      </div>
      <div className="flex space-x-2">
        <select
          value={selectedJobId}
          onChange={(e) => setSelectedJobId(e.target.value)}
          className="w-1/3 rounded-md border-gray-300 dark:border-gray-600 focus:border-green-500 focus:ring-green-500 dark:bg-gray-700 dark:text-white p-2"
        >
          <option value="">Select Job</option>
          {/* Assume jobs are fetched or stored in context */}
          <option value="job1">Job 1</option>
          <option value="job2">Job 2</option>
        </select>
        <input
          type="text"
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          placeholder="Type a message (e.g., Milestone update)..."
          className="flex-1 rounded-md border-gray-300 dark:border-gray-600 focus:border-green-500 focus:ring-green-500 dark:bg-gray-700 dark:text-white p-2"
        />
        <button
          onClick={() =>
            mutation.mutate({
              receiverId: receiverId || "",
              jobId: selectedJobId,
            })
          }
          disabled={
            !newMessage || !receiverId || !selectedJobId || mutation.isLoading
          }
          className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:bg-gray-400 dark:disabled:bg-gray-600 transition-colors"
        >
          {mutation.isLoading ? "Sending..." : "Send"}
        </button>
      </div>
    </div>
  );
}


--- ./src/app/tradie/(tradie)/settings/page.tsx ---

"use client";

import { useState } from "react";
import { supabase } from "@/lib/supabase/client";
import { Button } from "@/components/ui/button";
import QRCode from "qrcode.react";
import { toast } from "react-hot-toast";

export default function Settings() {
  const [qrCode, setQrCode] = useState("");
  const [mfaCode, setMfaCode] = useState("");

  const enableMFA = async () => {
    const { data: user } = await supabase.auth.getUser();
    const { data, error } = await supabase.auth.mfa.enroll({
      userId: user.user!.id,
      factorType: "totp",
    });
    if (error) {
      toast.error(error.message);
    } else {
      setQrCode(data.totp.qr_code);
    }
  };

  const verifyMFA = async () => {
    const { data: factors } = await supabase.auth.mfa.listFactors();
    if (!factors?.totp?.length) {
      toast.error("No TOTP factor found");
      return;
    }
    const factorId = factors.totp[0].id;
    const { error } = await supabase.auth.mfa.verify({
      factorId,
      code: mfaCode,
    });
    if (error) {
      toast.error(error.message);
    } else {
      toast.success("MFA enabled!");
      setQrCode("");
      setMfaCode("");
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold">Settings</h1>
      <div className="mt-4">
        <h2 className="text-xl">Multi-Factor Authentication</h2>
        {!qrCode ? (
          <Button onClick={enableMFA}>Enable MFA</Button>
        ) : (
          <div className="space-y-4">
            <p>Scan this QR code with an authenticator app:</p>
            <QRCode value={qrCode} />
            <input
              type="text"
              value={mfaCode}
              onChange={(e) => setMfaCode(e.target.value)}
              placeholder="Enter 6-digit code"
              className="mt-2 p-2 border rounded w-full"
            />
            <Button onClick={verifyMFA} className="mt-2">
              Verify
            </Button>
          </div>
        )}
      </div>
    </div>
  );
}


--- ./src/app/tradie/(tradie)/profile/page.tsx ---

"use client";

import { useState } from "react";
import { Button } from "@/components/ui";
import { toast } from "react-hot-toast";
import { useAuth } from "@/context/AuthContext";

export default function Profile() {
  const { user } = useAuth();
  const [form, setForm] = useState({
    name: user?.name || "",
    trade: user?.trade || "",
    region: user?.region || "",
  });

  const handleSave = async () => {
    // Placeholder for updating profile via API
    toast.success("Profile updated!");
  };

  return (
    <div className="max-w-md mx-auto p-6 space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Edit Profile
      </h1>
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Name
          </label>
          <input
            type="text"
            value={form.name}
            onChange={(e) => setForm({ ...form, name: e.target.value })}
            className="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Trade
          </label>
          <input
            type="text"
            value={form.trade}
            onChange={(e) => setForm({ ...form, trade: e.target.value })}
            className="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Region
          </label>
          <input
            type="text"
            value={form.region}
            onChange={(e) => setForm({ ...form, region: e.target.value })}
            className="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
          />
        </div>
        <Button onClick={handleSave} className="w-full">
          Save Changes
        </Button>
      </div>
    </div>
  );
}


--- ./src/app/tradie/(tradie)/job/[id]/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/router";
import { Card, Button } from "@/components/ui";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";

export default function TradieJobDetails({
  params,
}: {
  params: { id: string };
}) {
  const [job, setJob] = useState<any>(null);
  const { data, error, isLoading } = useQuery({
    queryKey: ["job", params.id],
    queryFn: async () => {
      const res = await fetch(`/api/jobs?job_id=${params.id}`);
      if (!res.ok) throw new Error("Failed to fetch job");
      return res.json();
    },
  });

  useEffect(() => {
    if (data && data.length > 0) setJob(data[0]);
    if (error) toast.error(error.message);
  }, [data, error]);

  if (isLoading) return <div className="text-center py-10">Loading...</div>;
  if (!job) return <div className="text-center py-10">Job not found</div>;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        {job.title}
      </h1>
      <Card className="p-6 shadow-lg">
        <p className="text-gray-600 dark:text-gray-400">
          Description: {job.description}
        </p>
        <p className="text-gray-600 dark:text-gray-400">
          Budget: ${job.budget}
        </p>
        <p className="text-gray-600 dark:text-gray-400">Status: {job.status}</p>
        <p className="text-gray-600 dark:text-gray-400">
          Payment Type: {job.payment_type}
        </p>
        {job.payment_type === "milestone" && (
          <>
            <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200 mt-4">
              Milestones
            </h2>
            <ul className="mt-2 space-y-2">
              {job.milestones.map((milestone: any) => (
                <li
                  key={milestone.id}
                  className="p-3 bg-gray-50 dark:bg-gray-800 rounded-lg"
                >
                  {milestone.title}: {milestone.status} (${milestone.amount})
                  {milestone.status === "pending" && (
                    <Button
                      onClick={() =>
                        alert("Mark complete functionality coming soon!")
                      }
                      className="mt-2"
                    >
                      Mark Complete
                    </Button>
                  )}
                </li>
              ))}
            </ul>
          </>
        )}
      </Card>
    </div>
  );
}


--- ./src/app/tradie/(tradie)/page.tsx ---

"use client";

import Link from "next/link";

export default function TradieHome() {
  return (
    <div className="text-center space-y-6 py-12">
      <h1 className="text-5xl font-bold text-gray-900 dark:text-gray-100">
        Welcome to TradeMatey - Tradie Portal
      </h1>
      <p className="text-lg text-gray-600 dark:text-gray-400">
        Manage your jobs, update availability, and connect with clients.
      </p>
      <div className="space-x-4">
        <Link href="/tradie/dashboard">
          <button className="px-6 py-3 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors">
            Go to Dashboard
          </button>
        </Link>
        <Link href="/tradie/availability">
          <button className="px-6 py-3 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors">
            Update Availability
          </button>
        </Link>
      </div>
    </div>
  );
}


--- ./src/app/finance/(finance)/dashboard/page.tsx ---

"use client";

import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";

export default function FinanceDashboard() {
  const [analytics, setAnalytics] = useState<any>({});

  const { data, error, isLoading } = useQuery({
    queryKey: ["analytics"],
    queryFn: async () => {
      const res = await fetch("/api/analytics");
      if (!res.ok) throw new Error("Failed to fetch analytics");
      return res.json();
    },
  });

  useEffect(() => {
    if (data) setAnalytics(data);
    if (error) toast.error(error.message);
  }, [data, error]);

  if (isLoading) return <div className="text-center py-10">Loading...</div>;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        Finance Dashboard
      </h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
          <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">
            Total Revenue
          </h2>
          <p className="text-3xl font-bold text-gray-900 dark:text-gray-100 mt-2">
            ${analytics.totalRevenue}
          </p>
        </div>
        <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
          <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">
            Completed Jobs
          </h2>
          <p className="text-3xl font-bold text-gray-900 dark:text-gray-100 mt-2">
            {analytics.completedJobs}
          </p>
        </div>
      </div>
    </div>
  );
}


--- ./src/app/finance/(finance)/page.tsx ---

"use client";

import Link from "next/link";

export default function FinanceHome() {
  return (
    <div className="text-center space-y-6 py-12">
      <h1 className="text-5xl font-bold text-gray-900 dark:text-gray-100">
        Welcome to TradeMatey - Finance Portal
      </h1>
      <p className="text-lg text-gray-600 dark:text-gray-400">
        Manage payments, escrow, and financial reports.
      </p>
      <div className="space-x-4">
        <Link href="/finance/dashboard">
          <button className="px-6 py-3 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors">
            Go to Dashboard
          </button>
        </Link>
      </div>
    </div>
  );
}


--- ./src/app/layout.tsx ---

import { Providers } from "@/components/Providers";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import { Chatbot } from "@/components/ui/Chatbot";
import "./globals.css"; // Adjust path if your CSS file is elsewhere

export const metadata = {
  title: "TradeMatey - Find Trusted Tradies",
  description:
    "Post jobs, pay securely with milestones, and resolve disputes with TradeMatey.",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>
        <Providers>
          <Header />
          <main>{children}</main>
          <Footer />
          <Chatbot />
        </Providers>
      </body>
    </html>
  );
}


--- ./src/app/page.tsx ---

"use client";

import Link from "next/link";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { useEffect } from "react";
import { Button } from "@/components/ui/Button";
import { Card } from "@/components/ui/Card";
import { useQuery } from "@tanstack/react-query";

export default function Home() {
  const { data: session } = useSession();
  const router = useRouter();

  useEffect(() => {
    if (session?.user) {
      const role = session.user.role;
      const hasCompletedOnboarding =
        session.user.has_completed_onboarding ?? false;
      if (hasCompletedOnboarding) {
        router.push(`/${role}/dashboard`);
      } else {
        router.push(`/${role}/onboarding`);
      }
    }
  }, [session, router]);

  const { data: analytics } = useQuery({
    queryKey: ["analytics"],
    queryFn: async () => {
      const res = await fetch("/api/analytics");
      if (!res.ok) throw new Error("Failed to fetch analytics");
      return res.json();
    },
  });

  return (
    <div className="min-h-screen flex flex-col">
      <main className="flex-grow">
        <section className="relative bg-blue-600 py-20">
          <div className="container mx-auto text-center text-white">
            <h1 className="text-4xl md:text-6xl font-bold mb-4">
              Find Trusted Tradies with TradeMatey
            </h1>
            <p className="text-xl mb-6">
              Post jobs, pay securely with milestones, and resolve disputes with
              QBCC support.
            </p>
            <div className="space-x-4">
              <Link href="/client/post-job">
                <Button className="bg-blue-500 hover:bg-blue-600">
                  Post a Job
                </Button>
              </Link>
              <Link href="/tradie/login">
                <Button variant="outline">Join as a Tradie</Button>
              </Link>
            </div>
          </div>
        </section>
        <section className="py-16 bg-gray-100">
          <div className="container mx-auto grid grid-cols-3 gap-8">
            <Card className="p-6">
              <h2 className="text-2xl font-semibold">Milestone Payments</h2>
              <p className="mt-2">
                Pay only for completed work with our secure milestone system.
              </p>
            </Card>
            <Card className="p-6">
              <h2 className="text-2xl font-semibold">AI Tradie Matching</h2>
              <p className="mt-2">
                Our AI matches you with top tradies based on skills, location,
                and ratings.
              </p>
            </Card>
            <Card className="p-6">
              <h2 className="text-2xl font-semibold">QBCC Compliance</h2>
              <p className="mt-2">
                14+14 day payment timelines and dispute escalation to QBCC.
              </p>
            </Card>
          </div>
        </section>
        {analytics && (
          <section className="py-16 text-center">
            <h2 className="text-3xl font-bold mb-8">
              TradeMatey by the Numbers
            </h2>
            <div className="grid grid-cols-3 gap-8">
              <div>
                <p className="text-4xl font-bold">{analytics.totalJobs}</p>
                <p>Jobs Completed</p>
              </div>
              <div>
                <p className="text-4xl font-bold">{analytics.newUsers}</p>
                <p>New Users (30 Days)</p>
              </div>
              <div>
                <p className="text-4xl font-bold">
                  {analytics.completionRate}%
                </p>
                <p>Completion Rate</p>
              </div>
            </div>
          </section>
        )}
      </main>
    </div>
  );
}


--- ./src/app/api/premium/route.ts ---

import { createServerClient } from "@/lib/supabase/server";
import { stripe } from "@/lib/stripe";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function POST(request: Request) {
  try {
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: profile, error: profileError } = await supabase
      .from("users")
      .select("stripe_customer_id")
      .eq("id", user.id)
      .single();

    let customerId = profile?.stripe_customer_id;
    if (!customerId) {
      const customer = await stripe.customers.create({ email: user.email });
      customerId = customer.id;
      await supabase
        .from("users")
        .update({ stripe_customer_id: customerId })
        .eq("id", user.id);
    }

    const session = await stripe.checkout.sessions.create({
      customer: customerId,
      payment_method_types: ["card"],
      line_items: [{ price: "your_price_id", quantity: 1 }],
      mode: "subscription",
      success_url: `${process.env.NEXT_PUBLIC_APP_URL}/dashboard?success=true`,
      cancel_url: `${process.env.NEXT_PUBLIC_APP_URL}/dashboard?cancel=true`,
    });

    await supabase.from("premium").insert({
      user_id: user.id,
      stripe_subscription_id: session.subscription,
      status: "pending",
    });

    return NextResponse.json({ url: session.url });
  } catch (error) {
    console.error("Premium subscription error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

export async function GET(request: Request) {
  try {
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: subscription, error } = await supabase
      .from("premium")
      .select("stripe_subscription_id, status")
      .eq("user_id", user.id)
      .single();

    if (error || !subscription) {
      return NextResponse.json({ subscribed: false });
    }

    const stripeSubscription = await stripe.subscriptions.retrieve(
      subscription.stripe_subscription_id
    );
    return NextResponse.json({
      subscribed: stripeSubscription.status === "active",
      status: stripeSubscription.status,
    });
  } catch (error) {
    console.error("Premium status error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


--- ./src/app/api/community/route.ts ---

import { NextResponse } from "next/server";
import { createServerClient } from "@/lib/supabase/server";
import { cookies } from "next/headers";

export async function GET(request: Request) {
  try {
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const { data, error } = await supabase
      .from("community")
      .select("id, user_id, post_id, content, created_at, users(name)")
      .order("created_at", { ascending: false });

    if (error) throw error;
    return NextResponse.json(data);
  } catch (error: any) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}

export async function POST(request: Request) {
  try {
    const { user_id, content } = await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const { data, error } = await supabase
      .from("community")
      .insert([{ user_id, content }])
      .select();

    if (error) throw error;
    return NextResponse.json(data[0]);
  } catch (error: any) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}


--- ./src/app/api/book/route.ts ---

import { NextResponse } from "next/server";
import { supabase } from "@/lib/supabase/server";

export async function POST(request: Request) {
  try {
    const { jobDescription, location, userId } = await request.json();
    const { data, error } = await supabase
      .from("jobs")
      .insert([
        {
          title: jobDescription,
          description: jobDescription,
          client_id: userId,
          location,
          status: "open",
          payment_type: "milestone",
        },
      ])
      .select()
      .single();
    if (error) throw error;
    return NextResponse.json(data);
  } catch (error: any) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}


--- ./src/app/api/auth/[...nextauth]/route.ts ---

import NextAuth, { NextAuthOptions, Session, User } from "next-auth";
import GoogleProvider from "next-auth/providers/google";
import { SupabaseAdapter } from "@auth/supabase-adapter";
import { createClient } from "@supabase/supabase-js";

// Initialize Supabase client with service role key for full access
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!,
  {
    auth: {
      persistSession: false, // We don't need session persistence for the service role
    },
  }
);

// Custom adapter to handle user lookups with profiles
const customAdapter = {
  ...SupabaseAdapter({
    url: process.env.NEXT_PUBLIC_SUPABASE_URL!,
    secret: process.env.SUPABASE_SERVICE_ROLE_KEY!,
    schema: "public", // Use 'public' for accounts, users, etc.
  }),
  async createUser(
    userData: Omit<User, "id"> & { id?: string }
  ): Promise<User> {
    if (!userData.email) {
      throw new Error("Email is required for user creation");
    }

    // Check if user exists in auth.users
    const { data: authUser, error: authError } =
      await supabase.auth.admin.listUsers();
    const existingUser = authUser?.users.find(
      (u) => u.email === userData.email
    );

    if (authError || !existingUser) {
      console.error(
        "createUser error: User not found in auth.users",
        authError
      );
      throw new Error("User not found in auth.users");
    }

    return {
      id: existingUser.id,
      email: userData.email,
      role: "client",
      created_at: new Date().toISOString(),
    };
  },
  async getUser(id: string): Promise<User | null> {
    const { data, error } = await supabase
      .rpc("get_user_with_profile", { user_id: id })
      .single();

    if (error || !data) {
      // console.error("getUser error:", error);
      return null;
    }

    return {
      id: data.id,
      email: data.email,
      role: data.role,
      created_at: data.created_at,
    };
  },
  async getUserByEmail(email: string): Promise<User | null> {
    const { data, error } = await supabase
      .rpc("get_user_by_email_with_profile", { user_email: email })
      .single();

    if (error || !data) {
      // console.error("getUserByEmail error:", error);
      return null;
    }

    return {
      id: data.id,
      email: data.email,
      role: data.role,
      created_at: data.created_at,
    };
  },
  async getUserByAccount({
    providerAccountId,
    provider,
  }: {
    providerAccountId: string;
    provider: string;
  }): Promise<User | null> {
    const { data: account, error: accountError } = await supabase
      .from("accounts")
      .select("user_id")
      .eq("provider_account_id", providerAccountId)
      .eq("provider", provider)
      .single();

    if (accountError || !account) {
      // console.error("getUserByAccount account error:", accountError);
      return null;
    }

    const { data, error } = await supabase
      .rpc("get_user_with_profile", { user_id: account.user_id })
      .single();

    if (error || !data) {
      // console.error("getUserByAccount user error:", error);
      return null;
    }

    return {
      id: data.id,
      email: data.email,
      role: data.role,
      created_at: data.created_at,
    };
  },
  async linkAccount(account: {
    userId: string;
    provider: string;
    providerAccountId: string;
    access_token?: string;
    expires_at?: number;
    scope?: string;
    token_type?: string;
    id_token?: string;
  }): Promise<void> {
    if (!account.userId) {
      // console.error("linkAccount error: userId is missing from account object");
      throw new Error("User ID is missing; cannot link account");
    }

    const { error } = await supabase.from("accounts").insert({
      user_id: account.userId,
      provider: account.provider,
      provider_account_id: account.providerAccountId,
      access_token: account.access_token,
      expires_at: account.expires_at,
      scope: account.scope,
      token_type: account.token_type,
      id_token: account.id_token,
    });

    if (error) {
      // console.error("linkAccount insert error:", error);
      throw new Error(`Failed to link account: ${error.message}`);
    }
  },
  async createSession(session: {
    sessionToken: string;
    userId: string;
    expires: Date;
  }) {
    const { data, error } = await supabase
      .from("sessions")
      .insert({
        session_token: session.sessionToken,
        user_id: session.userId,
        expires: session.expires.toISOString(),
      })
      .select()
      .single();

    if (error) {
      // console.error("createSession error:", error);
      throw new Error(`Failed to create session: ${error.message}`);
    }

    return {
      sessionToken: data.session_token,
      userId: data.user_id,
      expires: new Date(data.expires),
    };
  },
  async getSessionAndUser(sessionToken: string) {
    // Fetch the session from public.sessions
    const { data: session, error: sessionError } = await supabase
      .from("sessions")
      .select("*")
      .eq("session_token", sessionToken)
      .single();

    if (sessionError || !session) {
      // console.error("getSessionAndUser session error:", sessionError);
      return null;
    }

    if (new Date(session.expires) < new Date()) {
      return null; // Session expired
    }

    // Manually fetch the user from auth.users using the admin API
    const { data: user, error: userError } =
      await supabase.auth.admin.getUserById(session.user_id);

    if (userError || !user?.user) {
      // console.error("getSessionAndUser user error:", userError);
      return null;
    }

    // Fetch the profile from public.profiles
    const { data: profile, error: profileError } = await supabase
      .from("profiles")
      .select("role, created_at")
      .eq("id", session.user_id)
      .single();

    if (profileError) {
      // console.error("getSessionAndUser profile error:", profileError);
    }

    return {
      session: {
        sessionToken: session.session_token,
        userId: session.user_id,
        expires: new Date(session.expires),
      },
      user: {
        id: user.user.id,
        email: user.user.email,
        role: profile?.role || "client",
        created_at: profile?.created_at || new Date().toISOString(),
      },
    };
  },
  async updateSession(session: { sessionToken: string; expires?: Date }) {
    const { data, error } = await supabase
      .from("sessions")
      .update({
        expires: session.expires?.toISOString(),
      })
      .eq("session_token", session.sessionToken)
      .select()
      .single();

    if (error || !data) {
      // console.error("updateSession error:", error);
      throw new Error(`Failed to update session: ${error.message}`);
    }

    return {
      sessionToken: data.session_token,
      userId: data.user_id,
      expires: new Date(data.expires),
    };
  },
  async deleteSession(sessionToken: string) {
    const { error } = await supabase
      .from("sessions")
      .delete()
      .eq("session_token", sessionToken);

    if (error) {
      // console.error("deleteSession error:", error);
      throw new Error(`Failed to delete session: ${error.message}`);
    }
  },
};

// Extend the Session type to include custom fields
declare module "next-auth" {
  interface Session {
    user: {
      id: string;
      email?: string;
      role?: string;
      created_at?: string;
    };
  }

  interface User {
    id: string;
    email?: string;
    role?: string;
    created_at?: string;
  }
}

export const authOptions: NextAuthOptions = {
  adapter: customAdapter,
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
  ],
  callbacks: {
    async signIn({ user, account, profile }) {
      const email = user.email;
      if (!email) {
        console.error("signIn error: Email is missing from user object");
        return false;
      }

      const { data: existingUsers, error: listError } =
        await supabase.auth.admin.listUsers();
      if (listError) {
        return false;
      }

      const existingUser = existingUsers.users.find((u) => u.email === email);
      if (existingUser) {
        user.id = existingUser.id;
        return true;
      }

      const { data: newUser, error: createError } =
        await supabase.auth.admin.createUser({
          email: email,
          email_confirmed_at: new Date().toISOString(),
          user_metadata: {
            name: user.name,
            picture: user.image,
          },
        });

      if (createError) {
        console.error("signIn create user error:", createError);
        return false;
      }

      user.id = newUser.user.id;
      return true;
    },
    async session({ session, user }: { session: Session; user: User }) {
      session.user = {
        ...session.user,
        id: user.id,
        role: user.role ?? null,
        hasProfile: user.hasProfile ?? false,
      };
      return session;
    },
    async redirect({ url, baseUrl }) {
      return `${baseUrl}/dashboard`; // ⬅️ Redirects all users to dashboard
    },
  },
  secret: process.env.NEXTAUTH_SECRET,
  debug: true,
};

const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };


--- ./src/app/api/tradies/routes.ts ---

import { NextResponse } from "next/server";
import { createServerClient } from "@/lib/supabase/server";
import { cookies } from "next/headers";

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const trade = searchParams.get("trade");

    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    let query = supabase
      .from("tradies")
      .select("id, user_id, trade, region, ratings")
      .eq("verified", true); // Assuming tradies need verification

    if (trade) query = query.eq("trade", trade);

    const { data, error } = await query.order("ratings", { ascending: false });
    if (error) throw error;

    return NextResponse.json(data);
  } catch (error: any) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}

export async function PATCH(request: Request) {
  try {
    const { user_id, availability } = await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const { data: tradie, error: tradieError } = await supabase
      .from("tradies")
      .select("id")
      .eq("user_id", user_id)
      .single();

    if (tradieError || !tradie) {
      return NextResponse.json({ error: "Tradie not found" }, { status: 404 });
    }

    const { data, error } = await supabase
      .from("availability")
      .insert({
        tradie_id: tradie.id,
        start_time: availability.start,
        end_time: availability.end,
      })
      .select();

    if (error) throw error;
    return NextResponse.json({
      message: "Availability updated",
      data: data[0],
    });
  } catch (error: any) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}


--- ./src/app/api/availablity/route.ts ---

// src/app/api/availability/route.js
import { supabase } from "../../../lib/supabase";
import { NextResponse } from "next/server";

// Get current user's availability
export async function GET(request) {
  const {
    data: { user },
    error: authError,
  } = await supabase.auth.getUser();
  if (authError || !user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const { data, error } = await supabase
    .from("availability")
    .select("id, available_dates, updated_at")
    .eq("user_id", user.id)
    .single();

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json(data || { available_dates: {} });
}

// Update availability
export async function POST(request) {
  const {
    data: { user },
    error: authError,
  } = await supabase.auth.getUser();
  if (authError || !user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const { available_dates } = await request.json();
  if (!available_dates) {
    return NextResponse.json(
      { error: "Missing available_dates" },
      { status: 400 }
    );
  }

  const { data, error } = await supabase
    .from("availability")
    .upsert(
      {
        user_id: user.id,
        available_dates,
        updated_at: new Date().toISOString(),
      },
      { onConflict: ["user_id"] }
    )
    .select("id, available_dates, updated_at")
    .single();

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json(data);
}


--- ./src/app/api/users/update-stats/route.ts ---

import { NextResponse } from "next/server";
import { supabase } from "@/lib/supabase/server";

export async function POST(request: Request) {
  try {
    const { tradie_id, rating } = await request.json();

    const { data: user } = await supabase
      .from("users")
      .select("completed_jobs, average_rating")
      .eq("id", tradie_id)
      .single();

    const newCompletedJobs = (user.completed_jobs || 0) + 1;
    const newAverageRating =
      ((user.average_rating || 0) * user.completed_jobs + rating) /
      newCompletedJobs;

    const isTopTradie = newCompletedJobs >= 10 && newAverageRating >= 4.5;

    const { data, error } = await supabase
      .from("users")
      .update({
        completed_jobs: newCompletedJobs,
        average_rating: newAverageRating,
        top_tradie: isTopTradie,
      })
      .eq("id", tradie_id)
      .select();

    if (error) throw error;
    return NextResponse.json({
      message: "Stats updated",
      top_tradie: isTopTradie,
      data: data[0],
    });
  } catch (error: any) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}


--- ./src/app/api/jobs/reassign/route.ts ---

import { createServerClient } from "@/lib/supabase/server";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function POST(request: Request) {
  try {
    const { title, description, budget, milestones, region } =
      await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: profile, error: profileError } = await supabase
      .from("profiles")
      .select("role")
      .eq("id", user.id)
      .single();

    if (profileError || profile?.role !== "client") {
      return NextResponse.json(
        { error: "Only clients can post jobs" },
        { status: 403 }
      );
    }

    const { data: job, error: jobError } = await supabase
      .from("jobs")
      .insert({
        title,
        description,
        budget,
        client_id: user.id,
        status: "pending",
        payment_type: "milestone",
        region,
      })
      .select()
      .single();

    if (jobError) throw new Error(jobError.message);

    const milestoneInserts = milestones.map((m: any) => ({
      job_id: job.id,
      title: m.title,
      description: m.description,
      amount: m.amount,
      due_date: m.due_date,
      status: "pending",
    }));

    const { error: milestoneError } = await supabase
      .from("milestones")
      .insert(milestoneInserts);
    if (milestoneError) throw new Error(milestoneError.message);

    return NextResponse.json({ job, milestones: milestoneInserts });
  } catch (error) {
    console.error("Job creation error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


--- ./src/app/api/jobs/route.ts ---

import { createServerClient } from "@/lib/supabase/server";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function POST(request: Request) {
  try {
    const { title, description, budget, milestones, region } =
      await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: profile, error: profileError } = await supabase
      .from("profiles")
      .select("role")
      .eq("id", user.id)
      .single();

    if (profileError || profile?.role !== "client") {
      return NextResponse.json(
        { error: "Only clients can post jobs" },
        { status: 403 }
      );
    }

    const { data: job, error: jobError } = await supabase
      .from("jobs")
      .insert({
        title,
        description,
        budget,
        client_id: user.id,
        status: "pending",
        payment_type: "milestone",
        region,
      })
      .select()
      .single();

    if (jobError) throw new Error(jobError.message);

    const milestoneInserts = milestones.map((m: any) => ({
      job_id: job.id,
      title: m.title,
      description: m.description,
      amount: m.amount,
      due_date: m.due_date,
      status: "pending",
    }));

    const { error: milestoneError } = await supabase
      .from("milestones")
      .insert(milestoneInserts);
    if (milestoneError) throw new Error(milestoneError.message);

    return NextResponse.json({ job, milestones: milestoneInserts });
  } catch (error) {
    console.error("Job creation error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


--- ./src/app/api/notifications/route.ts ---

import { createServerClient } from "@/lib/supabase/server";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function GET(request: Request) {
  try {
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: notifications, error } = await supabase
      .from("notifications")
      .select("id, message, job_id, is_read, created_at")
      .eq("user_id", user.id)
      .eq("is_read", false)
      .order("created_at", { ascending: false });

    if (error) throw new Error(error.message);

    return NextResponse.json(notifications);
  } catch (error) {
    console.error("Notifications error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


--- ./src/app/api/payments/setup/route.tsx ---

import { NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/server";
import Stripe from "stripe";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: "2024-04-10",
});

export async function POST(request: Request) {
  const supabase = createClient();
  const { user_id } = await request.json();
  const { data: user } = await supabase
    .from("users")
    .select("stripe_customer_id")
    .eq("id", user_id)
    .single();

  if (!user.stripe_customer_id) {
    const customer = await stripe.customers.create({ metadata: { user_id } });
    await supabase
      .from("users")
      .update({ stripe_customer_id: customer.id })
      .eq("id", user_id);
    user.stripe_customer_id = customer.id;
  }

  const setupIntent = await stripe.setupIntents.create({
    customer: user.stripe_customer_id,
    payment_method_types: ["card"],
  });

  return NextResponse.json({ clientSecret: setupIntent.client_secret });
}


--- ./src/app/api/payments/route.ts ---

import { createServerClient } from "@/lib/supabase/server";
import { stripe } from "@/lib/stripe";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function POST(request: Request) {
  try {
    const { milestoneId, amount } = await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: milestone, error: milestoneError } = await supabase
      .from("milestones")
      .select("*, jobs!inner(client_id, region)")
      .eq("id", milestoneId)
      .single();

    if (milestoneError || !milestone) {
      return NextResponse.json(
        { error: "Milestone not found" },
        { status: 404 }
      );
    }
    if (milestone.jobs.client_id !== user.id) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 403 });
    }

    const { data: profile, error: profileError } = await supabase
      .from("users")
      .select("stripe_customer_id")
      .eq("id", user.id)
      .single();

    if (profileError || !profile?.stripe_customer_id) {
      return NextResponse.json({ error: "No payment method" }, { status: 400 });
    }

    const commission =
      milestone.jobs.region === "Regional"
        ? Math.min(amount * 0.0333, 25)
        : amount * 0.0333;

    const paymentIntent = await stripe.paymentIntents.create({
      amount: Math.round((amount + commission) * 100),
      currency: "aud",
      customer: profile.stripe_customer_id,
      automatic_payment_methods: { enabled: true },
      metadata: { milestoneId, commission: commission.toString() },
    });

    await supabase.from("payments").insert({
      milestone_id: milestoneId,
      amount,
      payment_intent_id: paymentIntent.id,
      status: "pending",
      client_id: user.id,
    });

    await supabase
      .from("milestones")
      .update({ status: "pending", payment_intent_id: paymentIntent.id })
      .eq("id", milestoneId);

    return NextResponse.json({ clientSecret: paymentIntent.client_secret });
  } catch (error) {
    console.error("Payment error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

export async function PATCH(request: Request) {
  try {
    const { milestoneId } = await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: milestone, error: milestoneError } = await supabase
      .from("milestones")
      .select("*, jobs!inner(tradie_id)")
      .eq("id", milestoneId)
      .single();

    if (milestoneError || !milestone) {
      return NextResponse.json(
        { error: "Milestone not found" },
        { status: 404 }
      );
    }
    if (milestone.jobs.tradie_id !== user.id) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 403 });
    }

    const { data: payment, error: paymentError } = await supabase
      .from("payments")
      .select("payment_intent_id, amount, client_id")
      .eq("milestone_id", milestoneId)
      .single();

    if (paymentError || !payment) {
      return NextResponse.json({ error: "Payment not found" }, { status: 404 });
    }

    const { data: tradie, error: tradieError } = await supabase
      .from("accounts")
      .select("stripe_account_id")
      .eq("user_id", milestone.jobs.tradie_id)
      .single();

    if (tradieError || !tradie?.stripe_account_id) {
      return NextResponse.json(
        { error: "Tradie account not set up" },
        { status: 400 }
      );
    }

    const paymentIntent = await stripe.paymentIntents.retrieve(
      payment.payment_intent_id
    );
    if (paymentIntent.status !== "succeeded") {
      return NextResponse.json(
        { error: "Payment not completed" },
        { status: 400 }
      );
    }

    const commission =
      milestone.jobs.region === "Regional"
        ? Math.min(payment.amount * 0.0333, 25)
        : payment.amount * 0.0333;

    await stripe.transfers.create({
      amount: Math.round((payment.amount - commission) * 100),
      currency: "aud",
      destination: tradie.stripe_account_id,
      transfer_group: `milestone_${milestoneId}`,
    });

    await supabase
      .from("payments")
      .update({ status: "completed" })
      .eq("milestone_id", milestoneId);

    await supabase
      .from("badges")
      .insert({ user_id: tradieId, badge: "First Job", earned_at: new Date() });

    await supabase
      .from("milestones")
      .update({ status: "completed" })
      .eq("id", milestoneId);

    await supabase.from("notifications").insert({
      user_id: payment.client_id,
      message: `Milestone ${milestone.title} verified and paid`,
      job_id: milestone.job_id,
    });

    return NextResponse.json({ message: "Milestone verified and paid" });
  } catch (error) {
    console.error("Verification error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


--- ./src/app/api/payments/escrow/route.ts ---

// src/app/api/payments/escrow/route.js
import { supabase } from "../../../../lib/supabase";
import { NextResponse } from "next/server";

// Create escrow payment
export async function POST(request) {
  const {
    data: { user },
    error: authError,
  } = await supabase.auth.getUser();
  if (authError || !user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const { booking_id, amount } = await request.json();
  if (!booking_id || !amount) {
    return NextResponse.json(
      { error: "Missing booking_id or amount" },
      { status: 400 }
    );
  }

  // Verify booking exists and belongs to user
  const { data: booking, error: bookingError } = await supabase
    .from("bookings")
    .select("id")
    .eq("id", booking_id)
    .eq("user_id", user.id)
    .single();

  if (bookingError || !booking) {
    return NextResponse.json({ error: "Booking not found" }, { status: 404 });
  }

  // Create payment in escrow
  const { data: payment, error: paymentError } = await supabase
    .from("payments")
    .insert({
      booking_id,
      amount,
      status: "held",
      created_at: new Date().toISOString(),
    })
    .select("id, booking_id, amount, status, created_at")
    .single();

  if (paymentError) {
    return NextResponse.json({ error: paymentError.message }, { status: 500 });
  }

  return NextResponse.json(payment);
}


--- ./src/app/api/support/route.ts ---

import { createServerClient } from "@/lib/supabase/server";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function POST(request: Request) {
  try {
    const { query } = await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: support, error } = await supabase
      .from("support")
      .insert({ user_id: user.id, query, status: "pending" })
      .select()
      .single();

    if (error) throw new Error(error.message);

    const response = `Support query received: ${query}. A team member will respond soon.`;
    await supabase
      .from("support")
      .update({ response, status: "responded" })
      .eq("id", support.id);

    return NextResponse.json({ message: response });
  } catch (error) {
    console.error("Support error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


--- ./src/app/api/webhooks/route.ts ---

// src/app/api/webhooks/stripe/route.ts
import { stripe } from "@/lib/stripe";
import { supabase } from "@/lib/supabase";
export async function POST(request) {
  const payload = await request.text();
  const sig = request.headers.get("stripe-signature");
  let event;
  try {
    event = stripe.webhooks.constructEvent(
      payload,
      sig,
      process.env.STRIPE_WEBHOOK_SECRET
    );
  } catch (err) {
    return new Response("Webhook Error", { status: 400 });
  }
  if (event.type === "payment_intent.succeeded") {
    const paymentIntent = event.data.object;
    await supabase
      .from("payments")
      .update({ status: "completed" })
      .eq("payment_intent_id", paymentIntent.id);
  }
  return new Response("OK", { status: 200 });
}


--- ./src/app/api/referrals/route.ts ---

import { createServerClient } from "@/lib/supabase/server";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function POST(request: Request) {
  try {
    const { referredEmail } = await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { error } = await supabase.from("referrals").insert({
      referrer_id: user.id,
      referred_email: referredEmail,
    });

    if (error) throw new Error(error.message);

    return NextResponse.json({ message: "Referral created" });
  } catch (error) {
    console.error("Referral error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


--- ./src/app/api/disputes/escalate/route.ts ---

// src/app/api/disputes/escalate/route.ts
import { createServerClient } from "@/lib/supabase/server";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";
export async function PATCH(request) {
  const { dispute_id } = await request.json();
  const supabase = createServerClient(cookies());
  const {
    data: { user },
  } = await supabase.auth.getUser();
  if (!user)
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  const { data: profile } = await supabase
    .from("profiles")
    .select("role")
    .eq("id", user.id)
    .single();
  if (profile.role !== "support")
    return NextResponse.json({ error: "Forbidden" }, { status: 403 });
  const { error } = await supabase
    .from("disputes")
    .update({ qbcc_escalated: true })
    .eq("id", dispute_id);
  if (error)
    return NextResponse.json({ error: error.message }, { status: 500 });
  return NextResponse.json({ message: "Dispute escalated to QBCC" });
}


--- ./src/app/api/disputes/route.ts ---

import { createServerClient } from "@/lib/supabase/server";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function POST(request: Request) {
  try {
    const { milestoneId, reason } = await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: milestone, error: milestoneError } = await supabase
      .from("milestones")
      .select("*, jobs!inner(client_id, tradie_id)")
      .eq("id", milestoneId)
      .single();

    if (milestoneError || !milestone) {
      return NextResponse.json(
        { error: "Milestone not found" },
        { status: 404 }
      );
    }

    if (
      ![milestone.jobs.client_id, milestone.jobs.tradie_id].includes(user.id)
    ) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 403 });
    }

    const { data: dispute, error: disputeError } = await supabase
      .from("disputes")
      .insert({
        milestone_id: milestoneId,
        job_id: milestone.job_id,
        reason,
        status: "pending",
        qbcc_escalated: false,
      })
      .select()
      .single();

    if (disputeError) throw new Error(disputeError.message);

    await supabase.from("notifications").insert([
      {
        user_id: milestone.jobs.client_id,
        message: `Dispute filed for milestone ${milestone.title}`,
        job_id: milestone.job_id,
      },
      {
        user_id: milestone.jobs.tradie_id,
        message: `Dispute filed for milestone ${milestone.title}`,
        job_id: milestone.job_id,
      },
    ]);

    return NextResponse.json(dispute);
  } catch (error) {
    console.error("Dispute error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


--- ./src/app/api/messages/route.ts ---

import { createServerClient } from "@/lib/supabase/server";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function POST(request: Request) {
  try {
    const { jobId, content, receiverId } = await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: job, error: jobError } = await supabase
      .from("jobs")
      .select("client_id, tradie_id")
      .eq("id", jobId)
      .single();

    if (jobError || !job)
      return NextResponse.json({ error: "Job not found" }, { status: 404 });

    if (
      ![job.client_id, job.tradie_id].includes(user.id) ||
      ![job.client_id, job.tradie_id].includes(receiverId)
    ) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 403 });
    }

    const { data: message, error: messageError } = await supabase
      .from("messages")
      .insert({
        sender_id: user.id,
        receiver_id: receiverId,
        content,
        job_id: jobId,
      })
      .select()
      .single();

    if (messageError) throw new Error(messageError.message);

    await supabase.from("notifications").insert({
      user_id: receiverId,
      message: `New message for job ${jobId}`,
      job_id: jobId,
    });

    return NextResponse.json(message);
  } catch (error) {
    console.error("Message error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


--- ./src/app/api/forum/route.ts ---

import { NextResponse } from "next/server";
import { supabase } from "@/lib/supabase";
export async function POST(request: Request) {
  const { user_id, title, content } = await request.json();
  const { data, error } = await supabase
    .from("forum_posts")
    .insert([{ user_id, title, content }])
    .select();
  if (error)
    return NextResponse.json({ error: error.message }, { status: 500 });
  return NextResponse.json(data);
}


--- ./src/app/api/commissions/route.ts ---

// src/app/api/commissions/route.js
import { supabase } from "../../../lib/supabase";
import { NextResponse } from "next/server";

// Get commissions for current user (via bookings)
export async function GET(request) {
  const {
    data: { user },
    error: authError,
  } = await supabase.auth.getUser();
  if (authError || !user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const { data, error } = await supabase
    .from("commissions")
    .select("id, source_type, source_id, amount, created_at")
    .eq("source_type", "booking")
    .in(
      "source_id",
      supabase.from("bookings").select("id").eq("user_id", user.id)
    );

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json(data);
}


--- ./src/app/api/analytics/route.ts ---

import { createServerClient } from "@/lib/supabase/server";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function GET(request: Request) {
  try {
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: analytics, error } = await supabase
      .from("analytics")
      .select("event_type, created_at, metadata")
      .eq("user_id", user.id)
      .order("created_at", { ascending: false })
      .limit(100);

    if (error) throw new Error(error.message);

    return NextResponse.json(analytics);
  } catch (error) {
    console.error("Analytics error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    const { event_type, metadata } = await request.json();
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const validEventTypes = [
      "job_posted",
      "job_accepted",
      "milestone_paid",
      "milestone_verified",
      "payment_received",
      "dispute_filed",
      "premium_subscribed",
      "referral_sent",
    ];
    if (!validEventTypes.includes(event_type)) {
      return NextResponse.json(
        { error: "Invalid event type" },
        { status: 400 }
      );
    }

    const { error } = await supabase.from("analytics").insert({
      user_id: user.id,
      event_type,
      metadata,
    });

    if (error) throw new Error(error.message);

    return NextResponse.json({ message: "Event logged" });
  } catch (error) {
    console.error("Analytics post error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


--- ./src/app/api/badges/route.ts ---

// src/app/api/badges/route.js
import { supabase } from "../../../lib/supabase";
import { NextResponse } from "next/server";

// Get user's badges
export async function GET(request) {
  const {
    data: { user },
    error: authError,
  } = await supabase.auth.getUser();
  if (authError || !user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const { data, error } = await supabase
    .from("badges")
    .select("id, badge, earned_at")
    .eq("user_id", user.id);

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json(data);
}

// Award a badge (admin only, assumes profile role check)
export async function POST(request) {
  const {
    data: { user },
    error: authError,
  } = await supabase.auth.getUser();
  if (authError || !user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  // Check if user is admin (via profiles.role)
  const { data: profile, error: profileError } = await supabase
    .from("profiles")
    .select("role")
    .eq("id", user.id)
    .single();
  if (profileError || profile.role !== "admin") {
    return NextResponse.json({ error: "Forbidden" }, { status: 403 });
  }

  const { user_id, badge } = await request.json();
  if (!user_id || !badge) {
    return NextResponse.json(
      { error: "Missing user_id or badge" },
      { status: 400 }
    );
  }

  const { data, error } = await supabase
    .from("badges")
    .insert({
      user_id,
      badge,
      earned_at: new Date().toISOString(),
    })
    .select("id, badge, earned_at")
    .single();

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json(data);
}


--- ./src/app/api/bookings/route.ts ---

// src/app/api/bookings/route.js
import { supabase } from "../../../lib/supabase";
import { NextResponse } from "next/server";

// Get bookings for current user
export async function GET(request) {
  const {
    data: { user },
    error: authError,
  } = await supabase.auth.getUser();
  if (authError || !user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const { data, error } = await supabase
    .from("bookings")
    .select("id, job_description, location, status, commission, created_at")
    .eq("user_id", user.id);

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json(data);
}

// Create a booking
export async function POST(request) {
  const {
    data: { user },
    error: authError,
  } = await supabase.auth.getUser();
  if (authError || !user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const { job_description, location, job_cost, is_regional } =
    await request.json();
  if (!job_description || !location || !job_cost) {
    return NextResponse.json(
      { error: "Missing required fields" },
      { status: 400 }
    );
  }

  // Calculate commission: 3.33% of job_cost, capped at A$25 for regional jobs
  const commissionRate = 0.0333;
  let commission = job_cost * commissionRate;
  if (is_regional && commission > 25) {
    commission = 25;
  }

  const { data: booking, error: bookingError } = await supabase
    .from("bookings")
    .insert({
      user_id: user.id,
      job_description,
      location,
      status: "pending",
      commission,
      created_at: new Date().toISOString(),
    })
    .select("id, job_description, location, status, commission, created_at")
    .single();

  if (bookingError) {
    return NextResponse.json({ error: bookingError.message }, { status: 500 });
  }

  // Insert commission record
  const { error: commissionError } = await supabase.from("commissions").insert({
    id: crypto.randomUUID(),
    source_type: "booking",
    source_id: booking.id,
    amount: commission,
    created_at: new Date().toISOString(),
  });

  if (commissionError) {
    return NextResponse.json(
      { error: commissionError.message },
      { status: 500 }
    );
  }

  return NextResponse.json(booking);
}


--- ./src/app/api/subscribe/route.ts ---

import { stripe } from "@/lib/stripe";
import { supabase } from "@/lib/supabase/server";

export async function POST(req: Request) {
  const { userId, planType } = await req.json();
  const session = await stripe.checkout.sessions.create({
    customer: (
      await supabase
        .from("users")
        .select("stripe_customer_id")
        .eq("id", userId)
        .single()
    ).data.stripe_customer_id,
    mode: "subscription",
    line_items: [{ price: "price_xxx", quantity: 1 }],
    success_url: `${process.env.NEXT_PUBLIC_URL}/success`,
    cancel_url: `${process.env.NEXT_PUBLIC_URL}/cancel`,
  });
  await supabase
    .from("premium")
    .insert({
      user_id: userId,
      plan_type: planType,
      subscription_status: "active",
    });
  return NextResponse.json({ url: session.url });
}


--- ./src/app/marketing/(marketing)/dashboard/page.tsx ---

import { supabase } from "@/lib/ supabase ";
export default async function MarketingDashboard() {
  const { data: referrals } = await supabase
    .from("referrals ")
    .select("count ");
  const { data: posts } = await supabase.from("community ").select("count ");
  return (
    <div className=" container mx -auto p-4">
      <h1 className="text -2 xl">Marketing Dashboard </h1>
      <p> Referrals : {referrals[0].count || 0} </p>
      <p>Posts : {posts[0].count || 0} </p>
    </div>
  );
}


--- ./src/app/marketing/(marketing)/page.tsx ---

"use client";

import Link from "next/link";

export default function MarketingHome() {
  return (
    <div className="text-center space-y-6 py-12">
      <h1 className="text-5xl font-bold text-gray-900 dark:text-gray-100">
        Welcome to TradeMatey - Marketing Portal
      </h1>
      <p className="text-lg text-gray-600 dark:text-gray-400">
        Manage campaigns, referrals, and promotions.
      </p>
      <div className="space-x-4">
        <Link href="/marketing/dashboard">
          <button className="px-6 py-3 bg-orange-600 text-white rounded-md hover:bg-orange-700 transition-colors">
            Go to Dashboard
          </button>
        </Link>
      </div>
    </div>
  );
}


--- ./src/components/TradieCard.tsx ---

import Link from "next/link";
import { Tradie } from "@/lib/types";

export default function TradieCard({ tradie }: { tradie: Tradie }) {
  return (
    <div className="group relative overflow-hidden rounded-2xl bg-white shadow-lg transition-shadow hover:shadow-2xl dark:bg-gray-900">
      {/* Background effect */}
      <div className="absolute inset-0 bg-gradient-to-br from-blue-50 to-transparent opacity-0 transition-opacity group-hover:opacity-30 dark:from-gray-800" />

      <div className="relative z-10 p-6">
        <h3 className="text-2xl font-bold text-gray-900 dark:text-white">
          {tradie.name}
        </h3>
        <p className="mt-2 text-lg font-medium text-gray-600 dark:text-gray-400">
          {tradie.trade}
        </p>
        <p className="text-sm text-gray-500 dark:text-gray-400">
          📍 {tradie.location}
        </p>

        {tradie.top_tradie && (
          <span className="absolute top-2 right-2 bg-yellow-400 text-black text-xs px-2 py-1 rounded">
            Top Tradie
          </span>
        )}

        <Link
          href={`/tradies/${tradie.id}`}
          className="mt-4 inline-block w-full rounded-lg bg-blue-600 px-4 py-2 text-center text-white font-medium transition-transform transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:bg-blue-500"
        >
          View Profile →
        </Link>
      </div>
    </div>
  );
}


--- ./src/components/AvailablityForm.tsx ---

// src/components/AvailabilityForm.tsx
"use client";
import { useState } from "react";
import { supabase } from "@/lib/supabase/client";
import { toast } from "react-hot-toast";
export default function AvailabilityForm() {
  const [dates, setDates] = useState("");
  const handleSubmit = async (e) => {
    e.preventDefault();
    const res = await fetch("/api/availability", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ available_dates: JSON.parse(dates) }),
    });
    if (res.ok) toast.success("Availability updated!");
    else toast.error("Failed to update");
  };
  return (
    <form onSubmit={handleSubmit}>
      <textarea
        value={dates}
        onChange={(e) => setDates(e.target.value)}
        placeholder='{"dates": ["2025-06-05", "2025-06-06"]}'
      />
      <button type="submit">Update Availability</button>
    </form>
  );
}


--- ./src/components/BadgeList.tsx ---

// src/components/BadgeList.tsx
"use client";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";
export default function BadgeList() {
  const { data, error, isLoading } = useQuery({
    queryKey: ["badges"],
    queryFn: async () => {
      const res = await fetch("/api/badges");
      if (!res.ok) throw new Error("Failed to fetch badges");
      return res.json();
    },
  });
  if (isLoading) return <p>Loading...</p>;
  if (error) toast.error(error.message);
  return (
    <div>
      <h2>Your Badges</h2>
      {data.map((badge) => (
        <p key={badge.id}>
          {badge.badge} (Earned:{" "}
          {new Date(badge.earned_at).toLocaleDateString()})
        </p>
      ))}
    </div>
  );
}


--- ./src/components/ui/Card.tsx ---

"use client";
import { cn } from "@/lib/utils";
export function Card({
  children,
  className,
  ...props
}: {
  children: React.ReactNode;
  className?: string;
}) {
  return (
    <div
      className={cn("p-4 border rounded-md shadow-sm", className)}
      {...props}
    >
      {children}
    </div>
  );
}


--- ./src/components/ui/Chatbot.tsx ---

"use client";

import { useState } from "react";
import { Button } from "@/components/ui/Button";

export function Chatbot() {
  const [messages, setMessages] = useState<{ role: string; content: string }[]>(
    []
  );
  const [input, setInput] = useState("");

  const sendMessage = async () => {
    setMessages([...messages, { role: "user", content: input }]);
    const res = await fetch("/api/support", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ message: input }),
    });
    const { reply } = await res.json();
    setMessages([
      ...messages,
      { role: "user", content: input },
      { role: "bot", content: reply },
    ]);
    setInput("");
  };

  return (
    <div className="fixed bottom-4 right-4 w-80 bg-white dark:bg-gray-800 p-4 rounded-lg shadow-lg">
      <div className="max-h-64 overflow-y-auto space-y-2">
        {messages.map((msg, i) => (
          <div key={i} className={msg.role === "user" ? "text-right" : ""}>
            <p className="p-2 rounded bg-gray-100 dark:bg-gray-700">
              {msg.content}
            </p>
          </div>
        ))}
      </div>
      <div className="mt-2 flex">
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          className="flex-grow p-2 border rounded-l dark:bg-gray-700"
          placeholder="Ask a question..."
        />
        <Button onClick={sendMessage} className="rounded-l-none">
          Send
        </Button>
      </div>
    </div>
  );
}


--- ./src/components/ui/Button.tsx ---

"use client";

import { ButtonHTMLAttributes, forwardRef } from "react";

export type ButtonProps = ButtonHTMLAttributes<HTMLButtonElement> & {
  variant?: "default" | "outline" | "destructive";
  isLoading?: boolean;
};

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant = "default", isLoading, children, ...props }, ref) => {
    const baseStyles =
      "px-4 py-2 rounded-md font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50";
    const variantStyles = {
      default:
        "bg-indigo-600 text-white hover:bg-indigo-700 focus:ring-indigo-500",
      outline:
        "border border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-900 dark:text-gray-100",
      destructive: "bg-red-600 text-white hover:bg-red-700 focus:ring-red-500",
    };

    return (
      <button
        ref={ref}
        className={`${baseStyles} ${variantStyles[variant]} ${className} ${
          isLoading ? "opacity-75" : ""
        }`}
        disabled={isLoading}
        {...props}
      >
        {isLoading ? "Loading..." : children}
      </button>
    );
  }
);

Button.displayName = "Button";
export { Button };


--- ./src/components/Footer.tsx ---

import Link from "next/link";

export default function Footer() {
  return (
    <footer className="bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 py-6 mt-12">
      <div className="container mx-auto px-4 text-center">
        <p className="text-sm text-gray-600 dark:text-gray-400">
          © {new Date().getFullYear()} TradeMatey. All rights reserved. |{" "}
          <Link
            href="/privacy-policy"
            className="text-blue-600 dark:text-blue-400 hover:underline"
          >
            Privacy Policy
          </Link>{" "}
          |{" "}
          <Link
            href="/terms"
            className="text-blue-600 dark:text-blue-400 hover:underline"
          >
            Terms of Service
          </Link>
        </p>
      </div>
    </footer>
  );
}


--- ./src/components/Header.tsx ---

"use client";

import Link from "next/link";
import { useSession, signOut, getSession } from "next-auth/react";
import { useEffect, useState } from "react";
import { FaBars, FaTimes } from "react-icons/fa";
import { motion } from "framer-motion";

export default function Header() {
  const { data: session } = useSession();
  const [clientSession, setClientSession] = useState(session);
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  useEffect(() => {
    async function refreshSession() {
      const updatedSession = await getSession();
      setClientSession(updatedSession);
    }
    refreshSession();
  }, []);

  const dashboardLink = () => {
    if (!clientSession?.user?.role) return "/";
    switch (clientSession.user.role) {
      case "tradie":
        return "/tradie/dashboard";
      case "client":
        return "/client/dashboard";
      case "admin":
        return "/admin/dashboard";
      case "finance":
        return "/finance/dashboard";
      case "marketing":
        return "/marketing/dashboard";
      case "support":
        return "/support-group/dashboard";
      default:
        return "/";
    }
  };

  const profileLink = () => {
    if (!clientSession?.user?.role) return "/";
    switch (clientSession.user.role) {
      case "tradie":
        return "/tradie/profile";
      case "client":
        return "/client/settings";
      case "admin":
        return "/admin/settings";
      case "finance":
        return "/finance/settings";
      case "marketing":
        return "/marketing/settings";
      case "support":
        return "/support-group/settings";
      default:
        return "/";
    }
  };

  return (
    <header className="bg-gradient-to-r from-blue-800 to-blue-600 text-white shadow-lg sticky top-0 z-50">
      <nav className="container mx-auto flex justify-between items-center py-4 px-4 sm:px-6 lg:px-8">
        {/* Logo */}
        <Link
          href="/"
          className="flex items-center space-x-2"
          aria-label="TradeMatey Home"
        >
          <span className="text-2xl sm:text-3xl font-extrabold tracking-tight">
            TradeMatey
          </span>
        </Link>

        {/* Desktop Navigation */}
        <div className="hidden md:flex items-center space-x-6">
          <Link
            href="/client/browse-tradies"
            className="text-base hover:text-yellow-300 transition duration-300 ease-in-out"
            aria-label="Browse Tradies"
          >
            Browse Tradies
          </Link>
          <Link
            href="/client/post-job"
            className="text-base hover:text-yellow-300 transition duration-300 ease-in-out"
            aria-label="Post a Job"
          >
            Post a Job
          </Link>
          {clientSession ? (
            <div className="flex items-center space-x-4">
              <Link
                href={dashboardLink()}
                className="text-base hover:text-yellow-300 transition duration-300 ease-in-out"
                aria-label="Dashboard"
                aria-current={
                  window.location.pathname === dashboardLink()
                    ? "page"
                    : undefined
                }
              >
                Dashboard
              </Link>
              <Link
                href={profileLink()}
                className="text-base hover:text-yellow-300 transition duration-300 ease-in-out"
                aria-label="Profile"
                aria-current={
                  window.location.pathname === profileLink()
                    ? "page"
                    : undefined
                }
              >
                Profile
              </Link>
              <button
                onClick={() => signOut()}
                className="bg-red-500 text-white px-3 py-1.5 sm:px-4 sm:py-2 rounded-lg hover:bg-red-600 transition duration-300 ease-in-out transform hover:scale-105"
                aria-label="Sign Out"
              >
                Sign Out
              </button>
            </div>
          ) : (
            <div className="flex items-center space-x-4">
              <Link
                href="/client/login"
                className="text-base hover:text-yellow-300 transition duration-300 ease-in-out"
                aria-label="Client Login"
              >
                Client Login
              </Link>
              <Link
                href="/tradie/login"
                className="bg-yellow-400 text-blue-900 font-semibold px-3 py-1.5 sm:px-5 sm:py-2 rounded-lg shadow-md hover:bg-yellow-500 transition duration-300 ease-in-out transform hover:scale-105"
                aria-label="Tradie Login"
              >
                Tradie Login
              </Link>
            </div>
          )}
        </div>

        {/* Mobile Menu Button */}
        <div className="md:hidden flex items-center">
          <button
            onClick={() => setIsMenuOpen(!isMenuOpen)}
            className="text-white focus:outline-none focus:ring-2 focus:ring-yellow-400"
            aria-label={isMenuOpen ? "Close Menu" : "Open Menu"}
            aria-expanded={isMenuOpen}
          >
            {isMenuOpen ? <FaTimes size={24} /> : <FaBars size={24} />}
          </button>
        </div>

        {/* Mobile Menu */}
        {isMenuOpen && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            transition={{ duration: 0.3 }}
            className="md:hidden absolute top-16 right-4 w-48 bg-blue-700 rounded-lg shadow-lg p-4 space-y-4"
          >
            <Link
              href="/client/browse-tradies"
              className="block text-white hover:text-yellow-300 transition duration-300 ease-in-out"
              onClick={() => setIsMenuOpen(false)}
              aria-label="Browse Tradies"
            >
              Browse Tradies
            </Link>
            <Link
              href="/client/post-job"
              className="block text-white hover:text-yellow-300 transition duration-300 ease-in-out"
              onClick={() => setIsMenuOpen(false)}
              aria-label="Post a Job"
            >
              Post a Job
            </Link>
            {clientSession ? (
              <>
                <Link
                  href={dashboardLink()}
                  className="block text-white hover:text-yellow-300 transition duration-300 ease-in-out"
                  onClick={() => setIsMenuOpen(false)}
                  aria-label="Dashboard"
                  aria-current={
                    window.location.pathname === dashboardLink()
                      ? "page"
                      : undefined
                  }
                >
                  Dashboard
                </Link>
                <Link
                  href={profileLink()}
                  className="block text-white hover:text-yellow-300 transition duration-300 ease-in-out"
                  onClick={() => setIsMenuOpen(false)}
                  aria-label="Profile"
                  aria-current={
                    window.location.pathname === profileLink()
                      ? "page"
                      : undefined
                  }
                >
                  Profile
                </Link>
                <button
                  onClick={() => {
                    signOut();
                    setIsMenuOpen(false);
                  }}
                  className="w-full bg-red-500 text-white px-3 py-1.5 rounded-lg hover:bg-red-600 transition duration-300 ease-in-out"
                  aria-label="Sign Out"
                >
                  Sign Out
                </button>
              </>
            ) : (
              <>
                <Link
                  href="/client/login"
                  className="block text-white hover:text-yellow-300 transition duration-300 ease-in-out"
                  onClick={() => setIsMenuOpen(false)}
                  aria-label="Client Login"
                >
                  Client Login
                </Link>
                <Link
                  href="/tradie/login"
                  className="block bg-yellow-400 text-blue-900 font-semibold px-3 py-1.5 rounded-lg shadow-md hover:bg-yellow-500 transition duration-300 ease-in-out"
                  onClick={() => setIsMenuOpen(false)}
                  aria-label="Tradie Login"
                >
                  Tradie Login
                </Link>
              </>
            )}
          </motion.div>
        )}
      </nav>
    </header>
  );
}


--- ./src/components/Providers.tsx ---

// ./src/components/Providers.tsx
"use client";

import { SessionProvider } from "next-auth/react";
import { createContext, useContext, ReactNode, useState } from "react";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query"; // Add imports

// Create a QueryClient instance
const queryClient = new QueryClient();

// Job Context
interface JobContextType {
  jobs: any[];
  addJob: (job: any) => void;
  updateJob: (jobId: string, updates: any) => void;
}

const JobContext = createContext<JobContextType | undefined>(undefined);

export function JobProvider({ children }: { children: ReactNode }) {
  const [jobs, setJobs] = useState<any[]>([]);

  const addJob = (job: any) => {
    setJobs((prevJobs) => [...prevJobs, job]);
  };

  const updateJob = (jobId: string, updates: any) => {
    setJobs((prevJobs) =>
      prevJobs.map((job) => (job.id === jobId ? { ...job, ...updates } : job))
    );
  };

  return (
    <JobContext.Provider value={{ jobs, addJob, updateJob }}>
      {children}
    </JobContext.Provider>
  );
}

export function useJobs() {
  const context = useContext(JobContext);
  if (!context) throw new Error("useJobs must be used within a JobProvider");
  return context;
}

// Combined Providers
interface ProvidersProps {
  children: ReactNode;
}

export function Providers({ children }: ProvidersProps) {
  return (
    <SessionProvider>
      <QueryClientProvider client={queryClient}>
        {" "}
        {/* Add QueryClientProvider */}
        <JobProvider>{children}</JobProvider>
      </QueryClientProvider>
    </SessionProvider>
  );
}


--- ./src/components/shared/notifications.tsx ---

"use client";

import { useEffect, useState } from "react";
import { supabase } from "@/lib/supabase/client";
import { toast } from "react-hot-toast";
import { Button } from "@/components/ui";

export function Notifications({ userId }: { userId: string }) {
  const [notifications, setNotifications] = useState<any[]>([]);

  useEffect(() => {
    const fetchNotifications = async () => {
      const { data } = await supabase
        .from("notifications")
        .select("*")
        .eq("user_id", userId)
        .eq("is_read", false);
      setNotifications(data || []);
    };
    fetchNotifications();

    const channel = supabase
      .channel("notifications")
      .on(
        "postgres_changes",
        {
          event: "INSERT",
          schema: "public",
          table: "notifications",
          filter: `user_id=eq.${userId}`,
        },
        (payload) => {
          setNotifications((prev) => [...prev, payload.new]);
          toast.success(payload.new.message);
        }
      )
      .subscribe();
    return () => supabase.removeChannel(channel);
  }, [userId]);

  const markAsRead = async (notificationId: string) => {
    await supabase
      .from("notifications")
      .update({ is_read: true })
      .eq("id", notificationId);
    setNotifications(notifications.filter((n) => n.id !== notificationId));
  };

  return (
    <div className="p-4">
      {notifications.map((notification) => (
        <div
          key={notification.id}
          className="p-2 border-b flex justify-between"
        >
          <p>{notification.message}</p>
          <Button onClick={() => markAsRead(notification.id)} variant="outline">
            Mark as Read
          </Button>
        </div>
      ))}
    </div>
  );
}


--- ./src/components/shared/messages.tsx ---

"use client";

import { useEffect, useState } from "react";
import { supabase } from "@/lib/supabase/client";
import { Button } from "@/components/ui";

export function Messages({ userId, jobId }: { userId: string; jobId: string }) {
  const [messages, setMessages] = useState<any[]>([]);
  const [newMessage, setNewMessage] = useState("");

  useEffect(() => {
    const fetchMessages = async () => {
      const { data, error } = await supabase
        .from("messages")
        .select(
          "*, sender:users!sender_id(name), receiver:users!receiver_id(name)"
        )
        .eq("job_id", jobId);
      if (!error) setMessages(data || []);
    };
    fetchMessages();

    const channel = supabase
      .channel("messages")
      .on(
        "postgres_changes",
        {
          event: "INSERT",
          schema: "public",
          table: "messages",
          filter: `job_id=eq.${jobId}`,
        },
        (payload) => setMessages((prev) => [...prev, payload.new])
      )
      .subscribe();
    return () => supabase.removeChannel(channel);
  }, [jobId]);

  const sendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    const { data: job } = await supabase
      .from("jobs")
      .select("client_id, tradie_id")
      .eq("id", jobId)
      .single();
    const receiverId = userId === job.client_id ? job.tradie_id : job.client_id;
    const { error } = await supabase.from("messages").insert([
      {
        sender_id: userId,
        receiver_id: receiverId,
        content: newMessage,
        job_id: jobId,
      },
    ]);
    if (!error) setNewMessage("");
    else toast.error("Failed to send message");
  };

  return (
    <div className="p-4">
      <div className="space-y-2 max-h-96 overflow-y-auto">
        {messages.map((msg) => (
          <div key={msg.id} className="p-2 border-b">
            <p className="font-semibold">{msg.sender.name}:</p>
            <p>{msg.content}</p>
            <p className="text-sm text-gray-500">
              {new Date(msg.created_at).toLocaleString()}
            </p>
          </div>
        ))}
      </div>
      <form onSubmit={sendMessage} className="mt-4 flex space-x-2">
        <input
          type="text"
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          className="flex-grow p-2 border rounded"
          placeholder="Type a message..."
          required
        />
        <Button type="submit">Send</Button>
      </form>
    </div>
  );
}


--- ./src/components/BookingForm.tsx ---

// src/components/BookingForm.tsx
"use client";
import { useState } from "react";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { toast } from "react-hot-toast";
export default function BookingForm() {
  const { data: session } = useSession();
  const [form, setForm] = useState({
    job_description: "",
    location: "",
    job_cost: "",
    is_regional: false,
  });
  const router = useRouter();
  const handleSubmit = async (e) => {
    e.preventDefault();
    const res = await fetch("/api/bookings", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ ...form, job_cost: Number(form.job_cost) }),
    });
    if (res.ok) {
      toast.success("Booking created!");
      router.push("/client/dashboard");
    } else toast.error("Failed to book");
  };
  if (!session) return <p>Please sign in to book</p>;
  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <label>Job Description</label>
        <textarea
          value={form.job_description}
          onChange={(e) =>
            setForm({ ...form, job_description: e.target.value })
          }
          className="w-full p-2 border rounded"
          required
        />
      </div>
      <div>
        <label>Location</label>
        <input
          type="text"
          value={form.location}
          onChange={(e) => setForm({ ...form, location: e.target.value })}
          className="w-full p-2 border rounded"
          required
        />
      </div>
      <div>
        <label>Job Cost (A$)</label>
        <input
          type="number"
          value={form.job_cost}
          onChange={(e) => setForm({ ...form, job_cost: e.target.value })}
          className="w-full p-2 border rounded"
          required
        />
      </div>
      <div>
        <label>
          <input
            type="checkbox"
            checked={form.is_regional}
            onChange={(e) =>
              setForm({ ...form, is_regional: e.target.checked })
            }
          />
          Regional Queensland (A$25 commission cap)
        </label>
      </div>
      <button
        type="submit"
        className="bg-blue-600 text-white px-4 py-2 rounded"
      >
        Submit
      </button>
    </form>
  );
}
