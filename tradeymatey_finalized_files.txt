]633;E;for file in src/app/page.tsx "src/app/client/(client)/login/page.tsx" "src/app/tradie/(tradie)/login/page.tsx" "src/app/client/(client)/onboarding/page.tsx" "src/app/tradie/(tradie)/onboarding/page.tsx" "src/app/client/(client)/dashboard/page.tsx" "src/app/tradie/(tradie)/dashboard/page.tsx" "src/app/client/(client)/post-job/page.tsx" "src/app/client/(client)/settings/page.tsx" "src/app/tradie/(tradie)/settings/page.tsx" src/components/shared/notifications.tsx src/components/shared/messages.tsx src/components/ui/Chatbot.tsx src/lib/auth.tsx src/lib/supabase/client.ts src/lib/supabase/server.ts src/lib/supabase/functions/milestone-payment.ts src/lib/supabase/functions/stripe-payment.ts src/app/api/payments/route.tsx src/app/api/premium/route.tsx src/app/api/notifications/route.tsx src/app/api/messages/route.tsx src/app/api/referrals/route.tsx src/app/api/disputes/route.tsx src/app/api/analytics/route.tsx src/app/api/payments/setup/route.tsx src/app/api/jobs/route.tsx src/app/layout.tsx src/components/Providers.tsx src/app/api/support/route.tsx;304a7eea-3438-4bf2-af30-a9376eed4489]633;C===== src/app/page.tsx =====
"use client";

import Link from "next/link";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { useQuery } from "@tanstack/react-query";
import { Header, Footer } from "@/components";

export const metadata = {
  title: "TradeMatey - Find Trusted Tradies",
  description:
    "Post jobs, pay securely with milestones, and resolve disputes with TradeMatey.",
};

export default function Home() {
  const { data: session } = useSession();
  const router = useRouter();

  useEffect(() => {
    if (session?.user) {
      const role = session.user.role;
      const hasCompletedOnboarding =
        session.user.has_completed_onboarding ?? false;
      if (hasCompletedOnboarding) {
        router.push(`/${role}/dashboard`);
      } else {
        router.push(`/${role}/onboarding`);
      }
    }
  }, [session, router]);

  const { data: analytics } = useQuery({
    queryKey: ["analytics"],
    queryFn: async () => {
      const res = await fetch("/api/analytics");
      if (!res.ok) throw new Error("Failed to fetch analytics");
      return res.json();
    },
  });

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-grow">
        <section className="relative bg-blue-600 py-20">
          <div className="container mx-auto text-center text-white">
            <h1 className="text-4xl md:text-6xl font-bold mb-4">
              Find Trusted Tradies with TradeMatey
            </h1>
            <p className="text-xl mb-6">
              Post jobs, pay securely with milestones, and resolve disputes with
              QBCC support.
            </p>
            <div className="space-x-4">
              <Link href="/client/post-job">
                <Button className="bg-blue-500 hover:bg-blue-600">
                  Post a Job
                </Button>
              </Link>
              <Link href="/tradie/login">
                <Button variant="outline">Join as a Tradie</Button>
              </Link>
            </div>
          </div>
        </section>
        <section className="py-16 bg-gray-100">
          <div className="container mx-auto grid grid-cols-3 gap-8">
            <Card className="p-6">
              <h2 className="text-2xl font-semibold">Milestone Payments</h2>
              <p className="mt-2">
                Pay only for completed work with our secure milestone system.
              </p>
            </Card>
            <Card className="p-6">
              <h2 className="text-2xl font-semibold">AI Tradie Matching</h2>
              <p className="mt-2">
                Our AI matches you with top tradies based on skills, location,
                and ratings.
              </p>
            </Card>
            <Card className="p-6">
              <h2 className="text-2xl font-semibold">QBCC Compliance</h2>
              <p className="mt-2">
                14+14 day payment timelines and dispute escalation to QBCC.
              </p>
            </Card>
          </div>
        </section>
        {analytics && (
          <section className="py-16 text-center">
            <h2 className="text-3xl font-bold mb-8">
              TradeMatey by the Numbers
            </h2>
            <div className="grid grid-cols-3 gap-8">
              <div>
                <p className="text-4xl font-bold">{analytics.totalJobs}</p>
                <p>Jobs Completed</p>
              </div>
              <div>
                <p className="text-4xl font-bold">{analytics.newUsers}</p>
                <p>New Users (30 Days)</p>
              </div>
              <div>
                <p className="text-4xl font-bold">
                  {analytics.completionRate}%
                </p>
                <p>Completion Rate</p>
              </div>
            </div>
          </section>
        )}
      </main>
      <Footer />
    </div>
  );
}



===== src/app/client/(client)/login/page.tsx =====
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { motion } from "framer-motion";
import { FaEye, FaEyeSlash, FaGoogle, FaEnvelope } from "react-icons/fa";
import { supabase } from "@/lib/supabase/client";
import { toast } from "react-hot-toast";
import { Button } from "@/components/ui/button";

export default function ClientLoginPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [magicLinkSent, setMagicLinkSent] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [mfaRequired, setMfaRequired] = useState(false);
  const [mfaCode, setMfaCode] = useState("");
  const [factorId, setFactorId] = useState("");
  const router = useRouter();

  const handleEmailLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setLoading(true);
    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
      if (error) throw error;

      const { data: factors } = await supabase.auth.mfa.listFactors();
      if (factors?.totp?.length) {
        const id = factors.totp[0].id;
        setFactorId(id);
        setMfaRequired(true);

        const { error: mfaError } = await supabase.auth.mfa.challenge({
          factorId: id,
        });
        if (mfaError) throw mfaError;
      } else {
        toast.success("Login successful!");
      }
    } catch (err: any) {
      setError(err.message);
      toast.error(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleMfaVerify = async () => {
    try {
      const { error } = await supabase.auth.mfa.verify({
        factorId,
        code: mfaCode,
      });
      if (error) throw error;
      toast.success("MFA verified!");
      setMfaRequired(false);
    } catch (err: any) {
      setError(err.message);
      toast.error(err.message);
    }
  };

  const handleOAuthLogin = async () => {
    setLoading(true);
    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: "google",
        options: {
          redirectTo: `${window.location.origin}/auth/callback`,
        },
      });
      if (error) throw error;
    } catch (err: any) {
      setError(err.message);
      toast.error(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleMagicLink = async () => {
    setLoading(true);
    try {
      const { error } = await supabase.auth.signInWithOtp({
        email,
        options: {
          emailRedirectTo: `${window.location.origin}/auth/callback`,
        },
      });
      if (error) throw error;
      setMagicLinkSent(true);
      toast.success("Magic link sent! Check your email.");
    } catch (err: any) {
      setError(err.message);
      toast.error(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    // Removed invalid `motion.divider.enabledProps` assignment
    // This effect can be used for animation preferences in future
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-100 to-blue-300 dark:from-gray-800 dark:to-blue-900 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="absolute inset-0 opacity-10">
        <svg className="w-full h-full" viewBox="0 0 1000 1000">
          <path
            d="M0 0H1000V1000H0V0ZM500 500C600 500 700 400 700 300C700 200 600 100 500 100C400 100 300 200 300 300C300 400 400 500 500 500Z"
            fill="url(#gradient)"
          />
          <defs>
            <linearGradient id="gradient" x1="0" y1="0" x2="1000" y2="1000">
              <stop offset="0%" stopColor="#2196F3" />
              <stop offset="100%" stopColor="#FF9800" />
            </linearGradient>
          </defs>
        </svg>
      </div>

      <motion.div className="relative bg-white dark:bg-gray-800 p-8 rounded-lg shadow-lg w-full max-w-md">
        <h2 className="text-3xl font-bold text-center">Client Login</h2>
        <p className="text-sm text-gray-600 dark:text-gray-400 mt-4 text-center">
          Sign in to post jobs with secure milestone payments (3.33% commission,
          A$25 cap in regional Queensland).
        </p>

        {magicLinkSent ? (
          <div className="text-center space-y-4 mt-6">
            <FaEnvelope className="text-blue-600 mx-auto" size={40} />
            <p>
              Check <span className="font-bold">{email}</span> for your magic
              link.
            </p>
            <button
              onClick={() => setMagicLinkSent(false)}
              className="text-blue-600 hover:underline"
            >
              Try Another Method
            </button>
          </div>
        ) : (
          <>
            {error && <p className="text-red-500 text-center">{error}</p>}

            <form onSubmit={handleEmailLogin} className="space-y-4 mt-6">
              <div>
                <label>Email</label>
                <input
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="w-full p-2 border rounded"
                  required
                />
              </div>

              <div>
                <label>Password</label>
                <div className="relative">
                  <input
                    type={showPassword ? "text" : "password"}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="w-full p-2 border rounded"
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-2 top-2"
                  >
                    {showPassword ? <FaEyeSlash /> : <FaEye />}
                  </button>
                </div>
              </div>

              {mfaRequired && (
                <div>
                  <input
                    type="text"
                    value={mfaCode}
                    onChange={(e) => setMfaCode(e.target.value)}
                    placeholder="Enter 6-digit MFA code"
                    className="w-full p-2 border rounded"
                  />
                  <Button onClick={handleMfaVerify} className="w-full mt-2">
                    Verify MFA
                  </Button>
                </div>
              )}

              <Button type="submit" disabled={loading} className="w-full">
                {loading ? "Signing In..." : "Sign In with Email"}
              </Button>
            </form>

            <div className="my-4 text-center">Or</div>

            <div className="space-y-2">
              <Button
                onClick={handleOAuthLogin}
                disabled={loading}
                variant="outline"
                className="w-full flex items-center justify-center"
              >
                <FaGoogle className="mr-2" /> Google
              </Button>
              <Button
                onClick={handleMagicLink}
                disabled={loading || !email}
                variant="outline"
                className="w-full flex items-center justify-center"
              >
                <FaEnvelope className="mr-2" /> Magic Link
              </Button>
            </div>

            <div className="mt-4 text-center space-y-2">
              <p>
                No account?{" "}
                <Link href="/client/register" className="text-blue-600">
                  Register
                </Link>
              </p>
              <p>
                Forgot password?{" "}
                <Link href="/client/reset-password" className="text-blue-600">
                  Reset
                </Link>
              </p>
            </div>
          </>
        )}
      </motion.div>
    </div>
  );
}



===== src/app/tradie/(tradie)/login/page.tsx =====
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { motion } from "framer-motion";
import { FaEye, FaEyeSlash, FaGoogle, FaEnvelope } from "react-icons/fa";
import { supabase } from "@/lib/supabase/client";
import { toast } from "react-hot-toast";
import { Button } from "@/components/ui";

export default function TradieLoginPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [magicLinkSent, setMagicLinkSent] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [mfaRequired, setMfaRequired] = useState(false);
  const [mfaCode, setMfaCode] = useState("");
  const router = useRouter();

  const handleEmailLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setLoading(true);
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });
    if (error) {
      setError(error.message);
      toast.error(error.message);
      setLoading(false);
    } else if (data.user.factors?.length) {
      setMfaRequired(true);
      const factorId = data.user.factors[0].id;
      const { error: mfaError } = await supabase.auth.mfa.challenge({
        factorId,
      });
      if (mfaError) {
        setError(mfaError.message);
        toast.error(mfaError.message);
      }
    } else {
      toast.success("Login successful!");
    }
    setLoading(false);
  };

  const handleMfaVerify = async () => {
    const { error } = await supabase.auth.mfa.verify({
      factorId: (await supabase.auth.mfa.listFactors()).data.totp[0].id,
      code: mfaCode,
    });
    if (error) {
      setError(error.message);
      toast.error(error.message);
    } else {
      toast.success("MFA verified!");
      // Redirect handled by NextAuth
    }
  };

  const handleOAuthLogin = async () => {
    setLoading(true);
    const { error } = await supabase.auth.signInWithOAuth({
      provider: "google",
      options: { redirectTo: `${window.location.origin}/auth/callback` },
    });
    if (error) {
      setError(error.message);
      toast.error(error.message);
      setLoading(false);
    }
  };

  const handleMagicLink = async () => {
    setLoading(true);
    const { error } = await supabase.auth.signInWithOtp({
      email,
      options: {
        emailRedirectTo: `${window.location.origin}/auth/callback`,
      },
    });
    if (error) {
      setError(error.message);
      toast.error(error.message);
      setLoading(false);
    } else {
      setMagicLinkSent(true);
      toast.success("Magic link sent! Check your email.");
      setLoading(false);
    }
  };

  useEffect(() => {
    if (window.matchMedia("(prefers-reduced-motion: reduce)").matches) {
      motion.div.defaultProps = {
        animate: { opacity: 1, y: 0 },
        transition: { duration: 0 },
      };
    }
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-100 to-gray-300 dark:from-gray-800 dark:to-gray-900 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="absolute inset-0 opacity-10">
        <svg
          className="w-full h-full"
          viewBox="0 0 1000 1000"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M0 0H1000V1000H0V0ZM500 500C600 500 700 400 700 300C700 200 600 100 500 100C400 100 300 200 300 300C300 400 400 500 500 500Z"
            fill="url(#gradient)"
          />
          <defs>
            <linearGradient id="gradient" x1="0" y1="0" x2="1000" y2="1000">
              <stop offset="0%" stopColor="#2563EB" />
              <stop offset="100%" stopColor="#FBBF24" />
            </linearGradient>
          </defs>
        </svg>
      </div>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, ease: "easeOut" }}
        className="relative bg-white dark:bg-gray-800 p-6 sm:p-8 md:p-10 rounded-xl shadow-2xl w-full max-w-md sm:max-w-lg z-10"
      >
        <h1 className="text-3xl sm:text-4xl font-extrabold text-gray-900 dark:text-gray-100 mb-6 text-center">
          Tradie Login
        </h1>
        <p className="text-sm text-gray-600 dark:text-gray-400 mt-4">
          Sign in to access jobs with secure milestone payments (3.33%
          commission, 1.67% for top tradies) and QBCC compliance. Verify your
          license during onboarding.
        </p>
        {magicLinkSent ? (
          <div className="text-center space-y-4">
            <FaEnvelope
              className="text-blue-600 dark:text-blue-400 mx-auto"
              size={40}
            />
            <p className="text-gray-600 dark:text-gray-400">
              Check <span className="font-semibold">{email}</span> for your
              magic link.
            </p>
            <button
              onClick={() => setMagicLinkSent(false)}
              className="text-blue-600 dark:text-blue-400 hover:underline"
            >
              Try Another Method
            </button>
          </div>
        ) : (
          <>
            {error && (
              <motion.p
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="text-red-500 mb-4 text-center"
              >
                {error}
              </motion.p>
            )}
            <form onSubmit={handleEmailLogin} className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Email
                </label>
                <input
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-gray-100 transition duration-300"
                  required
                />
              </div>
              <div className="relative">
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Password
                </label>
                <input
                  type={showPassword ? "text" : "password"}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-gray-100 transition duration-300"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-10 text-gray-500 dark:text-gray-400"
                  aria-label={showPassword ? "Hide password" : "Show password"}
                >
                  {showPassword ? (
                    <FaEyeSlash size={20} />
                  ) : (
                    <FaEye size={20} />
                  )}
                </button>
              </div>
              {mfaRequired && (
                <div className="mt-4">
                  <input
                    type="text"
                    value={mfaCode}
                    onChange={(e) => setMfaCode(e.target.value)}
                    placeholder="Enter 6-digit MFA code"
                    className="w-full p-2 border rounded"
                  />
                  <Button onClick={handleMfaVerify} className="mt-2 w-full">
                    Verify MFA
                  </Button>
                </div>
              )}
              <Button
                type="submit"
                disabled={loading}
                className="w-full bg-blue-600 hover:bg-blue-700"
              >
                {loading ? "Signing In..." : "Sign In with Email"}
              </Button>
            </form>
            <div className="relative my-6">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300 dark:border-gray-600"></div>
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="px-2 bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400">
                  Or continue with
                </span>
              </div>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <Button
                onClick={handleOAuthLogin}
                disabled={loading}
                variant="outline"
                className="flex items-center justify-center"
              >
                <FaGoogle className="mr-2 text-red-500" /> Google
              </Button>
              <Button
                onClick={handleMagicLink}
                disabled={loading || !email}
                variant="outline"
                className="flex items-center justify-center"
              >
                <FaEnvelope className="mr-2 text-blue-500" /> Magic Link
              </Button>
            </div>
            <div className="mt-6 text-center space-y-2">
              <p className="text-sm text-gray-600 dark:text-gray-400">
                New to TradeMatey?{" "}
                <Link
                  href="/client/register"
                  className="text-blue-600 dark:text-blue-400 hover:underline"
                >
                  Register
                </Link>
              </p>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                Forgot password?{" "}
                <Link
                  href="/client/reset-password"
                  className="text-blue-600 dark:text-blue-400 hover:underline"
                >
                  Reset
                </Link>
              </p>
            </div>
          </>
        )}
      </motion.div>
    </div>
  );
}



===== src/app/client/(client)/onboarding/page.tsx =====
"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui";
import { toast } from "react-hot-toast";
import { useRouter } from "next/navigation";
import { supabase } from "@/lib/supabase/client";
import { loadStripe } from "@stripe/stripe-js";
import {
  Elements,
  CardElement,
  useStripe,
  useElements,
} from "@stripe/stripe-js";
import Link from "next/link";

const stripePromise = loadStripe(
  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!
);

function PaymentForm({ onSuccess }: { onSuccess: () => void }) {
  const stripe = useStripe();
  const elements = useElements();
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    const {
      data: { user },
    } = await supabase.auth.getUser();
    const res = await fetch("/api/payments/setup", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ user_id: user!.id }),
    });
    const { clientSecret } = await res.json();
    const { error, setupIntent } = await stripe!.confirmCardSetup(
      clientSecret,
      {
        payment_method: { card: elements!.getElement(CardElement)! },
      }
    );
    if (error) {
      toast.error(error.message!);
    } else {
      await supabase
        .from("users")
        .update({ payment_method_id: setupIntent!.payment_method })
        .eq("id", user!.id);
      toast.success("Payment method added!");
      onSuccess();
    }
    setLoading(false);
  };

  return (
    <form onSubmit={handleSubmit}>
      <CardElement />
      <Button type="submit" disabled={loading} className="mt-2 w-full">
        {loading ? "Processing..." : "Add Payment Method"}
      </Button>
    </form>
  );
}

export default function Onboarding() {
  const [step, setStep] = useState(1);
  const [form, setForm] = useState({
    name: "",
    email: "",
    region: "",
    paymentMethod: "",
  });
  const router = useRouter();

  useEffect(() => {
    const fetchUser = async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      const { data } = await supabase
        .from("users")
        .select("email, region")
        .eq("id", user!.id)
        .single();
      setForm((prev) => ({
        ...prev,
        email: data?.email || user?.email || "",
        region: data?.region || "",
      }));
    };
    fetchUser();
  }, []);

  const handleNext = async () => {
    if (step < 4) setStep(step + 1);
    else {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      const { error } = await supabase
        .from("users")
        .update({
          name: form.name,
          region: form.region,
          has_completed_onboarding: true,
        })
        .eq("id", user!.id);
      if (error) {
        toast.error("Failed to save profile");
      } else {
        await supabase.from("badges").insert([
          {
            user_id: user!.id,
            badge: "Welcome Aboard",
            earned_at: new Date().toISOString(),
          },
        ]);
        await supabase.from("notifications").insert({
          user_id: user!.id,
          message: "You earned the 'Welcome Aboard' badge!",
        });
        toast.success("Onboarding completed!");
        router.push("/client/dashboard");
      }
    }
  };

  return (
    <div className="max-w-md mx-auto p-6 space-y-6">
      <h1 className="text-3xl font-bold">Welcome to TradeMatey</h1>
      {step === 1 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 1: Watch Intro</h2>
          <video src="/intro.mp4" controls className="w-full rounded" />
          <p>
            Secure milestone payments with 3.33% commission and QBCC-compliant
            14+14 day timelines.
          </p>
        </div>
      )}
      {step === 2 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 2: Personal Info</h2>
          <input
            type="text"
            placeholder="Name"
            value={form.name}
            onChange={(e) => setForm({ ...form, name: e.target.value })}
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
            required
          />
          <input
            type="email"
            placeholder="Email"
            value={form.email}
            disabled
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
          />
          <select
            value={form.region}
            onChange={(e) => setForm({ ...form, region: e.target.value })}
            className="w-full rounded-md border-gray-300 dark:border-gray-600"
            required
          >
            <option value="">Select Region</option>
            <option value="Regional">Regional Queensland</option>
            <option value="Metro">Metro Queensland</option>
          </select>
        </div>
      )}
      {step === 3 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 3: Payment Method</h2>
          <Elements stripe={stripePromise}>
            <PaymentForm
              onSuccess={() =>
                setForm({ ...form, paymentMethod: "Card Added" })
              }
            />
          </Elements>
          <p className="text-sm text-gray-600">
            3.33% commission per milestone (
            {form.region === "Regional" ? "capped at A$25" : "no cap"}).
          </p>
        </div>
      )}
      {step === 4 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 4: Confirmation</h2>
          <p>Name: {form.name}</p>
          <p>Email: {form.email}</p>
          <p>Region: {form.region}</p>
          <p>Payment Method: {form.paymentMethod}</p>
          <div className="mt-4 p-4 bg-blue-100 rounded">
            <p className="font-bold">Go Premium for A$99/year!</p>
            <p>Enjoy 1.67% commission and priority job matching.</p>
            <Link href="/premium">
              <Button>Learn More</Button>
            </Link>
          </div>
        </div>
      )}
      <Button onClick={handleNext} className="w-full">
        {step === 4 ? "Finish" : "Next"}
      </Button>
    </div>
  );
}



===== src/app/tradie/(tradie)/onboarding/page.tsx =====
"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui";
import { toast } from "react-hot-toast";
import { useRouter } from "next/navigation";
import { supabase } from "@/lib/supabase/client";
import Link from "next/link";

export default function TradieOnboarding() {
  const [step, setStep] = useState(1);
  const [form, setForm] = useState({
    trade: "",
    location: "",
    bio: "",
    license: null as File | null,
    stripeAccountId: "",
  });
  const router = useRouter();

  useEffect(() => {
    const checkOnboarding = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      const { data } = await supabase
        .from("users")
        .select("has_completed_onboarding")
        .eq("id", user!.id)
        .single();
      if (data?.has_completed_onboarding) {
        router.push("/tradie/dashboard");
      }
    };
    checkOnboarding();
  }, [router]);

  const handleNext = async () => {
    if (step < 4) setStep(step + 1);
    else {
      const { data: { user } } = await supabase.auth.getUser();
      let licensePath = "";
      if (form.license) {
        const { data, error } = await supabase.storage
          .from("licenses")
          .upload(`${user!.id}/${form.license.name}`, form.license);
        if (error) {
          toast.error("Failed to upload license");
          return;
        }
        licensePath = data.path;
      }
      const { error } = await supabase
        .from("users")
        .update({
          trade: form.trade,
          location: form.location,
          bio: form.bio,
          stripe_account_id: form.stripeAccountId,
          license_path: licensePath,
          has_completed_onboarding: true,
        })
        .eq("id", user!.id);
      if (error) {
        toast.error("Failed to save profile");
      } else {
        await supabase.from("badges").insert([
          {
            user_id: user!.id,
            badge: "Welcome Aboard",
            earned_at: new Date().toISOString(),
          },
        ]);
        await supabase.from("notifications").insert({
          user_id: user!.id,
          message: "You earned the 'Welcome Aboard' badge!",
        });
        toast.success("Onboarding completed!");
        router.push("/tradie/dashboard");
      }
    }
  };

  return (
    <div className="max-w-md mx-auto p-6 space-y-6">
      <h1 className="text-3xl font-bold">Welcome, Tradie!</h1>
      {step === 1 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 1: Watch Intro</h2>
          <video src="/tradie-intro.mp4" controls className="w-full rounded" />
          <p>
            Earn steady work with secure milestone payments (3.33% commission,
            1.67% for top tradies).
          </p>
        </div>
      )}
      {step === 2 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Details</h2>
          <input
            type="text"
            placeholder="Trade (e.g., Plumbing)"
            value={form.trade}
            onChange={(e) => setForm({ ...form, trade: e.target.value })}
            className="w-full p-2 border rounded-md border-gray-300 dark:border-gray-600"
            required
          />
          <input
            type="text"
            placeholder="Location"
            value={form.location}
            onChange={(e) => setForm({ ...form, location: e.target.value })}
            className="w-full p-2 border rounded-md border-gray-300 dark:border-gray-600"
            required
          />
          <textarea
            placeholder="Bio"
            value={form.bio}
            onChange={(e) => setForm({ ...form, bio: e.target.value })}
            className="w-full p-2 border rounded-md border-gray-300 dark:border-gray-600"
          />
        </div>
      )}
      {step === 3 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">
            Step 3: Verification & Payment
          </h2>
          <input
            type="file"
            accept="image/*,application/pdf"
            onChange={(e) =>
              setForm({ ...form, license: e.target.files?.[0] || null })}
            className="w-full"
            required
          />
          <input
            type="text"
            placeholder="Paste your Stripe Account ID"
            value={form.stripeAccountId}
            onChange={(e) =>
              setForm({ ...form, stripeAccountId: e.target.value })}
            className="w-full p-2 border rounded-md border-gray-300 rounded-md border-gray-600"}
            required
          />}
        </div>
      )}
      {step === 4 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Step 4: Confirmation</h2>
          <p>Trade: {form.trade}</p>
          <p>Location: {form.location}</p>
          <p>Bio: {form.bio}</p>
          <p>License: {form.license?.name || "None"}</p>
          <p>Stripe Account: {form.stripeAccountId}</p>
          <div className="mt-4 p-4 bg-blue-100 rounded">
            <p className="font-bold">Go Premium for A$99/year!</p>
            <p>Enjoy 1.67% commission and priority job matching.</p>
            <Link href="/premium">
              <Button>Learn More</Button>
            </Link>
          </div>
        </div>
      )}
      <Button onClick={handleNext} className="w-full">
        {step === 4 ? "Finish" : "Next"}
      </Button>
    </div>
  );
}


===== src/app/client/(client)/dashboard/page.tsx =====
"use client";

import { useState, useEffect, useRef } from "react"; // Add useRef
import { Card, Button } from "@/components/ui";
import { supabase } from "@/lib/supabase/client";
import { toast } from "react-hot-toast";
import Chart from "chart.js/auto";

export default function Dashboard() {
  const [jobs, setJobs] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const chartRef = useRef<HTMLCanvasElement>(null);
  const chartInstanceRef = useRef<Chart | null>(null);

  const fetchJobs = async () => {
    const {
      data: { user },
    } = await supabase.auth.getUser();
    const { data, error } = await supabase
      .from("jobs")
      .select("*, milestones(*), region")
      .eq("client_id", user!.id);
    if (error) throw error;
    setJobs(data || []);
  };

  useEffect(() => {
    const channel = supabase
      .channel("milestones")
      .on(
        "postgres_changes",
        { event: "UPDATE", schema: "public", table: "milestones" },
        () => fetchJobs()
      )
      .subscribe();
    return () => supabase.removeChannel(channel);
  }, []);

  useEffect(() => {
    fetchJobs()
      .catch((e) => toast.error(e.message))
      .finally(() => setLoading(false));
  }, []);

  useEffect(() => {
    if (chartRef.current && jobs.length) {
      const completed = jobs.filter((job) => job.status === "completed").length;
      const inProgress = jobs.filter(
        (job) => job.status === "in_progress"
      ).length;
      const pending = jobs.filter((job) => job.status === "pending").length;

      if (chartInstanceRef.current) {
        chartInstanceRef.current.destroy();
      }

      chartInstanceRef.current = new Chart(chartRef.current, {
        type: "bar",
        data: {
          labels: ["Completed", "In Progress", "Pending"],
          datasets: [
            {
              label: "Job Status",
              data: [completed, inProgress, pending],
              backgroundColor: ["#2563EB", "#FBBF24", "#EF4444"],
              borderColor: ["#1E40AF", "#D97706", "#B91C1C"],
              borderWidth: 1,
            },
          ],
        },
        options: {
          scales: {
            y: {
              beginAtZero: true,
              title: { display: true, text: "Number of Jobs" },
            },
            x: { title: { display: true, text: "Status" } },
          },
          plugins: {
            legend: { display: true, position: "top" },
            title: { display: true, text: "Job Completion Rate" },
          },
        },
      });
    }
    return () => {
      if (chartInstanceRef.current) {
        chartInstanceRef.current.destroy();
      }
    };
  }, [jobs]);

  const verifyMilestone = async (milestoneId: string) => {
    const res = await fetch("/api/payments", {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ milestone_id: milestoneId, action: "verify" }),
    });
    if (res.ok) {
      toast.success("Milestone verified!");
      fetchJobs();
    } else {
      toast.error("Failed to verify milestone");
    }
  };

  const disputeMilestone = async (milestoneId: string) => {
    const res = await fetch("/api/disputes", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ milestone_id: milestoneId }),
    });
    if (res.ok) {
      toast.success("Dispute initiated!");
      fetchJobs();
    } else {
      toast.error("Failed to initiate dispute");
    }
  };

  const payMilestone = async (milestoneId: string) => {
    const { data: milestone } = await supabase
      .from("milestones")
      .select("amount")
      .eq("id", milestoneId)
      .single();
    const res = await fetch("/api/payments", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        milestone_id: milestoneId,
        amount: milestone!.amount,
      }),
    });
    if (res.ok) {
      toast.success("Payment processed!");
      fetchJobs();
    } else {
      toast.error("Payment failed");
    }
  };

  return (
    <div className="container mx-auto p-4">
      {loading ? (
        <p>Loading...</p>
      ) : (
        <>
          <h1 className="text-2xl font-bold">Client Dashboard</h1>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
            {jobs.map((job) => (
              <Card key={job.id} className="p-4">
                <h2 className="text-xl">{job.title}</h2>
                <p>Status: {job.status}</p>
                <h3 className="text-lg mt-2">Milestones:</h3>
                <ul>
                  {job.milestones.map((milestone: any) => (
                    <li key={milestone.id} className="mt-1">
                      {milestone.title}: {milestone.status} (Amount: A$
                      {milestone.amount.toFixed(2)}, Commission: A$
                      {(milestone.commission || 0).toFixed(2)})
                      {milestone.status === "completed" && (
                        <>
                          <Button onClick={() => verifyMilestone(milestone.id)}>
                            Verify
                          </Button>
                          <Button
                            variant="outline"
                            onClick={() => disputeMilestone(milestone.id)}
                          >
                            Dispute
                          </Button>
                        </>
                      )}
                      {milestone.status === "verified" && (
                        <Button onClick={() => payMilestone(milestone.id)}>
                          Pay A$
                          {(
                            milestone.amount + (milestone.commission || 0)
                          ).toFixed(2)}
                        </Button>
                      )}
                    </li>
                  ))}
                </ul>
              </Card>
            ))}
          </div>
          <Card className="p-4 mt-4">
            <h2 className="text-xl font-bold">Job Completion Rate</h2>
            <canvas ref={chartRef} />
          </Card>
        </>
      )}
    </div>
  );
}



===== src/app/tradie/(tradie)/dashboard/page.tsx =====
"use client";

import { useState, useEffect } from "react";
import { Card, Button } from "@/components/ui";
import { supabase } from "@/lib/supabase/client";
import { toast } from "react-hot-toast";
import { useRouter } from "next/navigation";

export default function TradieDashboard() {
  const [jobs, setJobs] = useState<any[]>([]);
  const [isTopTradie, setIsTopTradie] = useState(false);
  const router = useRouter();

  const fetchJobs = async () => {
    const {
      data: { user },
    } = await supabase.auth.getUser();
    const { data, error } = await supabase
      .from("jobs")
      .select("*, milestones(*), region")
      .eq("tradie_id", user!.id);
    if (error) throw error;
    setJobs(data || []);
  };

  useEffect(() => {
    const fetchUser = async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      const { data } = await supabase
        .from("users")
        .select("top_tradie")
        .eq("id", user!.id)
        .single();
      setIsTopTradie(data?.top_tradie || false);
    };
    fetchUser();
  }, []);

  useEffect(() => {
    const channel = supabase
      .channel("milestones")
      .on(
        "postgres_changes",
        { event: "UPDATE", schema: "public", table: "milestones" },
        (payload) => {
          if (
            payload.new.status === "verified" ||
            payload.new.status === "paid"
          ) {
            toast.success(
              `Milestone "${payload.new.title}" ${payload.new.status}!`
            );
            fetchJobs();
          }
        }
      )
      .subscribe();
    return () => supabase.removeChannel(channel);
  }, []);

  useEffect(() => {
    fetchJobs().catch((e) => toast.error(e.message));
  }, []);

  const markCompleted = async (milestoneId: string) => {
    const { data, error } = await supabase
      .from("milestones")
      .update({ status: "completed" })
      .eq("id", milestoneId)
      .select();
    if (error) {
      toast.error("Failed to mark as completed");
    } else {
      toast.success("Milestone marked as completed!");
      fetchJobs();
    }
  };

  const viewDetails = (jobId: string) => router.push(`/tradie/job/${jobId}`);

  const disputeMilestone = async (milestoneId: string) => {
    const res = await fetch("/api/disputes", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ milestone_id: milestoneId }),
    });
    if (res.ok) toast.success("Dispute initiated!");
    else toast.error("Failed to initiate dispute");
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold">Tradie Dashboard</h1>
      <p className="text-sm">
        Milestones follow QBCC-compliant 14+14 day payment timelines.
      </p>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
        {jobs.map((job) => (
          <Card key={job.id} className="p-4">
            <h2 className="text-xl">{job.title}</h2>
            <p>Status: {job.status}</p>
            <h3 className="text-lg mt-2">Milestones:</h3>
            <ul>
              {job.milestones.map((milestone: any) => {
                const commissionRate = isTopTradie ? 0.0167 : 0.0333;
                const commission =
                  job.region === "Regional"
                    ? Math.min(milestone.amount * commissionRate, 25)
                    : milestone.amount * commissionRate;
                return (
                  <li key={milestone.id} className="mt-1">
                    {milestone.title}: {milestone.status} (Amount: A$
                    {milestone.amount.toFixed(2)}, Commission: A$
                    {commission.toFixed(2)})
                    {milestone.status === "pending" && (
                      <Button onClick={() => markCompleted(milestone.id)}>
                        Mark as Completed
                      </Button>
                    )}
                    {milestone.status === "completed" && (
                      <Button
                        variant="outline"
                        onClick={() => disputeMilestone(milestone.id)}
                      >
                        Dispute
                      </Button>
                    )}
                    <Button
                      variant="outline"
                      onClick={() => viewDetails(job.id)}
                    >
                      View Details
                    </Button>
                  </li>
                );
              })}
            </ul>
          </Card>
        ))}
      </div>
    </div>
  );
}



===== src/app/client/(client)/post-job/page.tsx =====
"use client";

import { useState, useEffect } from "react"; // Add useEffect
import { Button } from "@/components/ui";
import { useRouter } from "next/navigation";
import { toast } from "react-hot-toast";
import { supabase } from "@/lib/supabase/client";

export default function PostJob() {
  const [job, setJob] = useState({ title: "", description: "", budget: "" });
  const [milestones, setMilestones] = useState([
    { title: "", description: "", percentage: "", due_date: "" },
  ]);
  const [region, setRegion] = useState("");
  const router = useRouter();

  useEffect(() => {
    const fetchUser = async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      const { data } = await supabase
        .from("users")
        .select("region")
        .eq("id", user!.id)
        .single();
      setRegion(data?.region || "");
    };
    fetchUser();
  }, []);

  const calculateCommission = () => {
    const budget = Number(job.budget);
    let commission = budget * 0.0333;
    if (region === "Regional") commission = Math.min(commission, 25);
    return commission.toFixed(2);
  };

  const addMilestone = () => {
    setMilestones([
      ...milestones,
      { title: "", description: "", percentage: "", due_date: "" },
    ]);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const totalPercentage = milestones.reduce(
      (sum, m) => sum + Number(m.percentage),
      0
    );
    if (totalPercentage !== 100) {
      toast.error("Milestone percentages must sum to 100%");
      return;
    }

    const {
      data: { user },
    } = await supabase.auth.getUser();
    const res = await fetch("/api/jobs", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        title: job.title,
        description: job.description,
        budget: Number(job.budget),
        client_id: user!.id,
        payment_type: "milestone",
        milestones,
      }),
    });

    if (res.ok) {
      toast.success("Job posted!");
      router.push("/client/dashboard");
    } else {
      toast.error("Failed to post job");
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold">Post a Job</h1>
      <form onSubmit={handleSubmit} className="space-y-4 mt-4">
        <div>
          <label className="block">Job Title</label>
          <input
            type="text"
            value={job.title}
            onChange={(e) => setJob({ ...job, title: e.target.value })}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <div>
          <label className="block">Description</label>
          <textarea
            value={job.description}
            onChange={(e) => setJob({ ...job, description: e.target.value })}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <div>
          <label className="block">Budget (A$)</label>
          <input
            type="number"
            value={job.budget}
            onChange={(e) => setJob({ ...job, budget: e.target.value })}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <h2 className="text-xl font-semibold">Milestones</h2>
        {milestones.map((milestone, index) => (
          <div key={index} className="space-y-2 border p-4 rounded">
            <div>
              <label className="block">Milestone Title</label>
              <input
                type="text"
                value={milestone.title}
                onChange={(e) => {
                  const newMilestones = [...milestones];
                  newMilestones[index].title = e.target.value;
                  setMilestones(newMilestones);
                }}
                className="w-full p-2 border rounded"
                required
              />
            </div>
            <div>
              <label className="block">Description</label>
              <textarea
                value={milestone.description}
                onChange={(e) => {
                  const newMilestones = [...milestones];
                  newMilestones[index].description = e.target.value;
                  setMilestones(newMilestones);
                }}
                className="w-full p-2 border rounded"
              />
            </div>
            <div>
              <label className="block">Percentage (%)</label>
              <input
                type="number"
                value={milestone.percentage}
                onChange={(e) => {
                  const newMilestones = [...milestones];
                  newMilestones[index].percentage = e.target.value;
                  setMilestones(newMilestones);
                }}
                className="w-full p-2 border rounded"
                required
              />
            </div>
            <div>
              <label className="block">Due Date</label>
              <input
                type="date"
                value={milestone.due_date}
                onChange={(e) => {
                  const newMilestones = [...milestones];
                  newMilestones[index].due_date = e.target.value;
                  setMilestones(newMilestones);
                }}
                className="w-full p-2 border rounded"
                required
              />
            </div>
          </div>
        ))}
        <p className="text-sm">
          Estimated commission: A${calculateCommission()} (
          {region === "Regional" ? "capped at A$25" : "3.33%"})
        </p>
        <Button type="button" onClick={addMilestone} variant="outline">
          Add Milestone
        </Button>
        <Button type="submit">Post Job</Button>
      </form>
    </div>
  );
}



===== src/app/client/(client)/settings/page.tsx =====
"use client";

import { useState } from "react";
import { supabase } from "@/lib/supabase/client";
import { Button } from "@/components/ui";
import QRCode from "qrcode.react";
import { toast } from "react-hot-toast";

export default function Settings() {
  const [qrCode, setQrCode] = useState("");
  const [mfaCode, setMfaCode] = useState("");

  const enableMFA = async () => {
    const { data: user } = await supabase.auth.getUser();
    const { data, error } = await supabase.auth.mfa.enroll({
      userId: user.user!.id,
      factorType: "totp",
    });
    if (error) {
      toast.error(error.message);
    } else {
      setQrCode(data.totp.qr_code);
    }
  };

  const verifyMFA = async () => {
    const { error } = await supabase.auth.mfa.verify({
      factorId: (await supabase.auth.mfa.listFactors()).data.totp[0].id,
      code: mfaCode,
    });
    if (error) {
      toast.error(error.message);
    } else {
      toast.success("MFA enabled!");
      setQrCode("");
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold">Settings</h1>
      <div className="mt-4">
        <h2 className="text-xl">Multi-Factor Authentication</h2>
        {!qrCode ? (
          <Button onClick={enableMFA}>Enable MFA</Button>
        ) : (
          <div>
            <p>Scan this QR code with an authenticator app:</p>
            <QRCode value={qrCode} />
            <input
              type="text"
              value={mfaCode}
              onChange={(e) => setMfaCode(e.target.value)}
              placeholder="Enter 6-digit code"
              className="mt-2 p-2 border rounded"
            />
            <Button onClick={verifyMFA} className="mt-2">
              Verify
            </Button>
          </div>
        )}
      </div>
    </div>
  );
}



===== src/app/tradie/(tradie)/settings/page.tsx =====
"use client";

import { useState } from "react";
import { supabase } from "@/lib/supabase/client";
import { Button } from "@/components/ui";
import QRCode from "qrcode.react";
import { toast } from "react-hot-toast";

export default function Settings() {
  const [qrCode, setQrCode] = useState("");
  const [mfaCode, setMfaCode] = useState("");

  const enableMFA = async () => {
    const { data: user } = await supabase.auth.getUser();
    const { data, error } = await supabase.auth.mfa.enroll({
      userId: user.user!.id,
      factorType: "totp",
    });
    if (error) {
      toast.error(error.message);
    } else {
      setQrCode(data.totp.qr_code);
    }
  };

  const verifyMFA = async () => {
    const { error } = await supabase.auth.mfa.verify({
      factorId: (await supabase.auth.mfa.listFactors()).data.totp[0].id,
      code: mfaCode,
    });
    if (error) {
      toast.error(error.message);
    } else {
      toast.success("MFA enabled!");
      setQrCode("");
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold">Settings</h1>
      <div className="mt-4">
        <h2 className="text-xl">Multi-Factor Authentication</h2>
        {!qrCode ? (
          <Button onClick={enableMFA}>Enable MFA</Button>
        ) : (
          <div>
            <p>Scan this QR code with an authenticator app:</p>
            <QRCode value={qrCode} />
            <input
              type="text"
              value={mfaCode}
              onChange={(e) => setMfaCode(e.target.value)}
              placeholder="Enter 6-digit code"
              className="mt-2 p-2 border rounded"
            />
            <Button onClick={verifyMFA} className="mt-2">
              Verify
            </Button>
          </div>
        )}
      </div>
    </div>
  );
}



===== src/components/shared/notifications.tsx =====
"use client";

import { useEffect, useState } from "react";
import { supabase } from "@/lib/supabase/client";
import { toast } from "react-hot-toast";
import { Button } from "@/components/ui";

export function Notifications({ userId }: { userId: string }) {
  const [notifications, setNotifications] = useState<any[]>([]);

  useEffect(() => {
    const fetchNotifications = async () => {
      const { data } = await supabase
        .from("notifications")
        .select("*")
        .eq("user_id", userId)
        .eq("is_read", false);
      setNotifications(data || []);
    };
    fetchNotifications();

    const channel = supabase
      .channel("notifications")
      .on(
        "postgres_changes",
        {
          event: "INSERT",
          schema: "public",
          table: "notifications",
          filter: `user_id=eq.${userId}`,
        },
        (payload) => {
          setNotifications((prev) => [...prev, payload.new]);
          toast.success(payload.new.message);
        }
      )
      .subscribe();
    return () => supabase.removeChannel(channel);
  }, [userId]);

  const markAsRead = async (notificationId: string) => {
    await supabase
      .from("notifications")
      .update({ is_read: true })
      .eq("id", notificationId);
    setNotifications(notifications.filter((n) => n.id !== notificationId));
  };

  return (
    <div className="p-4">
      {notifications.map((notification) => (
        <div
          key={notification.id}
          className="p-2 border-b flex justify-between"
        >
          <p>{notification.message}</p>
          <Button onClick={() => markAsRead(notification.id)} variant="outline">
            Mark as Read
          </Button>
        </div>
      ))}
    </div>
  );
}



===== src/components/shared/messages.tsx =====
"use client";

import { useEffect, useState } from "react";
import { supabase } from "@/lib/supabase/client";
import { Button } from "@/components/ui";

export function Messages({ userId, jobId }: { userId: string; jobId: string }) {
  const [messages, setMessages] = useState<any[]>([]);
  const [newMessage, setNewMessage] = useState("");

  useEffect(() => {
    const fetchMessages = async () => {
      const { data, error } = await supabase
        .from("messages")
        .select(
          "*, sender:users!sender_id(name), receiver:users!receiver_id(name)"
        )
        .eq("job_id", jobId);
      if (!error) setMessages(data || []);
    };
    fetchMessages();

    const channel = supabase
      .channel("messages")
      .on(
        "postgres_changes",
        {
          event: "INSERT",
          schema: "public",
          table: "messages",
          filter: `job_id=eq.${jobId}`,
        },
        (payload) => setMessages((prev) => [...prev, payload.new])
      )
      .subscribe();
    return () => supabase.removeChannel(channel);
  }, [jobId]);

  const sendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    const { data: job } = await supabase
      .from("jobs")
      .select("client_id, tradie_id")
      .eq("id", jobId)
      .single();
    const receiverId = userId === job.client_id ? job.tradie_id : job.client_id;
    const { error } = await supabase.from("messages").insert([
      {
        sender_id: userId,
        receiver_id: receiverId,
        content: newMessage,
        job_id: jobId,
      },
    ]);
    if (!error) setNewMessage("");
    else toast.error("Failed to send message");
  };

  return (
    <div className="p-4">
      <div className="space-y-2 max-h-96 overflow-y-auto">
        {messages.map((msg) => (
          <div key={msg.id} className="p-2 border-b">
            <p className="font-semibold">{msg.sender.name}:</p>
            <p>{msg.content}</p>
            <p className="text-sm text-gray-500">
              {new Date(msg.created_at).toLocaleString()}
            </p>
          </div>
        ))}
      </div>
      <form onSubmit={sendMessage} className="mt-4 flex space-x-2">
        <input
          type="text"
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          className="flex-grow p-2 border rounded"
          placeholder="Type a message..."
          required
        />
        <Button type="submit">Send</Button>
      </form>
    </div>
  );
}



===== src/components/ui/Chatbot.tsx =====
"use client";

import { useState } from "react";
import { Button } from "@/components/ui";

export function Chatbot() {
  const [messages, setMessages] = useState<{ role: string; content: string }[]>(
    []
  );
  const [input, setInput] = useState("");

  const sendMessage = async () => {
    setMessages([...messages, { role: "user", content: input }]);
    const res = await fetch("/api/support", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ message: input }),
    });
    const { reply } = await res.json();
    setMessages([
      ...messages,
      { role: "user", content: input },
      { role: "bot", content: reply },
    ]);
    setInput("");
  };

  return (
    <div className="fixed bottom-4 right-4 w-80 bg-white dark:bg-gray-800 p-4 rounded-lg shadow-lg">
      <div className="max-h-64 overflow-y-auto space-y-2">
        {messages.map((msg, i) => (
          <div key={i} className={msg.role === "user" ? "text-right" : ""}>
            <p className="p-2 rounded bg-gray-100 dark:bg-gray-700">
              {msg.content}
            </p>
          </div>
        ))}
      </div>
      <div className="mt-2 flex">
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          className="flex-grow p-2 border rounded-l dark:bg-gray-700"
          placeholder="Ask a question..."
        />
        <Button onClick={sendMessage} className="rounded-l-none">
          Send
        </Button>
      </div>
    </div>
  );
}



===== src/lib/auth.tsx =====
// src/lib/auth.tsx
import { NextAuthOptions } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import GoogleProvider from "next-auth/providers/google";
import { SupabaseAdapter } from "@auth/supabase-adapter";
import { createClient } from "@/lib/supabase/server";

export const authOptions: NextAuthOptions = {
  adapter: SupabaseAdapter({
    url: process.env.NEXT_PUBLIC_SUPABASE_URL!,
    secret: process.env.SUPABASE_SERVICE_ROLE_KEY!,
  }),
  providers: [
    CredentialsProvider({
      async authorize(credentials) {
        const supabase = createClient();
        const { data, error } = await supabase.auth.signInWithPassword({
          email: credentials?.email || "",
          password: credentials?.password || "",
        });
        if (error || !data.user) return null;
        const { data: userData } = await supabase
          .from("users")
          .select("id, email, role, has_completed_onboarding")
          .eq("id", data.user.id)
          .single();
        return {
          id: userData.id,
          email: userData.email,
          role: userData.role,
          has_completed_onboarding: userData.has_completed_onboarding ?? false,
        };
      },
    }),
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
  ],
  callbacks: {
    async session({ session, user }) {
      const supabase = createClient();
      const { data: factors } = await supabase.auth.mfa.listFactors({
        userId: user.id,
      });
      session.user.mfa_enabled = factors?.totp.length > 0;
      return session;
    },
    async redirect({ baseUrl, user }) {
      if (!user.has_completed_onboarding) {
        return user.role === "tradie"
          ? `${baseUrl}/tradie/onboarding`
          : `${baseUrl}/client/onboarding`;
      }
      return user.role === "tradie"
        ? `${baseUrl}/tradie/dashboard`
        : `${baseUrl}/client/dashboard`;
    },
  },
};



===== src/lib/supabase/client.ts =====
import { createBrowserClient } from "@supabase/ssr";

export const createClient = () =>
  createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  );



===== src/lib/supabase/server.ts =====
import { createServerClient } from "@supabase/ssr";
import { cookies } from "next/headers";

export const createClient = () => {
  const cookieStore = cookies();
  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll();
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            );
          } catch {
            // Ignore errors in Server Components
          }
        },
      },
    }
  );
};



===== src/lib/supabase/functions/milestone-payment.ts =====
import Stripe from "stripe";
import { createClient } from "@/lib/supabase/server";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: "2024-04-10",
});
const supabase = createClient();

export async function processMilestonePayment(milestoneId: string) {
  try {
    // Fetch milestone and related job
    const { data: milestone, error: milestoneError } = await supabase
      .from("milestones")
      .select("*, job:jobs(client_id, region)")
      .eq("id", milestoneId)
      .single();
    if (milestoneError || !milestone) {
      throw new Error("Milestone not found");
    }

    // Fetch client payment details
    const { data: client, error: clientError } = await supabase
      .from("users")
      .select("stripe_customer_id, payment_method_id")
      .eq("id", milestone.job.client_id)
      .single();
    if (clientError || !client) {
      throw new Error("Client not found");
    }

    // Calculate commission (3.33%, capped at A$25 in regional Queensland)
    const commissionRate = 0.0333;
    let commission = milestone.amount * commissionRate;
    if (milestone.job.region === "Regional") {
      commission = Math.min(commission, 25); // A$25 cap
    }

    // Create payment intent
    const paymentIntent = await stripe.paymentIntents.create({
      amount: Math.round((milestone.amount + commission) * 100), // Convert to cents
      currency: "aud", // Use AUD for Queensland
      customer: client.stripe_customer_id,
      payment_method: client.payment_method_id,
      off_session: true,
      confirm: true,
      description: `Milestone: ${milestone.title} (Job: ${milestone.job_id})`,
      metadata: {
        milestone_id: milestoneId,
        commission: commission.toFixed(2),
        region: milestone.job.region,
      },
    });

    // Update milestone status
    const { error: updateError } = await supabase
      .from("milestones")
      .update({
        status: "paid",
        commission,
        payment_intent_id: paymentIntent.id,
        updated_at: new Date().toISOString(),
      })
      .eq("id", milestoneId);
    if (updateError) {
      throw new Error("Failed to update milestone");
    }

    // Notify client and tradie
    const { data: users } = await supabase
      .from("jobs")
      .select("client_id, tradie_id")
      .eq("id", milestone.job_id)
      .single();
    await supabase.from("notifications").insert([
      {
        user_id: users.client_id,
        message: `Milestone "${milestone.title}" paid (A$${
          milestone.amount
        }, commission A$${commission.toFixed(2)})`,
        job_id: milestone.job_id,
      },
      {
        user_id: users.tradie_id,
        message: `Milestone "${milestone.title}" paid (A$${milestone.amount})`,
        job_id: milestone.job_id,
      },
    ]);

    return { success: true, paymentIntent };
  } catch (error) {
    console.error("Payment error:", error);
    await supabase.from("notifications").insert({
      user_id: (await supabase.auth.getUser()).data.user!.id,
      message: `Payment failed for milestone ${milestoneId}: ${error.message}`,
      job_id: milestone?.job_id,
    });
    return { success: false, error: error.message };
  }
}



===== src/lib/supabase/functions/stripe-payment.ts =====
import Stripe from "stripe";
const stripe = new Stripe(Deno.env.get("STRIPE_SECRET_KEY")!);

export async function handler(req: Request) {
  const { amount, client_id, job_id } = await req.json();
  const commissionFee = amount * 0.0333; // Align with milestone rate
  const paymentIntent = await stripe.paymentIntents.create({
    amount,
    currency: "aud",
    metadata: { client_id, job_id },
  });
  await supabase.from("payments").insert({
    job_id,
    client_id,
    amount,
    status: "pending",
    stripe_payment_id: paymentIntent.id,
    commission_fee: commissionFee,
  });
  return new Response(
    JSON.stringify({ clientSecret: paymentIntent.client_secret })
  );
}



===== src/app/api/payments/route.tsx =====
MISSING



===== src/app/api/premium/route.tsx =====
MISSING



===== src/app/api/notifications/route.tsx =====
MISSING



===== src/app/api/messages/route.tsx =====
MISSING



===== src/app/api/referrals/route.tsx =====
MISSING



===== src/app/api/disputes/route.tsx =====
MISSING



===== src/app/api/analytics/route.tsx =====
MISSING



===== src/app/api/payments/setup/route.tsx =====
import { NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/server";
import Stripe from "stripe";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: "2024-04-10",
});

export async function POST(request: Request) {
  const supabase = createClient();
  const { user_id } = await request.json();
  const { data: user } = await supabase
    .from("users")
    .select("stripe_customer_id")
    .eq("id", user_id)
    .single();

  if (!user.stripe_customer_id) {
    const customer = await stripe.customers.create({ metadata: { user_id } });
    await supabase
      .from("users")
      .update({ stripe_customer_id: customer.id })
      .eq("id", user_id);
    user.stripe_customer_id = customer.id;
  }

  const setupIntent = await stripe.setupIntents.create({
    customer: user.stripe_customer_id,
    payment_method_types: ["card"],
  });

  return NextResponse.json({ clientSecret: setupIntent.client_secret });
}



===== src/app/api/jobs/route.tsx =====
MISSING



===== src/app/layout.tsx =====
import { Chatbot } from "@/components/ui/Chatbot";

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>
        {children}
        <Chatbot />
      </body>
    </html>
  );
}



===== src/components/Providers.tsx =====
"use client";

import { SessionProvider } from "next-auth/react";
import { createContext, useContext, ReactNode } from "react";

// Job Context
interface JobContextType {
  jobs: any[];
  addJob: (job: any) => void;
  updateJob: (jobId: string, updates: any) => void;
}

const JobContext = createContext<JobContextType | undefined>(undefined);

export function JobProvider({ children }: { children: ReactNode }) {
  const [jobs, setJobs] = useState<any[]>([]);

  const addJob = (job: any) => {
    setJobs((prevJobs) => [...prevJobs, job]);
  };

  const updateJob = (jobId: string, updates: any) => {
    setJobs((prevJobs) =>
      prevJobs.map((job) => (job.id === jobId ? { ...job, ...updates } : job))
    );
  };

  return (
    <JobContext.Provider value={{ jobs, addJob, updateJob }}>
      {children}
    </JobContext.Provider>
  );
}

export function useJobs() {
  const context = useContext(JobContext);
  if (!context) throw new Error("useJobs must be used within a JobProvider");
  return context;
}

// Combined Providers
interface ProvidersProps {
  children: ReactNode;
}

export function Providers({ children }: ProvidersProps) {
  return (
    <SessionProvider>
      <JobProvider>{children}</JobProvider>
    </SessionProvider>
  );
}



===== src/app/api/support/route.tsx =====
MISSING



