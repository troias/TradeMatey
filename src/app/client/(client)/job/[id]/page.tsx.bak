"use client";

import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import Link from "next/link";
import { Card, Button } from "@/components/ui";
import MilestoneBadge from "@/components/MilestoneBadge";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";
import { createClient } from "@/lib/supabase/client";

type Job = any;

export default function JobDetails({ params }: { params: { id: string } }) {
  const jobId = params.id;
  const [job, setJob] = useState<Job | null>(null);
  const [interests, setInterests] = useState<any[] | null>(null);
  const [authUserId, setAuthUserId] = useState<string | null>(null);
  const [assignMilestonesOptOut, setAssignMilestonesOptOut] = useState(false);

  const { data, error, isLoading, refetch } = useQuery({
    queryKey: ["job", jobId],
    queryFn: async () => {
      const res = await fetch(`/api/jobs?job_id=${jobId}`);
      if (!res.ok) throw new Error("Failed to fetch job");
      return res.json();
    },
  });

  useEffect(() => {
    if (Array.isArray(data) && data.length > 0) {
      const row = data[0];
      setJob(row);
      if (row._meta?.interests) setInterests(row._meta.interests);
    }
    if (error && (error as Error).message) toast.error((error as Error).message);
  }, [data, error]);

  useEffect(() => {
    const supabase = createClient();
    let mounted = true;
    (async () => {
      try {
        const { data: userData } = await supabase.auth.getUser();
        if (mounted) setAuthUserId(userData?.user?.id ?? null);
        try {
          if (mounted && typeof window !== "undefined") {
            const w = window as any;
            if (!userData?.user && w?.__E2E_AUTH?.userId) {
              setAuthUserId(w.__E2E_AUTH.userId);
            }
          }
        } catch {}
      } catch (e) {
        // ignore
      }
    })();
    return () => {
      mounted = false;
    };
  }, []);

  const acceptTradie = async (tradieId: string) => {
    if (!jobId) return;
    const assignMilestones = !assignMilestonesOptOut;
    try {
      const extraHeaders: Record<string, string> = { "Content-Type": "application/json" };
      try {
        if (typeof window !== "undefined" && (window as any).__E2E_TEST_SEED_TOKEN) {
          extraHeaders["x-test-seed-token"] = (window as any).__E2E_TEST_SEED_TOKEN;
        }
      } catch {}

      const res = await fetch("/api/jobs/accept", {
        method: "POST",
        headers: extraHeaders,
        body: JSON.stringify({ job_id: jobId, tradie_id: tradieId, assign_milestones: assignMilestones }),
        credentials: "include",
      });
      const json = await res.json().catch(() => ({}));
      if (!res.ok) throw new Error(json?.error || "Accept failed");
      toast.success("Tradie accepted");
      await refetch();
    } catch (err: unknown) {
      console.error(err);
      let msg = String(err);
      if (typeof err === "object" && err !== null && "message" in err) {
        const maybe = err as { message?: unknown };
        if (typeof maybe.message === "string") msg = maybe.message as string;
      }
      toast.error(msg || "Accept failed");
    }
  };

  if (!job && isLoading) return <div className="text-center py-10">Loading...</div>;
  if (!job) return <div className="text-center py-10">Job not found</div>;

  const milestones = job.milestones || [];
  const currentMilestoneIndex = milestones.findIndex((m: any) => m.status !== "completed" && m.status !== "verified");

  return (
    <div className="space-y-6">
      <div className="flex items-baseline justify-between">
        <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">{job.title}</h1>
        {job.created_at ? <div className="text-sm text-gray-500">Posted: {new Date(job.created_at).toLocaleString()}</div> : null}
      </div>

      <Card className="p-6 shadow-lg">
        <p className="text-gray-600 dark:text-gray-400">Description: {job.description}</p>
        <p className="text-gray-600 dark:text-gray-400">Budget: ${job.budget}</p>
        <p className="text-gray-600 dark:text-gray-400">Status: {job.status}</p>
        <p className="text-gray-600 dark:text-gray-400">Payment Type: {job.payment_type}</p>

        {job.payment_type === "milestone" && (
          <>
            <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200 mt-4">Milestones</h2>
            <motion.ul className="mt-2 space-y-3" initial="hidden" animate="visible" variants={{ hidden: {}, visible: { transition: { staggerChildren: 0.06 } } }}>
              {milestones.map((milestone: any, idx: number) => {
                const isCurrent = idx === currentMilestoneIndex;
                const baseClass = `p-3 rounded-lg `;
                const statusClass = milestone.status === "completed" ? "bg-yellow-100 dark:bg-yellow-800 border border-yellow-200" : milestone.status === "verified" ? "bg-green-100 dark:bg-green-800 border border-green-200" : isCurrent ? "bg-green-100 dark:bg-green-800 ring-1 ring-green-200" : "bg-gray-50 dark:bg-gray-800";
                const accepted = (interests || []).find((i: any) => (i.milestone_id && i.milestone_id === milestone.id) || (i.tradie_id && i.tradie_id === milestone.tradie_id));
                return (
                  <motion.li key={milestone.id} className={baseClass + statusClass} variants={{ hidden: { opacity: 0, y: 8 }, visible: { opacity: 1, y: 0 } }} whileHover={{ scale: 1.02 }} transition={{ type: "spring", stiffness: 260, damping: 20 }}>
                    <div className="flex justify-between items-center">
                      <div>
                        <Link href={`/client/job/${jobId}/milestone/${milestone.id}`} className="underline font-semibold text-lg">{milestone.title}</Link>
                        <div className="text-sm text-gray-600 dark:text-gray-400 flex items-center gap-3 mt-1">
                          <MilestoneBadge status={milestone.status} isCurrent={isCurrent} size={isCurrent ? "lg" : "md"} />
                          <span>Status: {milestone.status} â€¢ ${milestone.amount}</span>
                        </div>
                        <div className="text-xs text-gray-500 mt-1">
                          {milestone.created_at ? <div>Created: {new Date(milestone.created_at).toLocaleString()}</div> : null}
                          {accepted && accepted.accepted_at ? <div>Assigned: {new Date(accepted.accepted_at).toLocaleString()}</div> : null}
                        </div>
                      </div>
                      <div>
                        {milestone.status === "completed" && <div className="text-xs text-orange-600">QBCC: 14 days to start</div>}
                        {milestone.status === "verified" && <div className="text-xs text-emerald-600">Paid</div>}
                        {(() => {
                          const acceptedTradies = new Set((interests || []).filter((i) => i.status === "accepted").map((i) => i.tradie_id));
                          if (isCurrent && milestone.status !== "verified" && milestone.status !== "completed" && milestone.tradie_id && acceptedTradies.has(milestone.tradie_id)) {
                            return <div className="text-xs text-emerald-600">Current</div>;
                          }
                          return null;
                        })()}
                      </div>
                    </div>
                  </motion.li>
                );
              })}
            </motion.ul>
          </>
        )}

        {/* Tradie interest / acceptance */}
        <div className="mt-4">
          <h3 className="text-lg font-semibold">Tradies interested</h3>
          {!interests && <div className="text-sm text-gray-500">No activity yet</div>}
          {interests && (
            <ul className="mt-2 space-y-2">
              {interests.map((it: any) => (
                <li key={it.id} className="flex justify-between items-center p-2 bg-gray-50 dark:bg-gray-800 rounded">
                  <div>
                    <div className="font-medium">Tradie: {it.tradie_id}</div>
                    <div className="text-xs text-gray-500">Status: {it.status || "interested"}</div>
                    {it.accepted_at ? <div className="text-xs text-gray-500">Accepted: {new Date(it.accepted_at).toLocaleString()}</div> : null}
                  </div>
                  <div>
                    {it.status === "accepted" ? <span className="text-sm text-green-600">Accepted</span> : authUserId && job.client_id === authUserId ? (
                      <div className="flex items-center gap-2">
                        <label className="text-sm flex items-center gap-2">
                          <input type="checkbox" checked={!assignMilestonesOptOut} onChange={() => setAssignMilestonesOptOut((s) => !s)} /> Assign milestones
                        </label>
                        <Button onClick={() => acceptTradie(it.tradie_id)}>Accept</Button>
                      </div>
                    ) : null}
                  </div>
                </li>
              ))}
            </ul>
          )}
        </div>
      </Card>
    </div>
  );
}
